
Li-ionTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012ca  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000270  00800060  000012ca  0000137e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005f  008002d0  008002d0  000015ee  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  000015ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d5c  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033f  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001e0  00000000  00000000  00002697  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000004cf  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000018fe  00000000  00000000  00002d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000833  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001a58  00000000  00000000  00004e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000320  00000000  00000000  000068d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000556  00000000  00000000  00006bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000b6b  00000000  00000000  00007146  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000000fe  00000000  00000000  00007cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  00007daf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
       4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
       6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
       8:	1d c4       	rjmp	.+2106   	; 0x844 <__vector_4>
       a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
       c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
       e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
      10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
      12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
      14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
      16:	4e c8       	rjmp	.-3940   	; 0xfffff0b4 <__eeprom_end+0xff7ef0a8>
      18:	00 c8       	rjmp	.-4096   	; 0xfffff01a <__eeprom_end+0xff7ef00e>
      1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
      1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
      1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
      20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
      22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
      24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>

00000026 <leftArrow>:
      26:	02 04 08 10 08 04 02 00                             ........

0000002e <rightArrow>:
      2e:	08 04 02 01 02 04 08 00                             ........

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf e5       	ldi	r28, 0x5F	; 95
      3c:	d4 e0       	ldi	r29, 0x04	; 4
      3e:	de bf       	out	0x3e, r29	; 62
      40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
      42:	12 e0       	ldi	r17, 0x02	; 2
      44:	a0 e6       	ldi	r26, 0x60	; 96
      46:	b0 e0       	ldi	r27, 0x00	; 0
      48:	ea ec       	ldi	r30, 0xCA	; 202
      4a:	f2 e1       	ldi	r31, 0x12	; 18
      4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
      4e:	05 90       	lpm	r0, Z+
      50:	0d 92       	st	X+, r0
      52:	a0 3d       	cpi	r26, 0xD0	; 208
      54:	b1 07       	cpc	r27, r17
      56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
      58:	13 e0       	ldi	r17, 0x03	; 3
      5a:	a0 ed       	ldi	r26, 0xD0	; 208
      5c:	b2 e0       	ldi	r27, 0x02	; 2
      5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
      60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
      62:	af 32       	cpi	r26, 0x2F	; 47
      64:	b1 07       	cpc	r27, r17
      66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
      68:	15 d4       	rcall	.+2090   	; 0x894 <main>
      6a:	2d c9       	rjmp	.-3494   	; 0xfffff2c6 <__eeprom_end+0xff7ef2ba>

0000006c <__bad_interrupt>:
      6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <PARS_Init>:
uint8_t inc = 0;
uint8_t flag = 0;

void PARS_Init(void)
{
  argc = 0;
      6e:	10 92 1e 03 	sts	0x031E, r1
  argv[0] = buf;
      72:	8f e1       	ldi	r24, 0x1F	; 31
      74:	93 e0       	ldi	r25, 0x03	; 3
      76:	90 93 1b 03 	sts	0x031B, r25
      7a:	80 93 1a 03 	sts	0x031A, r24
  flag = FALSE;
      7e:	10 92 d1 02 	sts	0x02D1, r1
  inc = 0;
      82:	10 92 d0 02 	sts	0x02D0, r1
}
      86:	08 95       	ret

00000088 <PARS_Parser>:

void PARS_Parser(char sym)
{
      88:	90 91 d0 02 	lds	r25, 0x02D0
   if (sym != '\r'){
      8c:	8d 30       	cpi	r24, 0x0D	; 13
      8e:	09 f4       	brne	.+2      	; 0x92 <PARS_Parser+0xa>
      90:	4a c0       	rjmp	.+148    	; 0x126 <PARS_Parser+0x9e>
     if (inc < SIZE_RECEIVE_BUF - 1){
      92:	9f 30       	cpi	r25, 0x0F	; 15
      94:	08 f0       	brcs	.+2      	; 0x98 <PARS_Parser+0x10>
      96:	40 c0       	rjmp	.+128    	; 0x118 <PARS_Parser+0x90>
        if (sym != ' '){
      98:	80 32       	cpi	r24, 0x20	; 32
      9a:	79 f1       	breq	.+94     	; 0xfa <PARS_Parser+0x72>
           if (!argc){
      9c:	20 91 1e 03 	lds	r18, 0x031E
      a0:	22 23       	and	r18, r18
      a2:	49 f4       	brne	.+18     	; 0xb6 <PARS_Parser+0x2e>
              argv[0] = buf;
      a4:	2f e1       	ldi	r18, 0x1F	; 31
      a6:	33 e0       	ldi	r19, 0x03	; 3
      a8:	30 93 1b 03 	sts	0x031B, r19
      ac:	20 93 1a 03 	sts	0x031A, r18
              argc++;  
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	20 93 1e 03 	sts	0x031E, r18
           }
          
           if (flag){
      b6:	20 91 d1 02 	lds	r18, 0x02D1
      ba:	22 23       	and	r18, r18
      bc:	a9 f0       	breq	.+42     	; 0xe8 <PARS_Parser+0x60>
              if (argc < AMOUNT_PAR){
      be:	40 91 1e 03 	lds	r20, 0x031E
      c2:	42 30       	cpi	r20, 0x02	; 2
      c4:	78 f4       	brcc	.+30     	; 0xe4 <PARS_Parser+0x5c>
                 argv[argc] = &buf[inc];   
      c6:	e4 2f       	mov	r30, r20
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	ee 0f       	add	r30, r30
      cc:	ff 1f       	adc	r31, r31
      ce:	e6 5e       	subi	r30, 0xE6	; 230
      d0:	fc 4f       	sbci	r31, 0xFC	; 252
      d2:	29 2f       	mov	r18, r25
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	21 5e       	subi	r18, 0xE1	; 225
      d8:	3c 4f       	sbci	r19, 0xFC	; 252
      da:	31 83       	std	Z+1, r19	; 0x01
      dc:	20 83       	st	Z, r18
                 argc++;
      de:	4f 5f       	subi	r20, 0xFF	; 255
      e0:	40 93 1e 03 	sts	0x031E, r20
              }
              flag = FALSE; 
      e4:	10 92 d1 02 	sts	0x02D1, r1
            }
            
            buf[inc] = sym;
      e8:	a9 2f       	mov	r26, r25
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	a1 5e       	subi	r26, 0xE1	; 225
      ee:	bc 4f       	sbci	r27, 0xFC	; 252
      f0:	8c 93       	st	X, r24
            inc++;
      f2:	9f 5f       	subi	r25, 0xFF	; 255
      f4:	90 93 d0 02 	sts	0x02D0, r25
      f8:	0f c0       	rjmp	.+30     	; 0x118 <PARS_Parser+0x90>
        }
        else{
           if (!flag){
      fa:	80 91 d1 02 	lds	r24, 0x02D1
      fe:	88 23       	and	r24, r24
     100:	59 f4       	brne	.+22     	; 0x118 <PARS_Parser+0x90>
              buf[inc] = 0;
     102:	a9 2f       	mov	r26, r25
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	a1 5e       	subi	r26, 0xE1	; 225
     108:	bc 4f       	sbci	r27, 0xFC	; 252
     10a:	1c 92       	st	X, r1
              inc++;
     10c:	9f 5f       	subi	r25, 0xFF	; 255
     10e:	90 93 d0 02 	sts	0x02D0, r25
              flag = TRUE;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	80 93 d1 02 	sts	0x02D1, r24
           }
        }
     }
     buf[inc] = 0;
     118:	e0 91 d0 02 	lds	r30, 0x02D0
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	e1 5e       	subi	r30, 0xE1	; 225
     120:	fc 4f       	sbci	r31, 0xFC	; 252
     122:	10 82       	st	Z, r1
     return;
     124:	08 95       	ret
   }
   else{
      buf[inc] = 0;
     126:	e9 2f       	mov	r30, r25
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	e1 5e       	subi	r30, 0xE1	; 225
     12c:	fc 4f       	sbci	r31, 0xFC	; 252
     12e:	10 82       	st	Z, r1

      if (argc){
     130:	80 91 1e 03 	lds	r24, 0x031E
     134:	88 23       	and	r24, r24
     136:	19 f0       	breq	.+6      	; 0x13e <PARS_Parser+0xb6>
         PARS_Handler(argc, argv);
     138:	6a e1       	ldi	r22, 0x1A	; 26
     13a:	73 e0       	ldi	r23, 0x03	; 3
     13c:	37 d0       	rcall	.+110    	; 0x1ac <PARS_Handler>
      }
      else{
         //сюда можно что-то добавить
      }
      
      argc = 0;
     13e:	10 92 1e 03 	sts	0x031E, r1
      flag = FALSE;
     142:	10 92 d1 02 	sts	0x02D1, r1
      inc = 0;
     146:	10 92 d0 02 	sts	0x02D0, r1
     14a:	08 95       	ret

0000014c <PARS_StrToUint>:

uint16_t PARS_StrToUint(char *s)
{
   uint16_t value = 0;
  
   while(*s == '0'){
     14c:	e8 2f       	mov	r30, r24
     14e:	f9 2f       	mov	r31, r25
     150:	3e 2f       	mov	r19, r30
     152:	2f 2f       	mov	r18, r31
     154:	81 91       	ld	r24, Z+
     156:	80 33       	cpi	r24, 0x30	; 48
     158:	d9 f3       	breq	.-10     	; 0x150 <PARS_StrToUint+0x4>
     15a:	c9 01       	movw	r24, r18
     15c:	e9 2f       	mov	r30, r25
     15e:	f8 2f       	mov	r31, r24
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	11 c0       	rjmp	.+34     	; 0x188 <PARS_StrToUint+0x3c>
     s++;
   }
   
   while(*s){ 
      value += (*s - 0x30);
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	c0 97       	sbiw	r24, 0x30	; 48
     16a:	28 0f       	add	r18, r24
     16c:	39 1f       	adc	r19, r25
      s++;
      if (*s){
     16e:	80 81       	ld	r24, Z
     170:	88 23       	and	r24, r24
     172:	51 f0       	breq	.+20     	; 0x188 <PARS_StrToUint+0x3c>
         value *= 10;  
     174:	c9 01       	movw	r24, r18
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	43 e0       	ldi	r20, 0x03	; 3
     17c:	22 0f       	add	r18, r18
     17e:	33 1f       	adc	r19, r19
     180:	4a 95       	dec	r20
     182:	e1 f7       	brne	.-8      	; 0x17c <PARS_StrToUint+0x30>
     184:	28 0f       	add	r18, r24
     186:	39 1f       	adc	r19, r25
  
   while(*s == '0'){
     s++;
   }
   
   while(*s){ 
     188:	81 91       	ld	r24, Z+
     18a:	88 23       	and	r24, r24
     18c:	61 f7       	brne	.-40     	; 0x166 <PARS_StrToUint+0x1a>
         value *= 10;  
      }
   };
  
  return value;
     18e:	c9 01       	movw	r24, r18
     190:	08 95       	ret

00000192 <seconds>:
	0b00000
};

uint32_t seconds() {
  uint32_t m;
  cli();
     192:	f8 94       	cli
  m = seconds_timer2;
     194:	20 91 d2 02 	lds	r18, 0x02D2
     198:	30 91 d3 02 	lds	r19, 0x02D3
     19c:	40 91 d4 02 	lds	r20, 0x02D4
     1a0:	50 91 d5 02 	lds	r21, 0x02D5
  sei();
     1a4:	78 94       	sei
  return m;
}
     1a6:	b9 01       	movw	r22, r18
     1a8:	ca 01       	movw	r24, r20
     1aa:	08 95       	ret

000001ac <PARS_Handler>:


void PARS_Handler(uint8_t argc, char *argv[])
{
     1ac:	1f 93       	push	r17
   int_buffer = PARS_StrToUint(argv[0]);
     1ae:	fb 01       	movw	r30, r22
     1b0:	80 81       	ld	r24, Z
     1b2:	91 81       	ldd	r25, Z+1	; 0x01
     1b4:	cb df       	rcall	.-106    	; 0x14c <PARS_StrToUint>
     1b6:	90 93 f0 02 	sts	0x02F0, r25
     1ba:	80 93 ef 02 	sts	0x02EF, r24
   if(dialog_id == VOLTAGE_DIALOG){
     1be:	10 91 ee 02 	lds	r17, 0x02EE
     1c2:	11 30       	cpi	r17, 0x01	; 1
     1c4:	a9 f4       	brne	.+42     	; 0x1f0 <PARS_Handler+0x44>
	   
	   if (int_buffer <= VOLTAGE_MAX && int_buffer >= VOLTAGE_MIN && int_buffer%VOLTAGE_STEP == 0)
     1c6:	9c 01       	movw	r18, r24
     1c8:	24 5c       	subi	r18, 0xC4	; 196
     1ca:	39 40       	sbci	r19, 0x09	; 9
     1cc:	f3 e0       	ldi	r31, 0x03	; 3
     1ce:	29 3e       	cpi	r18, 0xE9	; 233
     1d0:	3f 07       	cpc	r19, r31
     1d2:	58 f4       	brcc	.+22     	; 0x1ea <PARS_Handler+0x3e>
     1d4:	64 e6       	ldi	r22, 0x64	; 100
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	b9 d7       	rcall	.+3954   	; 0x114c <__udivmodhi4>
     1da:	00 97       	sbiw	r24, 0x00	; 0
     1dc:	31 f4       	brne	.+12     	; 0x1ea <PARS_Handler+0x3e>
	   {
		   USART_SendStr("OK\r\n");
     1de:	80 e6       	ldi	r24, 0x60	; 96
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	08 d7       	rcall	.+3600   	; 0xff4 <USART_SendStr>
		   value_parsed_success = true;
     1e4:	10 93 f1 02 	sts	0x02F1, r17
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <PARS_Handler+0x44>
	   }else{
		   USART_SendStr("Invalid value\r\n");
     1ea:	85 e6       	ldi	r24, 0x65	; 101
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	02 d7       	rcall	.+3588   	; 0xff4 <USART_SendStr>
	   }
   }
   if(dialog_id == AMPERAGE_DIALOG){
     1f0:	80 91 ee 02 	lds	r24, 0x02EE
     1f4:	82 30       	cpi	r24, 0x02	; 2
     1f6:	d1 f4       	brne	.+52     	; 0x22c <PARS_Handler+0x80>
	   if (int_buffer <= AMPERAGE_MAX && int_buffer >= AMPERAGE_MIN && int_buffer%AMPERAGE_STEP == 0)
     1f8:	80 91 ef 02 	lds	r24, 0x02EF
     1fc:	90 91 f0 02 	lds	r25, 0x02F0
     200:	9c 01       	movw	r18, r24
     202:	24 56       	subi	r18, 0x64	; 100
     204:	30 40       	sbci	r19, 0x00	; 0
     206:	47 e0       	ldi	r20, 0x07	; 7
     208:	2d 36       	cpi	r18, 0x6D	; 109
     20a:	34 07       	cpc	r19, r20
     20c:	60 f4       	brcc	.+24     	; 0x226 <PARS_Handler+0x7a>
     20e:	64 e6       	ldi	r22, 0x64	; 100
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	9c d7       	rcall	.+3896   	; 0x114c <__udivmodhi4>
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	39 f4       	brne	.+14     	; 0x226 <PARS_Handler+0x7a>
	   {
		   USART_SendStr("OK\r\n");
     218:	80 e6       	ldi	r24, 0x60	; 96
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	eb d6       	rcall	.+3542   	; 0xff4 <USART_SendStr>
		   value_parsed_success = true;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 f1 02 	sts	0x02F1, r24
     224:	03 c0       	rjmp	.+6      	; 0x22c <PARS_Handler+0x80>
	   }else{
		   USART_SendStr("Invalid value\r\n");
     226:	85 e6       	ldi	r24, 0x65	; 101
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	e4 d6       	rcall	.+3528   	; 0xff4 <USART_SendStr>
	   }
   }
}
     22c:	1f 91       	pop	r17
     22e:	08 95       	ret

00000230 <t2_init>:

void t2_init(){
   TIMSK &= ~(1 << OCIE2)|(1 << TOIE2);
     230:	89 b7       	in	r24, 0x39	; 57
     232:	8f 77       	andi	r24, 0x7F	; 127
     234:	89 bf       	out	0x39, r24	; 57
   ASSR |= (1 << AS2);
     236:	82 b5       	in	r24, 0x22	; 34
     238:	88 60       	ori	r24, 0x08	; 8
     23a:	82 bd       	out	0x22, r24	; 34
   TCNT2 = 0;
     23c:	14 bc       	out	0x24, r1	; 36
   TCCR2 |= (1 << CS22)|(1 << CS20);
     23e:	85 b5       	in	r24, 0x25	; 37
     240:	85 60       	ori	r24, 0x05	; 5
     242:	85 bd       	out	0x25, r24	; 37
}
     244:	08 95       	ret

00000246 <read_adc>:


unsigned int read_adc(unsigned char adc_input)
{
  ADMUX= adc_input | ADC_VREF_TYPE;
     246:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     248:	8a e1       	ldi	r24, 0x1A	; 26
     24a:	8a 95       	dec	r24
     24c:	f1 f7       	brne	.-4      	; 0x24a <read_adc+0x4>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <read_adc+0xa>
  _delay_us(10);
  ADCSRA|=(1<<ADSC);
     250:	36 9a       	sbi	0x06, 6	; 6
  while ((ADCSRA & (1<<ADIF))==0);
     252:	34 9b       	sbis	0x06, 4	; 6
     254:	fe cf       	rjmp	.-4      	; 0x252 <read_adc+0xc>
  ADCSRA|=(1<<ADIF);
     256:	34 9a       	sbi	0x06, 4	; 6
  return ADCW;
     258:	24 b1       	in	r18, 0x04	; 4
     25a:	35 b1       	in	r19, 0x05	; 5
}
     25c:	c9 01       	movw	r24, r18
     25e:	08 95       	ret

00000260 <printUL>:

/*
  Подзалупные функции для экономии памяти 
*/
void printUL(char i)
{
     260:	1f 93       	push	r17
    LCD_WriteData(0x30+i);
     262:	18 2f       	mov	r17, r24
     264:	10 5d       	subi	r17, 0xD0	; 208
     266:	81 2f       	mov	r24, r17
     268:	c6 d5       	rcall	.+2956   	; 0xdf6 <LCD_WriteData>
    USART_PutChar(0x30+i);
     26a:	81 2f       	mov	r24, r17
     26c:	9d d6       	rcall	.+3386   	; 0xfa8 <USART_PutChar>
}
     26e:	1f 91       	pop	r17
     270:	08 95       	ret

00000272 <printUARTLCD>:
void printUARTLCD(char i, bool uart)
{
     272:	1f 93       	push	r17
     274:	df 93       	push	r29
     276:	cf 93       	push	r28
     278:	0f 92       	push	r0
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteData(0x30+i);
     27e:	18 2f       	mov	r17, r24
     280:	10 5d       	subi	r17, 0xD0	; 208
     282:	81 2f       	mov	r24, r17
     284:	69 83       	std	Y+1, r22	; 0x01
     286:	b7 d5       	rcall	.+2926   	; 0xdf6 <LCD_WriteData>
	if(uart){
     288:	69 81       	ldd	r22, Y+1	; 0x01
     28a:	66 23       	and	r22, r22
     28c:	11 f0       	breq	.+4      	; 0x292 <printUARTLCD+0x20>
		USART_PutChar(0x30+i);
     28e:	81 2f       	mov	r24, r17
     290:	8b d6       	rcall	.+3350   	; 0xfa8 <USART_PutChar>
	}
}
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	1f 91       	pop	r17
     29a:	08 95       	ret

0000029c <printITime>:
void printITime(char a, char b)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	16 2f       	mov	r17, r22
    LCD_WriteData(0x30+a);
     2a2:	08 2f       	mov	r16, r24
     2a4:	00 5d       	subi	r16, 0xD0	; 208
     2a6:	80 2f       	mov	r24, r16
     2a8:	a6 d5       	rcall	.+2892   	; 0xdf6 <LCD_WriteData>
	LCD_WriteData(0x30+b);
     2aa:	10 5d       	subi	r17, 0xD0	; 208
     2ac:	81 2f       	mov	r24, r17
     2ae:	a3 d5       	rcall	.+2886   	; 0xdf6 <LCD_WriteData>
    USART_PutChar(0x30+a);
     2b0:	80 2f       	mov	r24, r16
     2b2:	7a d6       	rcall	.+3316   	; 0xfa8 <USART_PutChar>
    USART_PutChar(0x30+b);
     2b4:	81 2f       	mov	r24, r17
     2b6:	78 d6       	rcall	.+3312   	; 0xfa8 <USART_PutChar>
}
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <printVoltage>:
   USART_PutChar('.');
   printUL((val%1000)/100);
   printUL((val%100)/10);
}*/
void printVoltage(unsigned long val)
{
     2be:	af 92       	push	r10
     2c0:	bf 92       	push	r11
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	5b 01       	movw	r10, r22
     2d0:	6c 01       	movw	r12, r24
	printUL((val%10000)/1000);
     2d2:	20 e1       	ldi	r18, 0x10	; 16
     2d4:	37 e2       	ldi	r19, 0x27	; 39
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	4c d7       	rcall	.+3736   	; 0x1174 <__udivmodsi4>
     2dc:	38 ee       	ldi	r19, 0xE8	; 232
     2de:	e3 2e       	mov	r14, r19
     2e0:	33 e0       	ldi	r19, 0x03	; 3
     2e2:	f3 2e       	mov	r15, r19
     2e4:	01 2d       	mov	r16, r1
     2e6:	11 2d       	mov	r17, r1
     2e8:	a8 01       	movw	r20, r16
     2ea:	97 01       	movw	r18, r14
     2ec:	43 d7       	rcall	.+3718   	; 0x1174 <__udivmodsi4>
     2ee:	82 2f       	mov	r24, r18
     2f0:	b7 df       	rcall	.-146    	; 0x260 <printUL>
	LCD_WriteData('.');
     2f2:	8e e2       	ldi	r24, 0x2E	; 46
     2f4:	80 d5       	rcall	.+2816   	; 0xdf6 <LCD_WriteData>
	USART_PutChar('.');
     2f6:	8e e2       	ldi	r24, 0x2E	; 46
     2f8:	57 d6       	rcall	.+3246   	; 0xfa8 <USART_PutChar>
	printUL((val%1000)/100);
     2fa:	c6 01       	movw	r24, r12
     2fc:	b5 01       	movw	r22, r10
     2fe:	a8 01       	movw	r20, r16
     300:	97 01       	movw	r18, r14
     302:	38 d7       	rcall	.+3696   	; 0x1174 <__udivmodsi4>
     304:	24 e6       	ldi	r18, 0x64	; 100
     306:	e2 2e       	mov	r14, r18
     308:	f1 2c       	mov	r15, r1
     30a:	01 2d       	mov	r16, r1
     30c:	11 2d       	mov	r17, r1
     30e:	a8 01       	movw	r20, r16
     310:	97 01       	movw	r18, r14
     312:	30 d7       	rcall	.+3680   	; 0x1174 <__udivmodsi4>
     314:	82 2f       	mov	r24, r18
     316:	a4 df       	rcall	.-184    	; 0x260 <printUL>
	printUL((val%100)/10);
     318:	c6 01       	movw	r24, r12
     31a:	b5 01       	movw	r22, r10
     31c:	a8 01       	movw	r20, r16
     31e:	97 01       	movw	r18, r14
     320:	29 d7       	rcall	.+3666   	; 0x1174 <__udivmodsi4>
     322:	2a e0       	ldi	r18, 0x0A	; 10
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	24 d7       	rcall	.+3656   	; 0x1174 <__udivmodsi4>
     32c:	82 2f       	mov	r24, r18
     32e:	98 df       	rcall	.-208    	; 0x260 <printUL>
}
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	bf 90       	pop	r11
     33e:	af 90       	pop	r10
     340:	08 95       	ret

00000342 <checkBattery>:
/* Конец долбоебизма */

void checkBattery()
{
   if(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(NO_BATTERY_VALUE)){
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	80 df       	rcall	.-256    	; 0x246 <read_adc>
     346:	86 31       	cpi	r24, 0x16	; 22
     348:	91 05       	cpc	r25, r1
     34a:	b8 f4       	brcc	.+46     	; 0x37a <checkBattery+0x38>
     LCD_Goto(0,0);
     34c:	80 e8       	ldi	r24, 0x80	; 128
     34e:	4c d5       	rcall	.+2712   	; 0xde8 <LCD_WriteCom>
     LCD_SendStr("Please connect");
     350:	85 e7       	ldi	r24, 0x75	; 117
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	89 d5       	rcall	.+2834   	; 0xe68 <LCD_SendStr>
	 LCD_Goto(0,1);
     356:	80 ec       	ldi	r24, 0xC0	; 192
     358:	47 d5       	rcall	.+2702   	; 0xde8 <LCD_WriteCom>
	 LCD_SendStr("the battery ");
     35a:	84 e8       	ldi	r24, 0x84	; 132
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	84 d5       	rcall	.+2824   	; 0xe68 <LCD_SendStr>
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(NO_BATTERY_VALUE)){}
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	71 df       	rcall	.-286    	; 0x246 <read_adc>
     364:	86 31       	cpi	r24, 0x16	; 22
     366:	91 05       	cpc	r25, r1
     368:	d8 f3       	brcs	.-10     	; 0x360 <checkBattery+0x1e>
     LCD_Clear();
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	3d d5       	rcall	.+2682   	; 0xde8 <LCD_WriteCom>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36e:	8f e9       	ldi	r24, 0x9F	; 159
     370:	9f e0       	ldi	r25, 0x0F	; 15
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <checkBattery+0x30>
     376:	00 c0       	rjmp	.+0      	; 0x378 <checkBattery+0x36>
     378:	00 00       	nop
     37a:	08 95       	ret

0000037c <Reset_Button>:
   }
}

void Reset_Button(){
	while(BUT_GetKey() != 1){
     37c:	04 c0       	rjmp	.+8      	; 0x386 <Reset_Button+0xa>
		if(USART_GetChar()) break;
     37e:	7d d6       	rcall	.+3322   	; 0x107a <USART_GetChar>
     380:	88 23       	and	r24, r24
     382:	21 f4       	brne	.+8      	; 0x38c <Reset_Button+0x10>
		BUT_Debrief();
     384:	ac d5       	rcall	.+2904   	; 0xede <BUT_Debrief>
     LCD_Clear();
   }
}

void Reset_Button(){
	while(BUT_GetKey() != 1){
     386:	d4 d5       	rcall	.+2984   	; 0xf30 <BUT_GetKey>
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	c9 f7       	brne	.-14     	; 0x37e <Reset_Button+0x2>
     38c:	08 95       	ret

0000038e <checkTempPotection>:
		BUT_Debrief();
	}
}

void checkTempPotection(){
	if(read_adc(5) >= BATTERY_CRITICAL_TEMP_VALUE){
     38e:	85 e0       	ldi	r24, 0x05	; 5
     390:	5a df       	rcall	.-332    	; 0x246 <read_adc>
     392:	23 e0       	ldi	r18, 0x03	; 3
     394:	83 35       	cpi	r24, 0x53	; 83
     396:	92 07       	cpc	r25, r18
     398:	50 f1       	brcs	.+84     	; 0x3ee <checkTempPotection+0x60>
		 LCD_Clear();
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	25 d5       	rcall	.+2634   	; 0xde8 <LCD_WriteCom>
     39e:	8f e9       	ldi	r24, 0x9F	; 159
     3a0:	9f e0       	ldi	r25, 0x0F	; 15
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <checkTempPotection+0x14>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <checkTempPotection+0x1a>
     3a8:	00 00       	nop
		 LCD_Goto(0,0);
     3aa:	80 e8       	ldi	r24, 0x80	; 128
     3ac:	1d d5       	rcall	.+2618   	; 0xde8 <LCD_WriteCom>
		 LCD_SendStr("High temperature");
     3ae:	81 e9       	ldi	r24, 0x91	; 145
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	5a d5       	rcall	.+2740   	; 0xe68 <LCD_SendStr>
		 LCD_Goto(1,1);
     3b4:	81 ec       	ldi	r24, 0xC1	; 193
     3b6:	18 d5       	rcall	.+2608   	; 0xde8 <LCD_WriteCom>
		 LCD_SendStr("Enter - reboot");
     3b8:	82 ea       	ldi	r24, 0xA2	; 162
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	55 d5       	rcall	.+2730   	; 0xe68 <LCD_SendStr>
		 USART_SendStr("Critical temperarure!!! Test Stopped\r\n");
     3be:	81 eb       	ldi	r24, 0xB1	; 177
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	18 d6       	rcall	.+3120   	; 0xff4 <USART_SendStr>
	     cli();
     3c4:	f8 94       	cli
	     OCR1A = 0;
     3c6:	1b bc       	out	0x2b, r1	; 43
     3c8:	1a bc       	out	0x2a, r1	; 42
         PORTB &= ~(1 << PB5);
     3ca:	c5 98       	cbi	0x18, 5	; 24
         TCCR1B &= ~(1 << CS11);	
     3cc:	8e b5       	in	r24, 0x2e	; 46
     3ce:	8d 7f       	andi	r24, 0xFD	; 253
     3d0:	8e bd       	out	0x2e, r24	; 46
         Reset_Button();
     3d2:	d4 df       	rcall	.-88     	; 0x37c <Reset_Button>
         USART_SendStr("Rebooting\r\n");
     3d4:	88 ed       	ldi	r24, 0xD8	; 216
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0d d6       	rcall	.+3098   	; 0xff4 <USART_SendStr>
         soft_reset();
     3da:	28 e0       	ldi	r18, 0x08	; 8
     3dc:	88 e1       	ldi	r24, 0x18	; 24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	a8 95       	wdr
     3e6:	81 bd       	out	0x21, r24	; 33
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	21 bd       	out	0x21, r18	; 33
     3ec:	ff cf       	rjmp	.-2      	; 0x3ec <checkTempPotection+0x5e>
     3ee:	08 95       	ret

000003f0 <printCapacity>:
    }
}

void printCapacity(unsigned long Capacity, bool mode, bool uart){
     3f0:	4f 92       	push	r4
     3f2:	5f 92       	push	r5
     3f4:	6f 92       	push	r6
     3f6:	7f 92       	push	r7
     3f8:	8f 92       	push	r8
     3fa:	9f 92       	push	r9
     3fc:	af 92       	push	r10
     3fe:	bf 92       	push	r11
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	6b 01       	movw	r12, r22
     40e:	7c 01       	movw	r14, r24
     410:	04 2f       	mov	r16, r20
     412:	12 2f       	mov	r17, r18
	if(mode){
     414:	44 23       	and	r20, r20
     416:	39 f0       	breq	.+14     	; 0x426 <printCapacity+0x36>
		LCD_Goto(4,1);
     418:	84 ec       	ldi	r24, 0xC4	; 196
     41a:	e6 d4       	rcall	.+2508   	; 0xde8 <LCD_WriteCom>
		if(uart){
     41c:	11 23       	and	r17, r17
     41e:	19 f0       	breq	.+6      	; 0x426 <printCapacity+0x36>
			USART_SendStr("Capacity: ");
     420:	84 ee       	ldi	r24, 0xE4	; 228
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	e7 d5       	rcall	.+3022   	; 0xff4 <USART_SendStr>
		}
	}
	
	//Десятки тыс
	printUARTLCD(Capacity/10000, uart);
     426:	c7 01       	movw	r24, r14
     428:	b6 01       	movw	r22, r12
     42a:	20 e1       	ldi	r18, 0x10	; 16
     42c:	37 e2       	ldi	r19, 0x27	; 39
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	a0 d6       	rcall	.+3392   	; 0x1174 <__udivmodsi4>
     434:	2b 01       	movw	r4, r22
     436:	3c 01       	movw	r6, r24
     438:	82 2f       	mov	r24, r18
     43a:	61 2f       	mov	r22, r17
     43c:	1a df       	rcall	.-460    	; 0x272 <printUARTLCD>
	//Тысячи
	printUARTLCD((Capacity%10000)/1000, uart);
     43e:	68 ee       	ldi	r22, 0xE8	; 232
     440:	86 2e       	mov	r8, r22
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	96 2e       	mov	r9, r22
     446:	a1 2c       	mov	r10, r1
     448:	b1 2c       	mov	r11, r1
     44a:	c3 01       	movw	r24, r6
     44c:	b2 01       	movw	r22, r4
     44e:	a5 01       	movw	r20, r10
     450:	94 01       	movw	r18, r8
     452:	90 d6       	rcall	.+3360   	; 0x1174 <__udivmodsi4>
     454:	82 2f       	mov	r24, r18
     456:	61 2f       	mov	r22, r17
     458:	0c df       	rcall	.-488    	; 0x272 <printUARTLCD>
	//Сотни
	printUARTLCD((Capacity%1000)/100, uart);
     45a:	c7 01       	movw	r24, r14
     45c:	b6 01       	movw	r22, r12
     45e:	a5 01       	movw	r20, r10
     460:	94 01       	movw	r18, r8
     462:	88 d6       	rcall	.+3344   	; 0x1174 <__udivmodsi4>
     464:	54 e6       	ldi	r21, 0x64	; 100
     466:	85 2e       	mov	r8, r21
     468:	91 2c       	mov	r9, r1
     46a:	a1 2c       	mov	r10, r1
     46c:	b1 2c       	mov	r11, r1
     46e:	a5 01       	movw	r20, r10
     470:	94 01       	movw	r18, r8
     472:	80 d6       	rcall	.+3328   	; 0x1174 <__udivmodsi4>
     474:	82 2f       	mov	r24, r18
     476:	61 2f       	mov	r22, r17
     478:	fc de       	rcall	.-520    	; 0x272 <printUARTLCD>
	//Десятки
	printUARTLCD((Capacity%100)/10, uart);
     47a:	c7 01       	movw	r24, r14
     47c:	b6 01       	movw	r22, r12
     47e:	a5 01       	movw	r20, r10
     480:	94 01       	movw	r18, r8
     482:	78 d6       	rcall	.+3312   	; 0x1174 <__udivmodsi4>
     484:	4a e0       	ldi	r20, 0x0A	; 10
     486:	84 2e       	mov	r8, r20
     488:	91 2c       	mov	r9, r1
     48a:	a1 2c       	mov	r10, r1
     48c:	b1 2c       	mov	r11, r1
     48e:	a5 01       	movw	r20, r10
     490:	94 01       	movw	r18, r8
     492:	70 d6       	rcall	.+3296   	; 0x1174 <__udivmodsi4>
     494:	82 2f       	mov	r24, r18
     496:	61 2f       	mov	r22, r17
     498:	ec de       	rcall	.-552    	; 0x272 <printUARTLCD>
	printUARTLCD((Capacity%10), uart);
     49a:	c7 01       	movw	r24, r14
     49c:	b6 01       	movw	r22, r12
     49e:	a5 01       	movw	r20, r10
     4a0:	94 01       	movw	r18, r8
     4a2:	68 d6       	rcall	.+3280   	; 0x1174 <__udivmodsi4>
     4a4:	86 2f       	mov	r24, r22
     4a6:	61 2f       	mov	r22, r17
     4a8:	e4 de       	rcall	.-568    	; 0x272 <printUARTLCD>
	
	if(mode){
     4aa:	00 23       	and	r16, r16
     4ac:	41 f0       	breq	.+16     	; 0x4be <__stack+0x5f>
		if(uart){
     4ae:	11 23       	and	r17, r17
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <__stack+0x59>
			USART_SendStr(" mAh\r\n");
     4b2:	8f ee       	ldi	r24, 0xEF	; 239
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	9e d5       	rcall	.+2876   	; 0xff4 <USART_SendStr>
		}
		LCD_SendStr("mAh");
     4b8:	86 ef       	ldi	r24, 0xF6	; 246
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	d5 d4       	rcall	.+2474   	; 0xe68 <LCD_SendStr>
	}
	
}
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	7f 90       	pop	r7
     4d4:	6f 90       	pop	r6
     4d6:	5f 90       	pop	r5
     4d8:	4f 90       	pop	r4
     4da:	08 95       	ret

000004dc <Charge_battery>:

void Charge_battery(bool end)
{
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	1f 93       	push	r17
     4e6:	18 2f       	mov	r17, r24
     
     PORTC |= (1 << PC2);
     4e8:	aa 9a       	sbi	0x15, 2	; 21
	 LCD_Goto(4,0);
     4ea:	84 e8       	ldi	r24, 0x84	; 132
     4ec:	7d d4       	rcall	.+2298   	; 0xde8 <LCD_WriteCom>
	 USART_SendStr("Charging\r\n");
     4ee:	8a ef       	ldi	r24, 0xFA	; 250
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	80 d5       	rcall	.+2816   	; 0xff4 <USART_SendStr>
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_TRIGGER_VALUE) && !(PINC & (1 << PC3))){
	  LCD_Goto(4,0);
	  LCD_SendStr("Charging");
	  if(end){
	   printCapacity(Capacity/3600, true, false);
     4f4:	70 e1       	ldi	r23, 0x10	; 16
     4f6:	c7 2e       	mov	r12, r23
     4f8:	7e e0       	ldi	r23, 0x0E	; 14
     4fa:	d7 2e       	mov	r13, r23
     4fc:	e1 2c       	mov	r14, r1
     4fe:	f1 2c       	mov	r15, r1
{
     
     PORTC |= (1 << PC2);
	 LCD_Goto(4,0);
	 USART_SendStr("Charging\r\n");
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_TRIGGER_VALUE) && !(PINC & (1 << PC3))){
     500:	19 c0       	rjmp	.+50     	; 0x534 <Charge_battery+0x58>
	  LCD_Goto(4,0);
     502:	84 e8       	ldi	r24, 0x84	; 132
     504:	71 d4       	rcall	.+2274   	; 0xde8 <LCD_WriteCom>
	  LCD_SendStr("Charging");
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	ae d4       	rcall	.+2396   	; 0xe68 <LCD_SendStr>
	  if(end){
     50c:	11 23       	and	r17, r17
     50e:	81 f0       	breq	.+32     	; 0x530 <Charge_battery+0x54>
	   printCapacity(Capacity/3600, true, false);
     510:	60 91 e0 02 	lds	r22, 0x02E0
     514:	70 91 e1 02 	lds	r23, 0x02E1
     518:	80 91 e2 02 	lds	r24, 0x02E2
     51c:	90 91 e3 02 	lds	r25, 0x02E3
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	27 d6       	rcall	.+3150   	; 0x1174 <__udivmodsi4>
     526:	ca 01       	movw	r24, r20
     528:	b9 01       	movw	r22, r18
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	60 df       	rcall	.-320    	; 0x3f0 <printCapacity>
	  }
	  checkBattery();
     530:	08 df       	rcall	.-496    	; 0x342 <checkBattery>
	  checkTempPotection();
     532:	2d df       	rcall	.-422    	; 0x38e <checkTempPotection>
{
     
     PORTC |= (1 << PC2);
	 LCD_Goto(4,0);
	 USART_SendStr("Charging\r\n");
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_TRIGGER_VALUE) && !(PINC & (1 << PC3))){
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	87 de       	rcall	.-754    	; 0x246 <read_adc>
     538:	23 e0       	ldi	r18, 0x03	; 3
     53a:	83 38       	cpi	r24, 0x83	; 131
     53c:	92 07       	cpc	r25, r18
     53e:	10 f4       	brcc	.+4      	; 0x544 <Charge_battery+0x68>
     540:	9b 9b       	sbis	0x13, 3	; 19
     542:	df cf       	rjmp	.-66     	; 0x502 <Charge_battery+0x26>
	   printCapacity(Capacity/3600, true, false);
	  }
	  checkBattery();
	  checkTempPotection();
	 }
     PORTC &= ~(1 << PC2);
     544:	aa 98       	cbi	0x15, 2	; 21
	 if(end){
     546:	11 23       	and	r17, r17
     548:	41 f1       	breq	.+80     	; 0x59a <Charge_battery+0xbe>
         LCD_Goto(0,0);
     54a:	80 e8       	ldi	r24, 0x80	; 128
     54c:	4d d4       	rcall	.+2202   	; 0xde8 <LCD_WriteCom>
	     LCD_SendStr("Full charged! :)");
     54e:	8e e0       	ldi	r24, 0x0E	; 14
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	8a d4       	rcall	.+2324   	; 0xe68 <LCD_SendStr>
	     USART_SendStr("Full charged! :)\r\n");
     554:	8f e1       	ldi	r24, 0x1F	; 31
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	4d d5       	rcall	.+2714   	; 0xff4 <USART_SendStr>
		 printCapacity(Capacity/3600, true, false);
     55a:	60 91 e0 02 	lds	r22, 0x02E0
     55e:	70 91 e1 02 	lds	r23, 0x02E1
     562:	80 91 e2 02 	lds	r24, 0x02E2
     566:	90 91 e3 02 	lds	r25, 0x02E3
     56a:	20 e1       	ldi	r18, 0x10	; 16
     56c:	3e e0       	ldi	r19, 0x0E	; 14
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	00 d6       	rcall	.+3072   	; 0x1174 <__udivmodsi4>
     574:	ca 01       	movw	r24, r20
     576:	b9 01       	movw	r22, r18
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	39 df       	rcall	.-398    	; 0x3f0 <printCapacity>
         Reset_Button();
     57e:	fe de       	rcall	.-516    	; 0x37c <Reset_Button>
		 USART_SendStr("Rebooting\r\n");
     580:	88 ed       	ldi	r24, 0xD8	; 216
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	37 d5       	rcall	.+2670   	; 0xff4 <USART_SendStr>
         soft_reset();
     586:	28 e0       	ldi	r18, 0x08	; 8
     588:	88 e1       	ldi	r24, 0x18	; 24
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	a8 95       	wdr
     592:	81 bd       	out	0x21, r24	; 33
     594:	0f be       	out	0x3f, r0	; 63
     596:	21 bd       	out	0x21, r18	; 33
     598:	ff cf       	rjmp	.-2      	; 0x598 <Charge_battery+0xbc>
	 }
}
     59a:	1f 91       	pop	r17
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	08 95       	ret

000005a6 <checkEndVoltage>:

void checkEndVoltage(){
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
	if (END_Voltage > Voltage) { //выключение нагрузки при достижении минимального напряжения
     5ae:	20 91 cc 02 	lds	r18, 0x02CC
     5b2:	30 91 cd 02 	lds	r19, 0x02CD
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	80 91 e8 02 	lds	r24, 0x02E8
     5be:	90 91 e9 02 	lds	r25, 0x02E9
     5c2:	a0 91 ea 02 	lds	r26, 0x02EA
     5c6:	b0 91 eb 02 	lds	r27, 0x02EB
     5ca:	82 17       	cp	r24, r18
     5cc:	93 07       	cpc	r25, r19
     5ce:	a4 07       	cpc	r26, r20
     5d0:	b5 07       	cpc	r27, r21
     5d2:	08 f0       	brcs	.+2      	; 0x5d6 <checkEndVoltage+0x30>
     5d4:	6a c0       	rjmp	.+212    	; 0x6aa <checkEndVoltage+0x104>
		USART_SendStr("Low voltage: ");
     5d6:	82 e3       	ldi	r24, 0x32	; 50
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0c d5       	rcall	.+2584   	; 0xff4 <USART_SendStr>
		printVoltage(Voltage);
     5dc:	60 91 e8 02 	lds	r22, 0x02E8
     5e0:	70 91 e9 02 	lds	r23, 0x02E9
     5e4:	80 91 ea 02 	lds	r24, 0x02EA
     5e8:	90 91 eb 02 	lds	r25, 0x02EB
     5ec:	68 de       	rcall	.-816    	; 0x2be <printVoltage>
		USART_SendStr("V\r\n");
     5ee:	80 e4       	ldi	r24, 0x40	; 64
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	00 d5       	rcall	.+2560   	; 0xff4 <USART_SendStr>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	93 ed       	ldi	r25, 0xD3	; 211
     5f8:	a0 e3       	ldi	r26, 0x30	; 48
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	a0 40       	sbci	r26, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <checkEndVoltage+0x54>
     602:	00 c0       	rjmp	.+0      	; 0x604 <checkEndVoltage+0x5e>
     604:	00 00       	nop
		_delay_ms(2000);
		cli();
     606:	f8 94       	cli
		OCR1A = 0;
     608:	1b bc       	out	0x2b, r1	; 43
     60a:	1a bc       	out	0x2a, r1	; 42
		PORTB &= ~(1 << PB5);
     60c:	c5 98       	cbi	0x18, 5	; 24
		TIMSK &= ~(1 << OCIE2)|(1 << TOIE2);
     60e:	89 b7       	in	r24, 0x39	; 57
     610:	8f 77       	andi	r24, 0x7F	; 127
     612:	89 bf       	out	0x39, r24	; 57

		LCD_Clear();
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	e8 d3       	rcall	.+2000   	; 0xde8 <LCD_WriteCom>
     618:	af e9       	ldi	r26, 0x9F	; 159
     61a:	bf e0       	ldi	r27, 0x0F	; 15
     61c:	11 97       	sbiw	r26, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <checkEndVoltage+0x76>
     620:	00 c0       	rjmp	.+0      	; 0x622 <checkEndVoltage+0x7c>
     622:	00 00       	nop
		LCD_Goto(1,0);
     624:	81 e8       	ldi	r24, 0x81	; 129
     626:	e0 d3       	rcall	.+1984   	; 0xde8 <LCD_WriteCom>
		LCD_SendStr("Test completed");
     628:	84 e4       	ldi	r24, 0x44	; 68
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	1d d4       	rcall	.+2106   	; 0xe68 <LCD_SendStr>
		USART_SendStr("Test completed\r\n");
     62e:	83 e5       	ldi	r24, 0x53	; 83
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	e0 d4       	rcall	.+2496   	; 0xff4 <USART_SendStr>
		
		//Вывод емкости
		printCapacity(Capacity/3600, true, true);
     634:	60 91 e0 02 	lds	r22, 0x02E0
     638:	70 91 e1 02 	lds	r23, 0x02E1
     63c:	80 91 e2 02 	lds	r24, 0x02E2
     640:	90 91 e3 02 	lds	r25, 0x02E3
     644:	e0 e1       	ldi	r30, 0x10	; 16
     646:	ee 2e       	mov	r14, r30
     648:	ee e0       	ldi	r30, 0x0E	; 14
     64a:	fe 2e       	mov	r15, r30
     64c:	01 2d       	mov	r16, r1
     64e:	11 2d       	mov	r17, r1
     650:	a8 01       	movw	r20, r16
     652:	97 01       	movw	r18, r14
     654:	8f d5       	rcall	.+2846   	; 0x1174 <__udivmodsi4>
     656:	ca 01       	movw	r24, r20
     658:	b9 01       	movw	r22, r18
     65a:	41 e0       	ldi	r20, 0x01	; 1
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	c8 de       	rcall	.-624    	; 0x3f0 <printCapacity>

		eeprom_write_dword(&eeLastCapacity, Capacity/3600);
     660:	60 91 e0 02 	lds	r22, 0x02E0
     664:	70 91 e1 02 	lds	r23, 0x02E1
     668:	80 91 e2 02 	lds	r24, 0x02E2
     66c:	90 91 e3 02 	lds	r25, 0x02E3
     670:	a8 01       	movw	r20, r16
     672:	97 01       	movw	r18, r14
     674:	7f d5       	rcall	.+2814   	; 0x1174 <__udivmodsi4>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	ba 01       	movw	r22, r20
     67c:	a9 01       	movw	r20, r18
     67e:	ee d5       	rcall	.+3036   	; 0x125c <__eewr_dword_m8>
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	99 e6       	ldi	r25, 0x69	; 105
     684:	a8 e1       	ldi	r26, 0x18	; 24
     686:	81 50       	subi	r24, 0x01	; 1
     688:	90 40       	sbci	r25, 0x00	; 0
     68a:	a0 40       	sbci	r26, 0x00	; 0
     68c:	e1 f7       	brne	.-8      	; 0x686 <checkEndVoltage+0xe0>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <checkEndVoltage+0xea>
     690:	00 00       	nop

		_delay_ms(1000);

		LCD_Goto(0,0);
     692:	80 e8       	ldi	r24, 0x80	; 128
     694:	a9 d3       	rcall	.+1874   	; 0xde8 <LCD_WriteCom>
		LCD_SendStr("    ");
     696:	84 e6       	ldi	r24, 0x64	; 100
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	e6 d3       	rcall	.+1996   	; 0xe68 <LCD_SendStr>
		LCD_Goto(12,0);
     69c:	8c e8       	ldi	r24, 0x8C	; 140
     69e:	a4 d3       	rcall	.+1864   	; 0xde8 <LCD_WriteCom>
		LCD_SendStr("    ");
     6a0:	84 e6       	ldi	r24, 0x64	; 100
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	e1 d3       	rcall	.+1986   	; 0xe68 <LCD_SendStr>
		Charge_battery(true);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	19 df       	rcall	.-462    	; 0x4dc <Charge_battery>
	}
}
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	08 95       	ret

000006b4 <printVADialig>:

void printVADialig(unsigned long *eeprom, unsigned int step, char *start_text, unsigned int *var, unsigned int position, unsigned int min, unsigned int max, char *uart_text, char *start_value_text, char id){
     6b4:	2f 92       	push	r2
     6b6:	3f 92       	push	r3
     6b8:	4f 92       	push	r4
     6ba:	5f 92       	push	r5
     6bc:	6f 92       	push	r6
     6be:	7f 92       	push	r7
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	df 93       	push	r29
     6d6:	cf 93       	push	r28
     6d8:	00 d0       	rcall	.+0      	; 0x6da <printVADialig+0x26>
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	1b 01       	movw	r2, r22
     6e4:	2a 01       	movw	r4, r20
     6e6:	39 01       	movw	r6, r18
   LCD_Goto(position, 0);
     6e8:	0f 70       	andi	r16, 0x0F	; 15
     6ea:	80 2f       	mov	r24, r16
     6ec:	80 68       	ori	r24, 0x80	; 128
     6ee:	7c d3       	rcall	.+1784   	; 0xde8 <LCD_WriteCom>
   LCD_SendStr(start_text);
     6f0:	c2 01       	movw	r24, r4
     6f2:	ba d3       	rcall	.+1908   	; 0xe68 <LCD_SendStr>
   *var = eeprom_read_dword(eeprom);
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	ac d5       	rcall	.+2904   	; 0x1252 <__eerd_dword_m8>
     6fa:	f3 01       	movw	r30, r6
     6fc:	71 83       	std	Z+1, r23	; 0x01
     6fe:	60 83       	st	Z, r22
   dialog_id = id;
     700:	8f 89       	ldd	r24, Y+23	; 0x17
     702:	80 93 ee 02 	sts	0x02EE, r24
   USART_SendStr(start_text);
     706:	c2 01       	movw	r24, r4
     708:	75 d4       	rcall	.+2282   	; 0xff4 <USART_SendStr>
   USART_SendStr("\r\n");
     70a:	89 e6       	ldi	r24, 0x69	; 105
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	72 d4       	rcall	.+2276   	; 0xff4 <USART_SendStr>
   USART_SendStr(start_value_text);
     710:	c4 01       	movw	r24, r8
     712:	70 d4       	rcall	.+2272   	; 0xff4 <USART_SendStr>
   USART_PutChar(0x30+(*var/1000));
     714:	f3 01       	movw	r30, r6
     716:	80 81       	ld	r24, Z
     718:	91 81       	ldd	r25, Z+1	; 0x01
     71a:	08 ee       	ldi	r16, 0xE8	; 232
     71c:	13 e0       	ldi	r17, 0x03	; 3
     71e:	b8 01       	movw	r22, r16
     720:	15 d5       	rcall	.+2602   	; 0x114c <__udivmodhi4>
     722:	86 2f       	mov	r24, r22
     724:	80 5d       	subi	r24, 0xD0	; 208
     726:	40 d4       	rcall	.+2176   	; 0xfa8 <USART_PutChar>
   USART_PutChar(',');
     728:	8c e2       	ldi	r24, 0x2C	; 44
     72a:	3e d4       	rcall	.+2172   	; 0xfa8 <USART_PutChar>
   USART_PutChar(0x30+((*var%1000)/100));
     72c:	f3 01       	movw	r30, r6
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	b8 01       	movw	r22, r16
     734:	0b d5       	rcall	.+2582   	; 0x114c <__udivmodhi4>
     736:	64 e6       	ldi	r22, 0x64	; 100
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	08 d5       	rcall	.+2576   	; 0x114c <__udivmodhi4>
     73c:	86 2f       	mov	r24, r22
     73e:	80 5d       	subi	r24, 0xD0	; 208
     740:	33 d4       	rcall	.+2150   	; 0xfa8 <USART_PutChar>
   USART_SendStr(uart_text);
     742:	c5 01       	movw	r24, r10
     744:	57 d4       	rcall	.+2222   	; 0xff4 <USART_SendStr>

	 LCD_Goto(5, 1);
     LCD_WriteData(1);
	 LCD_WriteData(0x30+(*var/1000));
	 LCD_WriteData(',');
	 LCD_WriteData(0x30+((*var%1000)/100)); 
     746:	f4 e6       	ldi	r31, 0x64	; 100
     748:	8f 2e       	mov	r8, r31
     74a:	91 2c       	mov	r9, r1
   USART_PutChar(0x30+(*var/1000));
   USART_PutChar(',');
   USART_PutChar(0x30+((*var%1000)/100));
   USART_SendStr(uart_text);
   while(1){
	 i = BUT_GetKey();
     74c:	f1 d3       	rcall	.+2018   	; 0xf30 <BUT_GetKey>
     74e:	80 93 ec 02 	sts	0x02EC, r24
	 
	 if (USART_GetRxCount()){
     752:	90 d4       	rcall	.+2336   	; 0x1074 <USART_GetRxCount>
     754:	88 23       	and	r24, r24
     756:	21 f0       	breq	.+8      	; 0x760 <printVADialig+0xac>
		 one_char_buffer = USART_GetChar();
     758:	90 d4       	rcall	.+2336   	; 0x107a <USART_GetChar>
     75a:	80 93 ed 02 	sts	0x02ED, r24
		 PARS_Parser(one_char_buffer);
     75e:	94 dc       	rcall	.-1752   	; 0x88 <PARS_Parser>
	 }
	 
	 if(i == 3 && *var < max){
     760:	80 91 ec 02 	lds	r24, 0x02EC
     764:	83 30       	cpi	r24, 0x03	; 3
     766:	51 f4       	brne	.+20     	; 0x77c <printVADialig+0xc8>
     768:	f3 01       	movw	r30, r6
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	8c 15       	cp	r24, r12
     770:	9d 05       	cpc	r25, r13
     772:	20 f4       	brcc	.+8      	; 0x77c <printVADialig+0xc8>
       *var += step;
     774:	82 0d       	add	r24, r2
     776:	93 1d       	adc	r25, r3
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	80 83       	st	Z, r24
	 }

     if(i == 4 && *var > min){
     77c:	80 91 ec 02 	lds	r24, 0x02EC
     780:	84 30       	cpi	r24, 0x04	; 4
     782:	51 f4       	brne	.+20     	; 0x798 <printVADialig+0xe4>
     784:	f3 01       	movw	r30, r6
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	e8 16       	cp	r14, r24
     78c:	f9 06       	cpc	r15, r25
     78e:	20 f4       	brcc	.+8      	; 0x798 <printVADialig+0xe4>
       *var -= step;
     790:	82 19       	sub	r24, r2
     792:	93 09       	sbc	r25, r3
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	80 83       	st	Z, r24
	 }
     
	 if(i == 1 || value_parsed_success){
     798:	80 91 ec 02 	lds	r24, 0x02EC
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	21 f0       	breq	.+8      	; 0x7a8 <printVADialig+0xf4>
     7a0:	80 91 f1 02 	lds	r24, 0x02F1
     7a4:	88 23       	and	r24, r24
     7a6:	91 f1       	breq	.+100    	; 0x80c <printVADialig+0x158>
	   if(value_parsed_success){
     7a8:	80 91 f1 02 	lds	r24, 0x02F1
     7ac:	88 23       	and	r24, r24
     7ae:	49 f0       	breq	.+18     	; 0x7c2 <printVADialig+0x10e>
		   *var = int_buffer;
     7b0:	80 91 ef 02 	lds	r24, 0x02EF
     7b4:	90 91 f0 02 	lds	r25, 0x02F0
     7b8:	f3 01       	movw	r30, r6
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24
		   value_parsed_success = false;
     7be:	10 92 f1 02 	sts	0x02F1, r1
	   }
       eeprom_write_dword(eeprom, *var);
     7c2:	f3 01       	movw	r30, r6
     7c4:	40 81       	ld	r20, Z
     7c6:	51 81       	ldd	r21, Z+1	; 0x01
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	45 d5       	rcall	.+2698   	; 0x125c <__eewr_dword_m8>
	   LCD_Clear();
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	09 d3       	rcall	.+1554   	; 0xde8 <LCD_WriteCom>
     7d6:	8f e9       	ldi	r24, 0x9F	; 159
     7d8:	9f e0       	ldi	r25, 0x0F	; 15
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <printVADialig+0x126>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <printVADialig+0x12c>
     7e0:	00 00       	nop
	 LCD_WriteData(0x30+((*var%1000)/100)); 
	 LCD_WriteData(0);
	 BUT_Debrief();
   } 
   
}
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	cf 91       	pop	r28
     7e8:	df 91       	pop	r29
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	bf 90       	pop	r11
     7f8:	af 90       	pop	r10
     7fa:	9f 90       	pop	r9
     7fc:	8f 90       	pop	r8
     7fe:	7f 90       	pop	r7
     800:	6f 90       	pop	r6
     802:	5f 90       	pop	r5
     804:	4f 90       	pop	r4
     806:	3f 90       	pop	r3
     808:	2f 90       	pop	r2
     80a:	08 95       	ret
       eeprom_write_dword(eeprom, *var);
	   LCD_Clear();
	   break;
	 }

	 LCD_Goto(5, 1);
     80c:	85 ec       	ldi	r24, 0xC5	; 197
     80e:	ec d2       	rcall	.+1496   	; 0xde8 <LCD_WriteCom>
     LCD_WriteData(1);
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	f1 d2       	rcall	.+1506   	; 0xdf6 <LCD_WriteData>
	 LCD_WriteData(0x30+(*var/1000));
     814:	f3 01       	movw	r30, r6
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	b8 01       	movw	r22, r16
     81c:	97 d4       	rcall	.+2350   	; 0x114c <__udivmodhi4>
     81e:	86 2f       	mov	r24, r22
     820:	80 5d       	subi	r24, 0xD0	; 208
     822:	e9 d2       	rcall	.+1490   	; 0xdf6 <LCD_WriteData>
	 LCD_WriteData(',');
     824:	8c e2       	ldi	r24, 0x2C	; 44
     826:	e7 d2       	rcall	.+1486   	; 0xdf6 <LCD_WriteData>
	 LCD_WriteData(0x30+((*var%1000)/100)); 
     828:	f3 01       	movw	r30, r6
     82a:	80 81       	ld	r24, Z
     82c:	91 81       	ldd	r25, Z+1	; 0x01
     82e:	b8 01       	movw	r22, r16
     830:	8d d4       	rcall	.+2330   	; 0x114c <__udivmodhi4>
     832:	b4 01       	movw	r22, r8
     834:	8b d4       	rcall	.+2326   	; 0x114c <__udivmodhi4>
     836:	86 2f       	mov	r24, r22
     838:	80 5d       	subi	r24, 0xD0	; 208
     83a:	dd d2       	rcall	.+1466   	; 0xdf6 <LCD_WriteData>
	 LCD_WriteData(0);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	db d2       	rcall	.+1462   	; 0xdf6 <LCD_WriteData>
	 BUT_Debrief();
     840:	4e d3       	rcall	.+1692   	; 0xede <BUT_Debrief>
   } 
     842:	84 cf       	rjmp	.-248    	; 0x74c <printVADialig+0x98>

00000844 <__vector_4>:
   
}

ISR(TIMER2_OVF_vect)
{
     844:	1f 92       	push	r1
     846:	0f 92       	push	r0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	0f 92       	push	r0
     84c:	11 24       	eor	r1, r1
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
	seconds_timer2++;
     856:	80 91 d2 02 	lds	r24, 0x02D2
     85a:	90 91 d3 02 	lds	r25, 0x02D3
     85e:	a0 91 d4 02 	lds	r26, 0x02D4
     862:	b0 91 d5 02 	lds	r27, 0x02D5
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	a1 1d       	adc	r26, r1
     86a:	b1 1d       	adc	r27, r1
     86c:	80 93 d2 02 	sts	0x02D2, r24
     870:	90 93 d3 02 	sts	0x02D3, r25
     874:	a0 93 d4 02 	sts	0x02D4, r26
     878:	b0 93 d5 02 	sts	0x02D5, r27
	interrupt_data = true;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 d6 02 	sts	0x02D6, r24
}
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	0f 90       	pop	r0
     890:	1f 90       	pop	r1
     892:	18 95       	reti

00000894 <main>:

int main()
{
     894:	2f 92       	push	r2
     896:	3f 92       	push	r3
     898:	4f 92       	push	r4
     89a:	5f 92       	push	r5
     89c:	6f 92       	push	r6
     89e:	7f 92       	push	r7
     8a0:	8f 92       	push	r8
     8a2:	9f 92       	push	r9
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	df 93       	push	r29
     8b6:	cf 93       	push	r28
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <main+0x26>
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <main+0x28>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <main+0x2a>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
   BUT_Init();
     8c2:	06 d3       	rcall	.+1548   	; 0xed0 <BUT_Init>
   USART_Init(USART_DOUBLED, 9600);
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	60 e8       	ldi	r22, 0x80	; 128
     8c8:	75 e2       	ldi	r23, 0x25	; 37
     8ca:	37 d3       	rcall	.+1646   	; 0xf3a <USART_Init>
   PARS_Init();
     8cc:	d0 db       	rcall	.-2144   	; 0x6e <PARS_Init>
   LCD_Init();
     8ce:	9a d2       	rcall	.+1332   	; 0xe04 <LCD_Init>
   t2_init();
     8d0:	af dc       	rcall	.-1698   	; 0x230 <t2_init>
   //ADC Init
   ADCSRA = (1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
     8d2:	85 e8       	ldi	r24, 0x85	; 133
     8d4:	86 b9       	out	0x06, r24	; 6

   USART_SendStr("Initializing...\r\n");
     8d6:	8c e6       	ldi	r24, 0x6C	; 108
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	8c d3       	rcall	.+1816   	; 0xff4 <USART_SendStr>
   
   //Конфиг ножек
   DDRB |= (1 << PB1) | (1 << PB5);
     8dc:	87 b3       	in	r24, 0x17	; 23
     8de:	82 62       	ori	r24, 0x22	; 34
     8e0:	87 bb       	out	0x17, r24	; 23
   DDRC &= ~((1 << PC0) | (1 << PC1) | (1 << PC3) | (1 << PC5));
     8e2:	84 b3       	in	r24, 0x14	; 20
     8e4:	84 7d       	andi	r24, 0xD4	; 212
     8e6:	84 bb       	out	0x14, r24	; 20
   DDRC |=  ((1 << PC2) | (1 << PC4));
     8e8:	84 b3       	in	r24, 0x14	; 20
     8ea:	84 61       	ori	r24, 0x14	; 20
     8ec:	84 bb       	out	0x14, r24	; 20

   LCD_SetUserChar(leftArrow, 0);
     8ee:	86 e2       	ldi	r24, 0x26	; 38
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	cc d2       	rcall	.+1432   	; 0xe8e <LCD_SetUserChar>
   LCD_SetUserChar(rightArrow, 1);
     8f6:	8e e2       	ldi	r24, 0x2E	; 46
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	c8 d2       	rcall	.+1424   	; 0xe8e <LCD_SetUserChar>


   USART_SendStr("Last capacity:");
     8fe:	8e e7       	ldi	r24, 0x7E	; 126
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	78 d3       	rcall	.+1776   	; 0xff4 <USART_SendStr>
   LastCapacity = eeprom_read_dword(&eeLastCapacity);
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	a4 d4       	rcall	.+2376   	; 0x1252 <__eerd_dword_m8>
     90a:	60 93 d8 02 	sts	0x02D8, r22
     90e:	70 93 d9 02 	sts	0x02D9, r23
     912:	80 93 da 02 	sts	0x02DA, r24
     916:	90 93 db 02 	sts	0x02DB, r25
   LCD_Goto(1,0);
     91a:	81 e8       	ldi	r24, 0x81	; 129
     91c:	65 d2       	rcall	.+1226   	; 0xde8 <LCD_WriteCom>
   LCD_SendStr("Last capacity:");
     91e:	8e e7       	ldi	r24, 0x7E	; 126
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	a2 d2       	rcall	.+1348   	; 0xe68 <LCD_SendStr>
   LCD_Goto(4, 1);
     924:	84 ec       	ldi	r24, 0xC4	; 196
     926:	60 d2       	rcall	.+1216   	; 0xde8 <LCD_WriteCom>
   printCapacity(LastCapacity, false, true);
     928:	60 91 d8 02 	lds	r22, 0x02D8
     92c:	70 91 d9 02 	lds	r23, 0x02D9
     930:	80 91 da 02 	lds	r24, 0x02DA
     934:	90 91 db 02 	lds	r25, 0x02DB
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	59 dd       	rcall	.-1358   	; 0x3f0 <printCapacity>
   LCD_SendStr("mAh");
     93e:	86 ef       	ldi	r24, 0xF6	; 246
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	92 d2       	rcall	.+1316   	; 0xe68 <LCD_SendStr>
   USART_SendStr(" mAh\r\n");
     944:	8f ee       	ldi	r24, 0xEF	; 239
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	55 d3       	rcall	.+1706   	; 0xff4 <USART_SendStr>
   PORTC |= (1 << PC4);
     94a:	ac 9a       	sbi	0x15, 4	; 21
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	91 ee       	ldi	r25, 0xE1	; 225
     950:	a4 e0       	ldi	r26, 0x04	; 4
     952:	81 50       	subi	r24, 0x01	; 1
     954:	90 40       	sbci	r25, 0x00	; 0
     956:	a0 40       	sbci	r26, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <main+0xbe>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <main+0xc8>
     95c:	00 00       	nop
   _delay_ms(200);
   PORTC &=~ (1 << PC4);
     95e:	ac 98       	cbi	0x15, 4	; 21
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	98 e0       	ldi	r25, 0x08	; 8
     964:	ad e3       	ldi	r26, 0x3D	; 61
     966:	81 50       	subi	r24, 0x01	; 1
     968:	90 40       	sbci	r25, 0x00	; 0
     96a:	a0 40       	sbci	r26, 0x00	; 0
     96c:	e1 f7       	brne	.-8      	; 0x966 <main+0xd2>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <main+0xdc>
     970:	00 00       	nop
   _delay_ms(2500);

   LCD_Clear();
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	39 d2       	rcall	.+1138   	; 0xde8 <LCD_WriteCom>
     976:	af e9       	ldi	r26, 0x9F	; 159
     978:	bf e0       	ldi	r27, 0x0F	; 15
     97a:	11 97       	sbiw	r26, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <main+0xe6>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <main+0xec>
     980:	00 00       	nop

   checkBattery();
     982:	df dc       	rcall	.-1602   	; 0x342 <checkBattery>
   
   //Диалог зарядки 
   if(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_DIALOG_VALUE)){
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	5f dc       	rcall	.-1858   	; 0x246 <read_adc>
     988:	b3 e0       	ldi	r27, 0x03	; 3
     98a:	8e 38       	cpi	r24, 0x8E	; 142
     98c:	9b 07       	cpc	r25, r27
     98e:	a0 f5       	brcc	.+104    	; 0x9f8 <main+0x164>
     LCD_Goto(0,0);
     990:	80 e8       	ldi	r24, 0x80	; 128
     992:	2a d2       	rcall	.+1108   	; 0xde8 <LCD_WriteCom>
     LCD_SendStr("Charge");
     994:	8d e8       	ldi	r24, 0x8D	; 141
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	67 d2       	rcall	.+1230   	; 0xe68 <LCD_SendStr>
	 LCD_Goto(0,1);
     99a:	80 ec       	ldi	r24, 0xC0	; 192
     99c:	25 d2       	rcall	.+1098   	; 0xde8 <LCD_WriteCom>
	 LCD_SendStr("the battery?");
     99e:	84 e9       	ldi	r24, 0x94	; 148
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	62 d2       	rcall	.+1220   	; 0xe68 <LCD_SendStr>
	 USART_SendStr("Charge the battery? (Y/N)\r\n");
     9a4:	81 ea       	ldi	r24, 0xA1	; 161
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	25 d3       	rcall	.+1610   	; 0xff4 <USART_SendStr>
	 while(1){
	     i = BUT_GetKey();
     9aa:	c2 d2       	rcall	.+1412   	; 0xf30 <BUT_GetKey>
     9ac:	80 93 ec 02 	sts	0x02EC, r24
		 one_char_buffer = USART_GetChar();
     9b0:	64 d3       	rcall	.+1736   	; 0x107a <USART_GetChar>
     9b2:	80 93 ed 02 	sts	0x02ED, r24
		 if(i == 3 || one_char_buffer == 'Y' || one_char_buffer == 'y'){
     9b6:	90 91 ec 02 	lds	r25, 0x02EC
     9ba:	93 30       	cpi	r25, 0x03	; 3
     9bc:	21 f0       	breq	.+8      	; 0x9c6 <main+0x132>
     9be:	89 35       	cpi	r24, 0x59	; 89
     9c0:	11 f0       	breq	.+4      	; 0x9c6 <main+0x132>
     9c2:	89 37       	cpi	r24, 0x79	; 121
     9c4:	21 f4       	brne	.+8      	; 0x9ce <main+0x13a>
	       charge_before = true;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 d7 02 	sts	0x02D7, r24
		   break;
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <main+0x154>
		 }

	     if(i == 4 || i == 1 || one_char_buffer == 'N' || one_char_buffer == 'n'){
     9ce:	94 30       	cpi	r25, 0x04	; 4
     9d0:	31 f0       	breq	.+12     	; 0x9de <main+0x14a>
     9d2:	91 30       	cpi	r25, 0x01	; 1
     9d4:	21 f0       	breq	.+8      	; 0x9de <main+0x14a>
     9d6:	8e 34       	cpi	r24, 0x4E	; 78
     9d8:	11 f0       	breq	.+4      	; 0x9de <main+0x14a>
     9da:	8e 36       	cpi	r24, 0x6E	; 110
     9dc:	19 f4       	brne	.+6      	; 0x9e4 <main+0x150>
		   charge_before = false;
     9de:	10 92 d7 02 	sts	0x02D7, r1
		   break;
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <main+0x154>
		 }
         BUT_Debrief();
     9e4:	7c d2       	rcall	.+1272   	; 0xede <BUT_Debrief>
     }
     9e6:	e1 cf       	rjmp	.-62     	; 0x9aa <main+0x116>
     LCD_Clear();
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	fe d1       	rcall	.+1020   	; 0xde8 <LCD_WriteCom>
     9ec:	ef e9       	ldi	r30, 0x9F	; 159
     9ee:	ff e0       	ldi	r31, 0x0F	; 15
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <main+0x15c>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <main+0x162>
     9f6:	00 00       	nop
   }

  //Установка параметров
  printVADialig(&eeI, AMPERAGE_STEP, "Current:", &I_set, 4, AMPERAGE_MIN, AMPERAGE_MAX, "\r\nSend value 100-2000 with step 100 (or send ok):\r\n", "Default value:", AMPERAGE_DIALOG);
     9f8:	0f 92       	push	r0
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	ad b7       	in	r26, 0x3d	; 61
     9fe:	be b7       	in	r27, 0x3e	; 62
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	8c 93       	st	X, r24
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	4d eb       	ldi	r20, 0xBD	; 189
     a0e:	51 e0       	ldi	r21, 0x01	; 1
     a10:	2e ec       	ldi	r18, 0xCE	; 206
     a12:	32 e0       	ldi	r19, 0x02	; 2
     a14:	04 e0       	ldi	r16, 0x04	; 4
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	a4 e6       	ldi	r26, 0x64	; 100
     a1a:	ea 2e       	mov	r14, r26
     a1c:	f1 2c       	mov	r15, r1
     a1e:	f0 ed       	ldi	r31, 0xD0	; 208
     a20:	cf 2e       	mov	r12, r31
     a22:	f7 e0       	ldi	r31, 0x07	; 7
     a24:	df 2e       	mov	r13, r31
     a26:	e6 ec       	ldi	r30, 0xC6	; 198
     a28:	ae 2e       	mov	r10, r30
     a2a:	e1 e0       	ldi	r30, 0x01	; 1
     a2c:	be 2e       	mov	r11, r30
     a2e:	ba ef       	ldi	r27, 0xFA	; 250
     a30:	8b 2e       	mov	r8, r27
     a32:	b1 e0       	ldi	r27, 0x01	; 1
     a34:	9b 2e       	mov	r9, r27
     a36:	3e de       	rcall	.-900    	; 0x6b4 <printVADialig>
  printVADialig(&eeEND_Voltage, VOLTAGE_STEP, "End voltage:", &END_Voltage, 2, VOLTAGE_MIN, VOLTAGE_MAX, "\r\nSend value 2500-3500 with step 100 (or send ok):\r\n", "Default value:", VOLTAGE_DIALOG);
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	ed b7       	in	r30, 0x3d	; 61
     a3c:	fe b7       	in	r31, 0x3e	; 62
     a3e:	81 83       	std	Z+1, r24	; 0x01
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	64 e6       	ldi	r22, 0x64	; 100
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	49 e0       	ldi	r20, 0x09	; 9
     a4a:	52 e0       	ldi	r21, 0x02	; 2
     a4c:	2c ec       	ldi	r18, 0xCC	; 204
     a4e:	32 e0       	ldi	r19, 0x02	; 2
     a50:	02 e0       	ldi	r16, 0x02	; 2
     a52:	10 e0       	ldi	r17, 0x00	; 0
     a54:	a4 ec       	ldi	r26, 0xC4	; 196
     a56:	ea 2e       	mov	r14, r26
     a58:	a9 e0       	ldi	r26, 0x09	; 9
     a5a:	fa 2e       	mov	r15, r26
     a5c:	fc ea       	ldi	r31, 0xAC	; 172
     a5e:	cf 2e       	mov	r12, r31
     a60:	fd e0       	ldi	r31, 0x0D	; 13
     a62:	df 2e       	mov	r13, r31
     a64:	e6 e1       	ldi	r30, 0x16	; 22
     a66:	ae 2e       	mov	r10, r30
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	be 2e       	mov	r11, r30
     a6c:	23 de       	rcall	.-954    	; 0x6b4 <printVADialig>

  //Зарядка перед тестом
  if(charge_before){
     a6e:	0f 90       	pop	r0
     a70:	80 91 d7 02 	lds	r24, 0x02D7
     a74:	88 23       	and	r24, r24
     a76:	51 f0       	breq	.+20     	; 0xa8c <main+0x1f8>
     LCD_Clear();
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	b6 d1       	rcall	.+876    	; 0xde8 <LCD_WriteCom>
     a7c:	8f e9       	ldi	r24, 0x9F	; 159
     a7e:	9f e0       	ldi	r25, 0x0F	; 15
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <main+0x1ec>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <main+0x1f2>
     a86:	00 00       	nop
     Charge_battery(false);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	28 dd       	rcall	.-1456   	; 0x4dc <Charge_battery>
  }

   USART_SendStr("Press any key to start the test...\r\n");
     a8c:	8b e4       	ldi	r24, 0x4B	; 75
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	b1 d2       	rcall	.+1378   	; 0xff4 <USART_SendStr>

   LCD_Goto(0,0);
     a92:	80 e8       	ldi	r24, 0x80	; 128
     a94:	a9 d1       	rcall	.+850    	; 0xde8 <LCD_WriteCom>
   LCD_SendStr("Press start to");
     a96:	80 e7       	ldi	r24, 0x70	; 112
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	e6 d1       	rcall	.+972    	; 0xe68 <LCD_SendStr>
   LCD_Goto(0,1);
     a9c:	80 ec       	ldi	r24, 0xC0	; 192
     a9e:	a4 d1       	rcall	.+840    	; 0xde8 <LCD_WriteCom>
   LCD_SendStr("begin the test");
     aa0:	8f e7       	ldi	r24, 0x7F	; 127
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	e1 d1       	rcall	.+962    	; 0xe68 <LCD_SendStr>
   
   
   Reset_Button();
     aa6:	6a dc       	rcall	.-1836   	; 0x37c <Reset_Button>


   USART_SendStr("Starting...\r\n");
     aa8:	8e e8       	ldi	r24, 0x8E	; 142
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	a3 d2       	rcall	.+1350   	; 0xff4 <USART_SendStr>
   LCD_Clear();
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	9b d1       	rcall	.+822    	; 0xde8 <LCD_WriteCom>
     ab2:	af e9       	ldi	r26, 0x9F	; 159
     ab4:	bf e0       	ldi	r27, 0x0F	; 15
     ab6:	11 97       	sbiw	r26, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <main+0x222>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <main+0x228>
     abc:	00 00       	nop
   
   USART_SendStr("Seconds | Voltage | Amperage | Time | mAh\r\n");
     abe:	8c e9       	ldi	r24, 0x9C	; 156
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	98 d2       	rcall	.+1328   	; 0xff4 <USART_SendStr>
  
   //ШИМ электронной нагрузки
   TCCR1A |= (1 << COM1A1);
     ac4:	8f b5       	in	r24, 0x2f	; 47
     ac6:	80 68       	ori	r24, 0x80	; 128
     ac8:	8f bd       	out	0x2f, r24	; 47
   TCCR1A |= (1 << WGM11) | (1 << WGM10);
     aca:	8f b5       	in	r24, 0x2f	; 47
     acc:	83 60       	ori	r24, 0x03	; 3
     ace:	8f bd       	out	0x2f, r24	; 47
   TCCR1B |= (1 << CS11);
     ad0:	8e b5       	in	r24, 0x2e	; 46
     ad2:	82 60       	ori	r24, 0x02	; 2
     ad4:	8e bd       	out	0x2e, r24	; 46
   OCR1A = 40*(I_set/100)+4*(I_set/100);
     ad6:	80 91 ce 02 	lds	r24, 0x02CE
     ada:	90 91 cf 02 	lds	r25, 0x02CF
     ade:	64 e6       	ldi	r22, 0x64	; 100
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	34 d3       	rcall	.+1640   	; 0x114c <__udivmodhi4>
     ae4:	2c e2       	ldi	r18, 0x2C	; 44
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	62 9f       	mul	r22, r18
     aea:	c0 01       	movw	r24, r0
     aec:	63 9f       	mul	r22, r19
     aee:	90 0d       	add	r25, r0
     af0:	72 9f       	mul	r23, r18
     af2:	90 0d       	add	r25, r0
     af4:	11 24       	eor	r1, r1
     af6:	9b bd       	out	0x2b, r25	; 43
     af8:	8a bd       	out	0x2a, r24	; 42
   
   //Подключение АКБ
   PORTB |= (1 << PB5);
     afa:	c5 9a       	sbi	0x18, 5	; 24
   
   //Включение таймера времени
   TIMSK |= (1 << TOIE2);
     afc:	89 b7       	in	r24, 0x39	; 57
     afe:	80 64       	ori	r24, 0x40	; 64
     b00:	89 bf       	out	0x39, r24	; 57
   
   //Разрешение прерываний
   sei();
     b02:	78 94       	sei
   {   
	   //Темапературная  защита
	   checkTempPotection();
	   
       if(interrupt_data) {
		   Voltage = (read_adc(VOLTAGE_MUX_CHANNEL)*455000/1023000)*10;
     b04:	0a e0       	ldi	r16, 0x0A	; 10
     b06:	80 2e       	mov	r8, r16
     b08:	91 2c       	mov	r9, r1
     b0a:	a1 2c       	mov	r10, r1
     b0c:	b1 2c       	mov	r11, r1
		   //Измерение емкости 
		   Capacity += I;
		   
		   //Вывод секунд
		   char buffer[6];
		   ltoa((long)seconds(), buffer, 10);
     b0e:	1e 01       	movw	r2, r28
     b10:	08 94       	sec
     b12:	21 1c       	adc	r2, r1
     b14:	31 1c       	adc	r3, r1

	       USART_PutChar(' ');

	        //Вывод Тока 
	       LCD_Goto(6,0);
		   printUL(I/1000);
     b16:	18 ee       	ldi	r17, 0xE8	; 232
     b18:	41 2e       	mov	r4, r17
     b1a:	13 e0       	ldi	r17, 0x03	; 3
     b1c:	51 2e       	mov	r5, r17
     b1e:	61 2c       	mov	r6, r1
     b20:	71 2c       	mov	r7, r1
   sei();
   
   while(1)
   {   
	   //Темапературная  защита
	   checkTempPotection();
     b22:	35 dc       	rcall	.-1942   	; 0x38e <checkTempPotection>
	   
       if(interrupt_data) {
     b24:	80 91 d6 02 	lds	r24, 0x02D6
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <main+0x29a>
     b2c:	fe c0       	rjmp	.+508    	; 0xd2a <main+0x496>
		   Voltage = (read_adc(VOLTAGE_MUX_CHANNEL)*455000/1023000)*10;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	8a db       	rcall	.-2284   	; 0x246 <read_adc>
     b32:	bc 01       	movw	r22, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	28 e5       	ldi	r18, 0x58	; 88
     b3a:	31 ef       	ldi	r19, 0xF1	; 241
     b3c:	46 e0       	ldi	r20, 0x06	; 6
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	e6 d2       	rcall	.+1484   	; 0x110e <__mulsi3>
     b42:	28 e1       	ldi	r18, 0x18	; 24
     b44:	3c e9       	ldi	r19, 0x9C	; 156
     b46:	4f e0       	ldi	r20, 0x0F	; 15
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	36 d3       	rcall	.+1644   	; 0x11b8 <__divmodsi4>
     b4c:	ca 01       	movw	r24, r20
     b4e:	b9 01       	movw	r22, r18
     b50:	2a e0       	ldi	r18, 0x0A	; 10
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	da d2       	rcall	.+1460   	; 0x110e <__mulsi3>
     b5a:	60 93 e8 02 	sts	0x02E8, r22
     b5e:	70 93 e9 02 	sts	0x02E9, r23
     b62:	80 93 ea 02 	sts	0x02EA, r24
     b66:	90 93 eb 02 	sts	0x02EB, r25
		   I = read_adc(CURRENT_MUX_CHANNEL)*10;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	6c db       	rcall	.-2344   	; 0x246 <read_adc>
     b6e:	9c 01       	movw	r18, r24
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	a3 e0       	ldi	r26, 0x03	; 3
     b76:	22 0f       	add	r18, r18
     b78:	33 1f       	adc	r19, r19
     b7a:	aa 95       	dec	r26
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <main+0x2e2>
     b7e:	82 0f       	add	r24, r18
     b80:	93 1f       	adc	r25, r19
     b82:	9c 01       	movw	r18, r24
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	20 93 e4 02 	sts	0x02E4, r18
     b8c:	30 93 e5 02 	sts	0x02E5, r19
     b90:	40 93 e6 02 	sts	0x02E6, r20
     b94:	50 93 e7 02 	sts	0x02E7, r21

		   //Измерение емкости 
		   Capacity += I;
     b98:	80 91 e0 02 	lds	r24, 0x02E0
     b9c:	90 91 e1 02 	lds	r25, 0x02E1
     ba0:	a0 91 e2 02 	lds	r26, 0x02E2
     ba4:	b0 91 e3 02 	lds	r27, 0x02E3
     ba8:	82 0f       	add	r24, r18
     baa:	93 1f       	adc	r25, r19
     bac:	a4 1f       	adc	r26, r20
     bae:	b5 1f       	adc	r27, r21
     bb0:	80 93 e0 02 	sts	0x02E0, r24
     bb4:	90 93 e1 02 	sts	0x02E1, r25
     bb8:	a0 93 e2 02 	sts	0x02E2, r26
     bbc:	b0 93 e3 02 	sts	0x02E3, r27
		   
		   //Вывод секунд
		   char buffer[6];
		   ltoa((long)seconds(), buffer, 10);
     bc0:	e8 da       	rcall	.-2608   	; 0x192 <seconds>
     bc2:	a1 01       	movw	r20, r2
     bc4:	2a e0       	ldi	r18, 0x0A	; 10
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	12 d3       	rcall	.+1572   	; 0x11ee <ltoa>
		   USART_SendStr(buffer);
     bca:	c1 01       	movw	r24, r2
     bcc:	13 d2       	rcall	.+1062   	; 0xff4 <USART_SendStr>
		   USART_PutChar(' ');
     bce:	80 e2       	ldi	r24, 0x20	; 32
     bd0:	eb d1       	rcall	.+982    	; 0xfa8 <USART_PutChar>
           
		   
		   //Вывод напряжения 
		   LCD_Goto(0,0);
     bd2:	80 e8       	ldi	r24, 0x80	; 128
     bd4:	09 d1       	rcall	.+530    	; 0xde8 <LCD_WriteCom>
           printVoltage(Voltage);
     bd6:	60 91 e8 02 	lds	r22, 0x02E8
     bda:	70 91 e9 02 	lds	r23, 0x02E9
     bde:	80 91 ea 02 	lds	r24, 0x02EA
     be2:	90 91 eb 02 	lds	r25, 0x02EB
     be6:	6b db       	rcall	.-2346   	; 0x2be <printVoltage>
		   LCD_SendStr("V");
     be8:	88 ec       	ldi	r24, 0xC8	; 200
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	3d d1       	rcall	.+634    	; 0xe68 <LCD_SendStr>

	       USART_PutChar(' ');
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	db d1       	rcall	.+950    	; 0xfa8 <USART_PutChar>

	        //Вывод Тока 
	       LCD_Goto(6,0);
     bf2:	86 e8       	ldi	r24, 0x86	; 134
     bf4:	f9 d0       	rcall	.+498    	; 0xde8 <LCD_WriteCom>
		   printUL(I/1000);
     bf6:	60 91 e4 02 	lds	r22, 0x02E4
     bfa:	70 91 e5 02 	lds	r23, 0x02E5
     bfe:	80 91 e6 02 	lds	r24, 0x02E6
     c02:	90 91 e7 02 	lds	r25, 0x02E7
     c06:	a3 01       	movw	r20, r6
     c08:	92 01       	movw	r18, r4
     c0a:	b4 d2       	rcall	.+1384   	; 0x1174 <__udivmodsi4>
     c0c:	82 2f       	mov	r24, r18
     c0e:	28 db       	rcall	.-2480   	; 0x260 <printUL>
		   LCD_WriteData('.');
     c10:	8e e2       	ldi	r24, 0x2E	; 46
     c12:	f1 d0       	rcall	.+482    	; 0xdf6 <LCD_WriteData>
		   USART_PutChar('.');
     c14:	8e e2       	ldi	r24, 0x2E	; 46
     c16:	c8 d1       	rcall	.+912    	; 0xfa8 <USART_PutChar>
           printUL(I%1000/100);
     c18:	60 91 e4 02 	lds	r22, 0x02E4
     c1c:	70 91 e5 02 	lds	r23, 0x02E5
     c20:	80 91 e6 02 	lds	r24, 0x02E6
     c24:	90 91 e7 02 	lds	r25, 0x02E7
     c28:	a3 01       	movw	r20, r6
     c2a:	92 01       	movw	r18, r4
     c2c:	a3 d2       	rcall	.+1350   	; 0x1174 <__udivmodsi4>
     c2e:	24 e6       	ldi	r18, 0x64	; 100
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	9e d2       	rcall	.+1340   	; 0x1174 <__udivmodsi4>
     c38:	82 2f       	mov	r24, r18
     c3a:	12 db       	rcall	.-2524   	; 0x260 <printUL>
		   USART_PutChar(0x30+(I%1000)%100/10);
     c3c:	60 91 e4 02 	lds	r22, 0x02E4
     c40:	70 91 e5 02 	lds	r23, 0x02E5
     c44:	80 91 e6 02 	lds	r24, 0x02E6
     c48:	90 91 e7 02 	lds	r25, 0x02E7
     c4c:	a3 01       	movw	r20, r6
     c4e:	92 01       	movw	r18, r4
     c50:	91 d2       	rcall	.+1314   	; 0x1174 <__udivmodsi4>
     c52:	24 e6       	ldi	r18, 0x64	; 100
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	8c d2       	rcall	.+1304   	; 0x1174 <__udivmodsi4>
     c5c:	a5 01       	movw	r20, r10
     c5e:	94 01       	movw	r18, r8
     c60:	89 d2       	rcall	.+1298   	; 0x1174 <__udivmodsi4>
     c62:	82 2f       	mov	r24, r18
     c64:	80 5d       	subi	r24, 0xD0	; 208
     c66:	a0 d1       	rcall	.+832    	; 0xfa8 <USART_PutChar>
		   LCD_SendStr("A");
     c68:	8a ec       	ldi	r24, 0xCA	; 202
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	fd d0       	rcall	.+506    	; 0xe68 <LCD_SendStr>

	       USART_PutChar(' ');
     c6e:	80 e2       	ldi	r24, 0x20	; 32
     c70:	9b d1       	rcall	.+822    	; 0xfa8 <USART_PutChar>

	       //Вывод времени
		   LCD_Goto(11,0);
     c72:	8b e8       	ldi	r24, 0x8B	; 139
     c74:	b9 d0       	rcall	.+370    	; 0xde8 <LCD_WriteCom>
	       minutes = seconds()/60;
     c76:	8d da       	rcall	.-2790   	; 0x192 <seconds>
     c78:	2c e3       	ldi	r18, 0x3C	; 60
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	79 d2       	rcall	.+1266   	; 0x1174 <__udivmodsi4>
     c82:	79 01       	movw	r14, r18
     c84:	8a 01       	movw	r16, r20
     c86:	20 93 dc 02 	sts	0x02DC, r18
     c8a:	30 93 dd 02 	sts	0x02DD, r19
     c8e:	40 93 de 02 	sts	0x02DE, r20
     c92:	50 93 df 02 	sts	0x02DF, r21
		   printITime((minutes/60)/10, (minutes/60)%10);
     c96:	ca 01       	movw	r24, r20
     c98:	b9 01       	movw	r22, r18
     c9a:	28 e5       	ldi	r18, 0x58	; 88
     c9c:	32 e0       	ldi	r19, 0x02	; 2
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	68 d2       	rcall	.+1232   	; 0x1174 <__udivmodsi4>
     ca4:	d2 2e       	mov	r13, r18
     ca6:	c8 01       	movw	r24, r16
     ca8:	b7 01       	movw	r22, r14
     caa:	2c e3       	ldi	r18, 0x3C	; 60
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 d2       	rcall	.+1216   	; 0x1174 <__udivmodsi4>
     cb4:	ca 01       	movw	r24, r20
     cb6:	b9 01       	movw	r22, r18
     cb8:	a5 01       	movw	r20, r10
     cba:	94 01       	movw	r18, r8
     cbc:	5b d2       	rcall	.+1206   	; 0x1174 <__udivmodsi4>
     cbe:	8d 2d       	mov	r24, r13
     cc0:	ed da       	rcall	.-2598   	; 0x29c <printITime>
		   USART_PutChar(':');
     cc2:	8a e3       	ldi	r24, 0x3A	; 58
     cc4:	71 d1       	rcall	.+738    	; 0xfa8 <USART_PutChar>
	       LCD_WriteData(':');
     cc6:	8a e3       	ldi	r24, 0x3A	; 58
     cc8:	96 d0       	rcall	.+300    	; 0xdf6 <LCD_WriteData>
           printITime((minutes%60)/10, (minutes%60%10));
     cca:	60 91 dc 02 	lds	r22, 0x02DC
     cce:	70 91 dd 02 	lds	r23, 0x02DD
     cd2:	80 91 de 02 	lds	r24, 0x02DE
     cd6:	90 91 df 02 	lds	r25, 0x02DF
     cda:	2c e3       	ldi	r18, 0x3C	; 60
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	48 d2       	rcall	.+1168   	; 0x1174 <__udivmodsi4>
     ce4:	a5 01       	movw	r20, r10
     ce6:	94 01       	movw	r18, r8
     ce8:	45 d2       	rcall	.+1162   	; 0x1174 <__udivmodsi4>
     cea:	82 2f       	mov	r24, r18
     cec:	d7 da       	rcall	.-2642   	; 0x29c <printITime>
           
	       USART_PutChar(' ');
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	5b d1       	rcall	.+694    	; 0xfa8 <USART_PutChar>

	       //Вывод емкости
		   LCD_Goto(0,1);
     cf2:	80 ec       	ldi	r24, 0xC0	; 192
     cf4:	79 d0       	rcall	.+242    	; 0xde8 <LCD_WriteCom>
	       printCapacity(Capacity/3600, false, true);
     cf6:	60 91 e0 02 	lds	r22, 0x02E0
     cfa:	70 91 e1 02 	lds	r23, 0x02E1
     cfe:	80 91 e2 02 	lds	r24, 0x02E2
     d02:	90 91 e3 02 	lds	r25, 0x02E3
     d06:	20 e1       	ldi	r18, 0x10	; 16
     d08:	3e e0       	ldi	r19, 0x0E	; 14
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	32 d2       	rcall	.+1124   	; 0x1174 <__udivmodsi4>
     d10:	ca 01       	movw	r24, r20
     d12:	b9 01       	movw	r22, r18
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	6b db       	rcall	.-2346   	; 0x3f0 <printCapacity>
		   LCD_SendStr("mAh");
     d1a:	86 ef       	ldi	r24, 0xF6	; 246
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a4 d0       	rcall	.+328    	; 0xe68 <LCD_SendStr>
		   LCD_Goto(9,1);
           printWhVoltage((long)(Wh*1000), true);
		   LCD_SendStr("Wh");
		   */
		   
		   USART_SendStr("\r\n");
     d20:	89 e6       	ldi	r24, 0x69	; 105
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	67 d1       	rcall	.+718    	; 0xff4 <USART_SendStr>
		   interrupt_data = false;
     d26:	10 92 d6 02 	sts	0x02D6, r1
      }
	  //Защита от переразряда и конец теста
	  checkEndVoltage();
     d2a:	3d dc       	rcall	.-1926   	; 0x5a6 <checkEndVoltage>
   }
     d2c:	fa ce       	rjmp	.-524    	; 0xb22 <main+0x28e>

00000d2e <LCD_CommonFunc>:
INLINE static void LCD_CommonFunc(uint8_t data)
{
#if (LCD_BUS_4_8_BIT == 0) 
  
  uint8_t tmp; 
  tmp = (data & 0xf0);
     d2e:	28 2f       	mov	r18, r24
     d30:	20 7f       	andi	r18, 0xF0	; 240
  LCD_WritePort(LCD_PORT, tmp);
     d32:	92 2f       	mov	r25, r18
     d34:	24 ff       	sbrs	r18, 4
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <LCD_CommonFunc+0xe>
     d38:	c0 9a       	sbi	0x18, 0	; 24
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <LCD_CommonFunc+0x10>
     d3c:	c0 98       	cbi	0x18, 0	; 24
     d3e:	95 ff       	sbrs	r25, 5
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <LCD_CommonFunc+0x18>
     d42:	95 9a       	sbi	0x12, 5	; 18
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <LCD_CommonFunc+0x1a>
     d46:	95 98       	cbi	0x12, 5	; 18
     d48:	96 ff       	sbrs	r25, 6
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <LCD_CommonFunc+0x22>
     d4c:	96 9a       	sbi	0x12, 6	; 18
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <LCD_CommonFunc+0x24>
     d50:	96 98       	cbi	0x12, 6	; 18
     d52:	27 ff       	sbrs	r18, 7
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <LCD_CommonFunc+0x2c>
     d56:	97 9a       	sbi	0x12, 7	; 18
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <LCD_CommonFunc+0x2e>
     d5a:	97 98       	cbi	0x12, 7	; 18
  LCD_SetPin(LCD_EN);
     d5c:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d5e:	95 e0       	ldi	r25, 0x05	; 5
     d60:	9a 95       	dec	r25
     d62:	f1 f7       	brne	.-4      	; 0xd60 <LCD_CommonFunc+0x32>
     d64:	00 00       	nop
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
     d66:	c3 98       	cbi	0x18, 3	; 24

  data = __swap_nibbles(data); 
     d68:	82 95       	swap	r24
  tmp = (data & 0xf0);
     d6a:	80 7f       	andi	r24, 0xF0	; 240
    
  LCD_WritePort(LCD_PORT, tmp);
     d6c:	98 2f       	mov	r25, r24
     d6e:	84 ff       	sbrs	r24, 4
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <LCD_CommonFunc+0x48>
     d72:	c0 9a       	sbi	0x18, 0	; 24
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <LCD_CommonFunc+0x4a>
     d76:	c0 98       	cbi	0x18, 0	; 24
     d78:	95 ff       	sbrs	r25, 5
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <LCD_CommonFunc+0x52>
     d7c:	95 9a       	sbi	0x12, 5	; 18
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <LCD_CommonFunc+0x54>
     d80:	95 98       	cbi	0x12, 5	; 18
     d82:	96 ff       	sbrs	r25, 6
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <LCD_CommonFunc+0x5c>
     d86:	96 9a       	sbi	0x12, 6	; 18
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <LCD_CommonFunc+0x5e>
     d8a:	96 98       	cbi	0x12, 6	; 18
     d8c:	87 ff       	sbrs	r24, 7
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <LCD_CommonFunc+0x66>
     d90:	97 9a       	sbi	0x12, 7	; 18
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <LCD_CommonFunc+0x68>
     d94:	97 98       	cbi	0x12, 7	; 18
  LCD_SetPin(LCD_EN);
     d96:	c3 9a       	sbi	0x18, 3	; 24
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	8a 95       	dec	r24
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <LCD_CommonFunc+0x6c>
     d9e:	00 00       	nop
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
     da0:	c3 98       	cbi	0x18, 3	; 24
  LCD_SetPin(LCD_EN);
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
  
#endif
}
     da2:	08 95       	ret

00000da4 <LCD_WriteComInit>:
     da4:	9a e6       	ldi	r25, 0x6A	; 106
     da6:	9a 95       	dec	r25
     da8:	f1 f7       	brne	.-4      	; 0xda6 <LCD_WriteComInit+0x2>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <LCD_WriteComInit+0x8>
/*_________________________________________________________________*/

void LCD_WriteComInit(uint8_t data)
{
  delay_us(LCD_DELAY_WAIT);
  LCD_ClearPin(LCD_RS);  
     dac:	c4 98       	cbi	0x18, 4	; 24
  
#if (LCD_BUS_4_8_BIT == 0)
  data &= 0xf0;
     dae:	80 7f       	andi	r24, 0xF0	; 240
#endif
  
  LCD_WritePort(LCD_PORT, data);	
     db0:	98 2f       	mov	r25, r24
     db2:	84 ff       	sbrs	r24, 4
     db4:	02 c0       	rjmp	.+4      	; 0xdba <LCD_WriteComInit+0x16>
     db6:	c0 9a       	sbi	0x18, 0	; 24
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <LCD_WriteComInit+0x18>
     dba:	c0 98       	cbi	0x18, 0	; 24
     dbc:	95 ff       	sbrs	r25, 5
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <LCD_WriteComInit+0x20>
     dc0:	95 9a       	sbi	0x12, 5	; 18
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <LCD_WriteComInit+0x22>
     dc4:	95 98       	cbi	0x12, 5	; 18
     dc6:	96 ff       	sbrs	r25, 6
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <LCD_WriteComInit+0x2a>
     dca:	96 9a       	sbi	0x12, 6	; 18
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <LCD_WriteComInit+0x2c>
     dce:	96 98       	cbi	0x12, 6	; 18
     dd0:	87 ff       	sbrs	r24, 7
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <LCD_WriteComInit+0x34>
     dd4:	97 9a       	sbi	0x12, 7	; 18
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <LCD_WriteComInit+0x36>
     dd8:	97 98       	cbi	0x12, 7	; 18
  LCD_SetPin(LCD_EN);
     dda:	c3 9a       	sbi	0x18, 3	; 24
     ddc:	85 e0       	ldi	r24, 0x05	; 5
     dde:	8a 95       	dec	r24
     de0:	f1 f7       	brne	.-4      	; 0xdde <LCD_WriteComInit+0x3a>
     de2:	00 00       	nop
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
     de4:	c3 98       	cbi	0x18, 3	; 24
}
     de6:	08 95       	ret

00000de8 <LCD_WriteCom>:
     de8:	9a e6       	ldi	r25, 0x6A	; 106
     dea:	9a 95       	dec	r25
     dec:	f1 f7       	brne	.-4      	; 0xdea <LCD_WriteCom+0x2>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <LCD_WriteCom+0x8>

/*функция записи команды*/
void LCD_WriteCom(uint8_t data)
{
  LCD_Wait();
  LCD_ClearPin(LCD_RS);	
     df0:	c4 98       	cbi	0x18, 4	; 24
  LCD_CommonFunc(data);
     df2:	9d df       	rcall	.-198    	; 0xd2e <LCD_CommonFunc>
}
     df4:	08 95       	ret

00000df6 <LCD_WriteData>:
     df6:	9a e6       	ldi	r25, 0x6A	; 106
     df8:	9a 95       	dec	r25
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <LCD_WriteData+0x2>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <LCD_WriteData+0x8>

/*функция записи данных*/
void LCD_WriteData(char data)
{
  LCD_Wait();
  LCD_SetPin(LCD_RS);	    
     dfe:	c4 9a       	sbi	0x18, 4	; 24
  LCD_CommonFunc(data);
     e00:	96 df       	rcall	.-212    	; 0xd2e <LCD_CommonFunc>
}
     e02:	08 95       	ret

00000e04 <LCD_Init>:

/*функция инициализации*/
void LCD_Init(void)
{
  LCD_DirPort(LCD_PORT, 0xff);
     e04:	b8 9a       	sbi	0x17, 0	; 23
     e06:	8d 9a       	sbi	0x11, 5	; 17
     e08:	8e 9a       	sbi	0x11, 6	; 17
     e0a:	8f 9a       	sbi	0x11, 7	; 17
  LCD_DirPin(LCD_RS, _OUT);
     e0c:	bc 9a       	sbi	0x17, 4	; 23
  LCD_DirPin(LCD_RW, _OUT);  
  LCD_DirPin(LCD_EN, _OUT);
     e0e:	bb 9a       	sbi	0x17, 3	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	99 ef       	ldi	r25, 0xF9	; 249
     e14:	a0 e0       	ldi	r26, 0x00	; 0
     e16:	81 50       	subi	r24, 0x01	; 1
     e18:	90 40       	sbci	r25, 0x00	; 0
     e1a:	a0 40       	sbci	r26, 0x00	; 0
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <LCD_Init+0x12>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <LCD_Init+0x1c>
     e20:	00 00       	nop
  
  delay_ms(40);
  
  LCD_WriteComInit(LCD_COM_INIT_1); 
     e22:	80 e3       	ldi	r24, 0x30	; 48
     e24:	bf df       	rcall	.-130    	; 0xda4 <LCD_WriteComInit>
     e26:	af e1       	ldi	r26, 0x1F	; 31
     e28:	be e4       	ldi	r27, 0x4E	; 78
     e2a:	11 97       	sbiw	r26, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <LCD_Init+0x26>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <LCD_Init+0x2c>
     e30:	00 00       	nop
  delay_ms(10);
  LCD_WriteComInit(LCD_COM_INIT_1);
     e32:	80 e3       	ldi	r24, 0x30	; 48
     e34:	b7 df       	rcall	.-146    	; 0xda4 <LCD_WriteComInit>
     e36:	8f e9       	ldi	r24, 0x9F	; 159
     e38:	9f e0       	ldi	r25, 0x0F	; 15
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <LCD_Init+0x36>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <LCD_Init+0x3c>
     e40:	00 00       	nop
  delay_ms(2);
  LCD_WriteComInit(LCD_COM_INIT_1);
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	af df       	rcall	.-162    	; 0xda4 <LCD_WriteComInit>
  
#if (LCD_BUS_4_8_BIT == 0) 
  LCD_WriteComInit(LCD_COM_FUNCTION_SET);
     e46:	88 e2       	ldi	r24, 0x28	; 40
     e48:	ad df       	rcall	.-166    	; 0xda4 <LCD_WriteComInit>
#endif

  LCD_WriteCom(LCD_COM_FUNCTION_SET);
     e4a:	88 e2       	ldi	r24, 0x28	; 40
     e4c:	cd df       	rcall	.-102    	; 0xde8 <LCD_WriteCom>
  LCD_WriteCom(LCD_COM_DISPLAY_CONTR);  
     e4e:	8c e0       	ldi	r24, 0x0C	; 12
     e50:	cb df       	rcall	.-106    	; 0xde8 <LCD_WriteCom>
  LCD_WriteCom(LCD_CLEAR_DISPLAY);  
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	c9 df       	rcall	.-110    	; 0xde8 <LCD_WriteCom>
     e56:	af e9       	ldi	r26, 0x9F	; 159
     e58:	bf e0       	ldi	r27, 0x0F	; 15
     e5a:	11 97       	sbiw	r26, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <LCD_Init+0x56>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <LCD_Init+0x5c>
     e60:	00 00       	nop
  delay_ms(2);
  LCD_WriteCom(LCD_COM_ENTRY_MODE_SET); 
     e62:	86 e0       	ldi	r24, 0x06	; 6
     e64:	c1 df       	rcall	.-126    	; 0xde8 <LCD_WriteCom>
  
}
     e66:	08 95       	ret

00000e68 <LCD_SendStr>:

/*функция вывда строки из ОЗУ*/
void LCD_SendStr(char *str)
{
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	e8 2e       	mov	r14, r24
     e72:	e7 01       	movw	r28, r14
     e74:	7e 01       	movw	r14, r28
     e76:	f9 2e       	mov	r15, r25
     e78:	e7 01       	movw	r28, r14
  uint8_t data;
  while (*str){
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <LCD_SendStr+0x16>
    data =  *str++;
    LCD_WriteData(data);
     e7c:	bc df       	rcall	.-136    	; 0xdf6 <LCD_WriteData>

/*функция вывда строки из ОЗУ*/
void LCD_SendStr(char *str)
{
  uint8_t data;
  while (*str){
     e7e:	89 91       	ld	r24, Y+
     e80:	88 23       	and	r24, r24
     e82:	e1 f7       	brne	.-8      	; 0xe7c <LCD_SendStr+0x14>
    data =  *str++;
    LCD_WriteData(data);
  }
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	08 95       	ret

00000e8e <LCD_SetUserChar>:
    LCD_WriteData(data);
  }
}

void LCD_SetUserChar(uint8_t const *sym, uint8_t adr)
{
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
   uint8_t data;	
   uint8_t i;

   LCD_WriteCom((1<<0x06)|((adr&0x07)<<0x03));
     e98:	86 2f       	mov	r24, r22
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	87 70       	andi	r24, 0x07	; 7
     e9e:	90 70       	andi	r25, 0x00	; 0
     ea0:	23 e0       	ldi	r18, 0x03	; 3
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	2a 95       	dec	r18
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <LCD_SetUserChar+0x14>
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	9d df       	rcall	.-198    	; 0xde8 <LCD_WriteCom>
     eae:	00 e0       	ldi	r16, 0x00	; 0
     eb0:	10 e0       	ldi	r17, 0x00	; 0
   
   i = 0;
   while (i<8){
      data = pgm_read_byte(sym);
     eb2:	fe 01       	movw	r30, r28
     eb4:	e0 0f       	add	r30, r16
     eb6:	f1 1f       	adc	r31, r17
     eb8:	84 91       	lpm	r24, Z+
      sym++;
      LCD_WriteData(data);
     eba:	9d df       	rcall	.-198    	; 0xdf6 <LCD_WriteData>
     ebc:	0f 5f       	subi	r16, 0xFF	; 255
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
   uint8_t i;

   LCD_WriteCom((1<<0x06)|((adr&0x07)<<0x03));
   
   i = 0;
   while (i<8){
     ec0:	08 30       	cpi	r16, 0x08	; 8
     ec2:	11 05       	cpc	r17, r1
     ec4:	b1 f7       	brne	.-20     	; 0xeb2 <LCD_SetUserChar+0x24>
      data = pgm_read_byte(sym);
      sym++;
      LCD_WriteData(data);
      i++;
   }    
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	08 95       	ret

00000ed0 <BUT_Init>:
unsigned char comp = 0;

//_______________________________________
void BUT_Init(void)
{
  DDRX_BUTTON &= ~(MASK_BUTTONS); 
     ed0:	81 b3       	in	r24, 0x11	; 17
     ed2:	82 7e       	andi	r24, 0xE2	; 226
     ed4:	81 bb       	out	0x11, r24	; 17
  PORT_BUTTON |= MASK_BUTTONS;
     ed6:	82 b3       	in	r24, 0x12	; 18
     ed8:	8d 61       	ori	r24, 0x1D	; 29
     eda:	82 bb       	out	0x12, r24	; 18
}
     edc:	08 95       	ret

00000ede <BUT_Debrief>:
void BUT_Debrief(void)
{
unsigned char key;

  //последовательный опрос выводов мк
  if (BitIsClear(PIN_BUTTON, ENTER))     
     ede:	82 9b       	sbis	0x10, 2	; 16
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <BUT_Debrief+0x10>
    key = KEY_ENTER;
  else if (BitIsClear(PIN_BUTTON, UP))        
     ee2:	83 9b       	sbis	0x10, 3	; 16
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <BUT_Debrief+0x14>
    key = KEY_UP;        
  else if (BitIsClear(PIN_BUTTON, DOWN))      
     ee6:	84 99       	sbic	0x10, 4	; 16
     ee8:	20 c0       	rjmp	.+64     	; 0xf2a <BUT_Debrief+0x4c>
    key = KEY_DOWN;
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <BUT_Debrief+0x16>
{
unsigned char key;

  //последовательный опрос выводов мк
  if (BitIsClear(PIN_BUTTON, ENTER))     
    key = KEY_ENTER;
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <BUT_Debrief+0x16>
  else if (BitIsClear(PIN_BUTTON, UP))        
    key = KEY_UP;        
     ef2:	93 e0       	ldi	r25, 0x03	; 3
  //если во временной переменной что-то есть
  if (key) {
  
    //и если кнопка удерживается долго
	//записать ее номер в буфер 
    if (comp == THRESHOLD) {
     ef4:	80 91 f3 02 	lds	r24, 0x02F3
     ef8:	84 31       	cpi	r24, 0x14	; 20
     efa:	89 f4       	brne	.+34     	; 0xf1e <BUT_Debrief+0x40>
	  comp = THRESHOLD+10; 
     efc:	8e e1       	ldi	r24, 0x1E	; 30
     efe:	80 93 f3 02 	sts	0x02F3, r24
      pressedKey = key;
     f02:	90 93 f2 02 	sts	0x02F2, r25
	  PORTC |= (1 << PC4);
     f06:	ac 9a       	sbi	0x15, 4	; 21
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	90 e7       	ldi	r25, 0x70	; 112
     f0c:	a2 e0       	ldi	r26, 0x02	; 2
     f0e:	81 50       	subi	r24, 0x01	; 1
     f10:	90 40       	sbci	r25, 0x00	; 0
     f12:	a0 40       	sbci	r26, 0x00	; 0
     f14:	e1 f7       	brne	.-8      	; 0xf0e <BUT_Debrief+0x30>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <BUT_Debrief+0x3a>
     f18:	00 00       	nop
	  _delay_ms(100);
	  PORTC &=~ (1 << PC4);
     f1a:	ac 98       	cbi	0x15, 4	; 21
      return;
     f1c:	08 95       	ret
    }
	else if (comp < (THRESHOLD+5)) comp++;
     f1e:	89 31       	cpi	r24, 0x19	; 25
     f20:	30 f4       	brcc	.+12     	; 0xf2e <BUT_Debrief+0x50>
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 f3 02 	sts	0x02F3, r24
     f28:	08 95       	ret
	
  } 
  else comp=0;
     f2a:	10 92 f3 02 	sts	0x02F3, r1
     f2e:	08 95       	ret

00000f30 <BUT_GetKey>:
}

unsigned char BUT_GetKey(void)
{
  unsigned char key = pressedKey;
     f30:	80 91 f2 02 	lds	r24, 0x02F2
  pressedKey = KEY_NULL;
     f34:	10 92 f2 02 	sts	0x02F2, r1
  return key;
}
     f38:	08 95       	ret

00000f3a <USART_Init>:
#endif


//инициализация usart`a
void USART_Init(uint8_t regime, uint16_t baudRate)
{
     f3a:	1f 93       	push	r17
  uint16_t ubrrValue;

  uint8_t save = SREG;
     f3c:	1f b7       	in	r17, 0x3f	; 63
  cli();	
     f3e:	f8 94       	cli
	
  txBufTail = 0;
     f40:	10 92 19 03 	sts	0x0319, r1
  txBufHead = 0;
     f44:	10 92 08 03 	sts	0x0308, r1
  txCount = 0;
     f48:	10 92 07 03 	sts	0x0307, r1
  
  rxBufTail = 0;
     f4c:	10 92 f5 02 	sts	0x02F5, r1
  rxBufHead = 0;
     f50:	10 92 06 03 	sts	0x0306, r1
  rxCount = 0;
     f54:	10 92 f4 02 	sts	0x02F4, r1
  
  UCSRB = 0;
     f58:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
     f5a:	10 bc       	out	0x20, r1	; 32
     f5c:	9b 01       	movw	r18, r22
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
  
  if (regime == USART_NORMAL){
     f62:	88 23       	and	r24, r24
     f64:	41 f4       	brne	.+16     	; 0xf76 <USART_Init+0x3c>
    ubrrValue = F_CPU/(16UL*baudRate) - 1;
     f66:	94 e0       	ldi	r25, 0x04	; 4
     f68:	22 0f       	add	r18, r18
     f6a:	33 1f       	adc	r19, r19
     f6c:	44 1f       	adc	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	9a 95       	dec	r25
     f72:	d1 f7       	brne	.-12     	; 0xf68 <USART_Init+0x2e>
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <USART_Init+0x4a>
  }
  else{
    ubrrValue = F_CPU/(8UL*baudRate) - 1;
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	44 1f       	adc	r20, r20
     f7e:	55 1f       	adc	r21, r21
     f80:	8a 95       	dec	r24
     f82:	d1 f7       	brne	.-12     	; 0xf78 <USART_Init+0x3e>
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	72 e1       	ldi	r23, 0x12	; 18
     f88:	8a e7       	ldi	r24, 0x7A	; 122
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	f3 d0       	rcall	.+486    	; 0x1174 <__udivmodsi4>
     f8e:	21 50       	subi	r18, 0x01	; 1
     f90:	30 40       	sbci	r19, 0x00	; 0
  }
  
  UBRRH = (uint8_t)(ubrrValue >> 8);  
     f92:	30 bd       	out	0x20, r19	; 32
  UBRRL = (uint8_t)ubrrValue;
     f94:	29 b9       	out	0x09, r18	; 9

  UCSRA = (1<< (1 & U2X));
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	8b b9       	out	0x0b, r24	; 11
  UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме, разр приема, разр передачи.
     f9a:	88 e9       	ldi	r24, 0x98	; 152
     f9c:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разрядов
     f9e:	86 e8       	ldi	r24, 0x86	; 134
     fa0:	80 bd       	out	0x20, r24	; 32

  SREG = save;
     fa2:	1f bf       	out	0x3f, r17	; 63
}
     fa4:	1f 91       	pop	r17
     fa6:	08 95       	ret

00000fa8 <USART_PutChar>:
}

//помещает символ в буфер, инициирует начало передачи
void USART_PutChar(char sym)
{
    while(txCount == SIZE_BUF_TX);
     fa8:	90 91 07 03 	lds	r25, 0x0307
     fac:	90 31       	cpi	r25, 0x10	; 16
     fae:	e1 f3       	breq	.-8      	; 0xfa8 <USART_PutChar>
    
	cli();
     fb0:	f8 94       	cli
    if (!txCount){
     fb2:	90 91 07 03 	lds	r25, 0x0307
     fb6:	99 23       	and	r25, r25
     fb8:	09 f4       	brne	.+2      	; 0xfbc <USART_PutChar+0x14>
       UCSRB |= (1<<UDRIE);
     fba:	55 9a       	sbi	0x0a, 5	; 10
    }
    if (txCount < SIZE_BUF_TX){    //если в буфере еще есть место
     fbc:	90 91 07 03 	lds	r25, 0x0307
     fc0:	90 31       	cpi	r25, 0x10	; 16
     fc2:	b0 f4       	brcc	.+44     	; 0xff0 <USART_PutChar+0x48>
      usartTxBuf[txBufTail] = sym; //помещаем в него символ
     fc4:	e0 91 19 03 	lds	r30, 0x0319
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	e7 5f       	subi	r30, 0xF7	; 247
     fcc:	fc 4f       	sbci	r31, 0xFC	; 252
     fce:	80 83       	st	Z, r24
      txCount++;                   //инкрементируем счетчик символов
     fd0:	80 91 07 03 	lds	r24, 0x0307
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	80 93 07 03 	sts	0x0307, r24
      txBufTail++;                 //и индекс хвоста буфера
     fda:	80 91 19 03 	lds	r24, 0x0319
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	80 93 19 03 	sts	0x0319, r24
      if (txBufTail == SIZE_BUF_TX) txBufTail = 0;
     fe4:	80 91 19 03 	lds	r24, 0x0319
     fe8:	80 31       	cpi	r24, 0x10	; 16
     fea:	11 f4       	brne	.+4      	; 0xff0 <USART_PutChar+0x48>
     fec:	10 92 19 03 	sts	0x0319, r1
    }
	sei();
     ff0:	78 94       	sei
}
     ff2:	08 95       	ret

00000ff4 <USART_SendStr>:

//функция посылающая строку из озу по usart`у
void USART_SendStr(char * data)
{
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	e8 2e       	mov	r14, r24
     ffe:	e7 01       	movw	r28, r14
    1000:	7e 01       	movw	r14, r28
    1002:	f9 2e       	mov	r15, r25
    1004:	e7 01       	movw	r28, r14
  char sym;
  while(*data){
    1006:	01 c0       	rjmp	.+2      	; 0x100a <USART_SendStr+0x16>
    sym = *data++;
    USART_PutChar(sym);
    1008:	cf df       	rcall	.-98     	; 0xfa8 <USART_PutChar>

//функция посылающая строку из озу по usart`у
void USART_SendStr(char * data)
{
  char sym;
  while(*data){
    100a:	89 91       	ld	r24, Y+
    100c:	88 23       	and	r24, r24
    100e:	e1 f7       	brne	.-8      	; 0x1008 <USART_SendStr+0x14>
    sym = *data++;
    USART_PutChar(sym);
  }
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <__vector_12>:
  }
}

//обработчик прерывания 
ISR(USART_UDRE_vect) 
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	8f 93       	push	r24
    1026:	ef 93       	push	r30
    1028:	ff 93       	push	r31
  if (txCount > 0){              //если буфер не пустой
    102a:	80 91 07 03 	lds	r24, 0x0307
    102e:	88 23       	and	r24, r24
    1030:	c1 f0       	breq	.+48     	; 0x1062 <__vector_12+0x48>
    UDR = usartTxBuf[txBufHead]; //записываем в UDR символ из буфера
    1032:	e0 91 08 03 	lds	r30, 0x0308
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	e7 5f       	subi	r30, 0xF7	; 247
    103a:	fc 4f       	sbci	r31, 0xFC	; 252
    103c:	80 81       	ld	r24, Z
    103e:	8c b9       	out	0x0c, r24	; 12
    txCount--;                   //уменьшаем счетчик символов
    1040:	80 91 07 03 	lds	r24, 0x0307
    1044:	81 50       	subi	r24, 0x01	; 1
    1046:	80 93 07 03 	sts	0x0307, r24
    txBufHead++;                 //инкрементируем индекс головы буфера
    104a:	80 91 08 03 	lds	r24, 0x0308
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	80 93 08 03 	sts	0x0308, r24
    if (txBufHead == SIZE_BUF_TX) txBufHead = 0;
    1054:	80 91 08 03 	lds	r24, 0x0308
    1058:	80 31       	cpi	r24, 0x10	; 16
    105a:	21 f4       	brne	.+8      	; 0x1064 <__vector_12+0x4a>
    105c:	10 92 08 03 	sts	0x0308, r1
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <__vector_12+0x4a>
  } 
  else{
    UCSRB &= ~(1<<UDRIE);
    1062:	55 98       	cbi	0x0a, 5	; 10
  }
} 
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	8f 91       	pop	r24
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <USART_GetRxCount>:

//______________________________________________________________________________
//возвращает колличество символов находящихся в приемном буфере
uint8_t USART_GetRxCount(void)
{
  return rxCount;  
    1074:	80 91 f4 02 	lds	r24, 0x02F4
}
    1078:	08 95       	ret

0000107a <USART_GetChar>:

//чтение буфера
char USART_GetChar(void)
{
  char sym;
  if (rxCount > 0){                     //если приемный буфер не пустой  
    107a:	80 91 f4 02 	lds	r24, 0x02F4
    107e:	88 23       	and	r24, r24
    1080:	b9 f0       	breq	.+46     	; 0x10b0 <USART_GetChar+0x36>
    sym = usartRxBuf[rxBufHead];        //прочитать из него символ    
    1082:	e0 91 06 03 	lds	r30, 0x0306
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	ea 50       	subi	r30, 0x0A	; 10
    108a:	fd 4f       	sbci	r31, 0xFD	; 253
    108c:	80 81       	ld	r24, Z
    rxCount--;                          //уменьшить счетчик символов
    108e:	90 91 f4 02 	lds	r25, 0x02F4
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	90 93 f4 02 	sts	0x02F4, r25
    rxBufHead++;                        //инкрементировать индекс головы буфера  
    1098:	90 91 06 03 	lds	r25, 0x0306
    109c:	9f 5f       	subi	r25, 0xFF	; 255
    109e:	90 93 06 03 	sts	0x0306, r25
    if (rxBufHead == SIZE_BUF_RX) rxBufHead = 0;
    10a2:	90 91 06 03 	lds	r25, 0x0306
    10a6:	90 31       	cpi	r25, 0x10	; 16
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <USART_GetChar+0x38>
    10aa:	10 92 06 03 	sts	0x0306, r1
    10ae:	08 95       	ret
    return sym;                         //вернуть прочитанный символ
  }
  return 0;
    10b0:	80 e0       	ldi	r24, 0x00	; 0
}
    10b2:	08 95       	ret

000010b4 <__vector_11>:

volatile uint8_t block = 0;

//прерывание по завершению приема
ISR(USART_RXC_vect) 
{
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
    char data = UDR;
    10c6:	8c b1       	in	r24, 0x0c	; 12
    if (rxCount < SIZE_BUF_RX){                    //если в буфере еще есть место   
    10c8:	90 91 f4 02 	lds	r25, 0x02F4
    10cc:	90 31       	cpi	r25, 0x10	; 16
    10ce:	b0 f4       	brcc	.+44     	; 0x10fc <__vector_11+0x48>
      usartRxBuf[rxBufTail] = data;                //считать символ из UDR в буфер
    10d0:	e0 91 f5 02 	lds	r30, 0x02F5
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	ea 50       	subi	r30, 0x0A	; 10
    10d8:	fd 4f       	sbci	r31, 0xFD	; 253
    10da:	80 83       	st	Z, r24
      rxBufTail++;                                 //увеличить индекс хвоста приемного буфера 
    10dc:	80 91 f5 02 	lds	r24, 0x02F5
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 f5 02 	sts	0x02F5, r24
      if (rxBufTail == SIZE_BUF_RX) rxBufTail = 0;  
    10e6:	80 91 f5 02 	lds	r24, 0x02F5
    10ea:	80 31       	cpi	r24, 0x10	; 16
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__vector_11+0x3e>
    10ee:	10 92 f5 02 	sts	0x02F5, r1
      rxCount++;                                   //увеличить счетчик принятых символов
    10f2:	80 91 f4 02 	lds	r24, 0x02F4
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	80 93 f4 02 	sts	0x02F4, r24
    }
} 
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__mulsi3>:
    110e:	62 9f       	mul	r22, r18
    1110:	d0 01       	movw	r26, r0
    1112:	73 9f       	mul	r23, r19
    1114:	f0 01       	movw	r30, r0
    1116:	82 9f       	mul	r24, r18
    1118:	e0 0d       	add	r30, r0
    111a:	f1 1d       	adc	r31, r1
    111c:	64 9f       	mul	r22, r20
    111e:	e0 0d       	add	r30, r0
    1120:	f1 1d       	adc	r31, r1
    1122:	92 9f       	mul	r25, r18
    1124:	f0 0d       	add	r31, r0
    1126:	83 9f       	mul	r24, r19
    1128:	f0 0d       	add	r31, r0
    112a:	74 9f       	mul	r23, r20
    112c:	f0 0d       	add	r31, r0
    112e:	65 9f       	mul	r22, r21
    1130:	f0 0d       	add	r31, r0
    1132:	99 27       	eor	r25, r25
    1134:	72 9f       	mul	r23, r18
    1136:	b0 0d       	add	r27, r0
    1138:	e1 1d       	adc	r30, r1
    113a:	f9 1f       	adc	r31, r25
    113c:	63 9f       	mul	r22, r19
    113e:	b0 0d       	add	r27, r0
    1140:	e1 1d       	adc	r30, r1
    1142:	f9 1f       	adc	r31, r25
    1144:	bd 01       	movw	r22, r26
    1146:	cf 01       	movw	r24, r30
    1148:	11 24       	eor	r1, r1
    114a:	08 95       	ret

0000114c <__udivmodhi4>:
    114c:	aa 1b       	sub	r26, r26
    114e:	bb 1b       	sub	r27, r27
    1150:	51 e1       	ldi	r21, 0x11	; 17
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <__udivmodhi4_ep>

00001154 <__udivmodhi4_loop>:
    1154:	aa 1f       	adc	r26, r26
    1156:	bb 1f       	adc	r27, r27
    1158:	a6 17       	cp	r26, r22
    115a:	b7 07       	cpc	r27, r23
    115c:	10 f0       	brcs	.+4      	; 0x1162 <__udivmodhi4_ep>
    115e:	a6 1b       	sub	r26, r22
    1160:	b7 0b       	sbc	r27, r23

00001162 <__udivmodhi4_ep>:
    1162:	88 1f       	adc	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	5a 95       	dec	r21
    1168:	a9 f7       	brne	.-22     	; 0x1154 <__udivmodhi4_loop>
    116a:	80 95       	com	r24
    116c:	90 95       	com	r25
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	08 95       	ret

00001174 <__udivmodsi4>:
    1174:	a1 e2       	ldi	r26, 0x21	; 33
    1176:	1a 2e       	mov	r1, r26
    1178:	aa 1b       	sub	r26, r26
    117a:	bb 1b       	sub	r27, r27
    117c:	fd 01       	movw	r30, r26
    117e:	0d c0       	rjmp	.+26     	; 0x119a <__udivmodsi4_ep>

00001180 <__udivmodsi4_loop>:
    1180:	aa 1f       	adc	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	ee 1f       	adc	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	a2 17       	cp	r26, r18
    118a:	b3 07       	cpc	r27, r19
    118c:	e4 07       	cpc	r30, r20
    118e:	f5 07       	cpc	r31, r21
    1190:	20 f0       	brcs	.+8      	; 0x119a <__udivmodsi4_ep>
    1192:	a2 1b       	sub	r26, r18
    1194:	b3 0b       	sbc	r27, r19
    1196:	e4 0b       	sbc	r30, r20
    1198:	f5 0b       	sbc	r31, r21

0000119a <__udivmodsi4_ep>:
    119a:	66 1f       	adc	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	1a 94       	dec	r1
    11a4:	69 f7       	brne	.-38     	; 0x1180 <__udivmodsi4_loop>
    11a6:	60 95       	com	r22
    11a8:	70 95       	com	r23
    11aa:	80 95       	com	r24
    11ac:	90 95       	com	r25
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	bd 01       	movw	r22, r26
    11b4:	cf 01       	movw	r24, r30
    11b6:	08 95       	ret

000011b8 <__divmodsi4>:
    11b8:	97 fb       	bst	r25, 7
    11ba:	09 2e       	mov	r0, r25
    11bc:	05 26       	eor	r0, r21
    11be:	0e d0       	rcall	.+28     	; 0x11dc <__divmodsi4_neg1>
    11c0:	57 fd       	sbrc	r21, 7
    11c2:	04 d0       	rcall	.+8      	; 0x11cc <__divmodsi4_neg2>
    11c4:	d7 df       	rcall	.-82     	; 0x1174 <__udivmodsi4>
    11c6:	0a d0       	rcall	.+20     	; 0x11dc <__divmodsi4_neg1>
    11c8:	00 1c       	adc	r0, r0
    11ca:	38 f4       	brcc	.+14     	; 0x11da <__divmodsi4_exit>

000011cc <__divmodsi4_neg2>:
    11cc:	50 95       	com	r21
    11ce:	40 95       	com	r20
    11d0:	30 95       	com	r19
    11d2:	21 95       	neg	r18
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	4f 4f       	sbci	r20, 0xFF	; 255
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255

000011da <__divmodsi4_exit>:
    11da:	08 95       	ret

000011dc <__divmodsi4_neg1>:
    11dc:	f6 f7       	brtc	.-4      	; 0x11da <__divmodsi4_exit>
    11de:	90 95       	com	r25
    11e0:	80 95       	com	r24
    11e2:	70 95       	com	r23
    11e4:	61 95       	neg	r22
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	08 95       	ret

000011ee <ltoa>:
    11ee:	fa 01       	movw	r30, r20
    11f0:	cf 93       	push	r28
    11f2:	ff 93       	push	r31
    11f4:	ef 93       	push	r30
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	3c f1       	brlt	.+78     	; 0x1248 <ltoa+0x5a>
    11fa:	25 32       	cpi	r18, 0x25	; 37
    11fc:	2c f5       	brge	.+74     	; 0x1248 <ltoa+0x5a>
    11fe:	c2 2f       	mov	r28, r18
    1200:	e8 94       	clt
    1202:	ca 30       	cpi	r28, 0x0A	; 10
    1204:	49 f4       	brne	.+18     	; 0x1218 <ltoa+0x2a>
    1206:	97 fb       	bst	r25, 7
    1208:	3e f4       	brtc	.+14     	; 0x1218 <ltoa+0x2a>
    120a:	90 95       	com	r25
    120c:	80 95       	com	r24
    120e:	70 95       	com	r23
    1210:	61 95       	neg	r22
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	2c 2f       	mov	r18, r28
    121a:	33 27       	eor	r19, r19
    121c:	44 27       	eor	r20, r20
    121e:	55 27       	eor	r21, r21
    1220:	ff 93       	push	r31
    1222:	ef 93       	push	r30
    1224:	a7 df       	rcall	.-178    	; 0x1174 <__udivmodsi4>
    1226:	ef 91       	pop	r30
    1228:	ff 91       	pop	r31
    122a:	60 5d       	subi	r22, 0xD0	; 208
    122c:	6a 33       	cpi	r22, 0x3A	; 58
    122e:	0c f0       	brlt	.+2      	; 0x1232 <ltoa+0x44>
    1230:	69 5d       	subi	r22, 0xD9	; 217
    1232:	61 93       	st	Z+, r22
    1234:	b9 01       	movw	r22, r18
    1236:	ca 01       	movw	r24, r20
    1238:	60 50       	subi	r22, 0x00	; 0
    123a:	70 40       	sbci	r23, 0x00	; 0
    123c:	80 40       	sbci	r24, 0x00	; 0
    123e:	90 40       	sbci	r25, 0x00	; 0
    1240:	59 f7       	brne	.-42     	; 0x1218 <ltoa+0x2a>
    1242:	16 f4       	brtc	.+4      	; 0x1248 <ltoa+0x5a>
    1244:	cd e2       	ldi	r28, 0x2D	; 45
    1246:	c1 93       	st	Z+, r28
    1248:	10 82       	st	Z, r1
    124a:	8f 91       	pop	r24
    124c:	9f 91       	pop	r25
    124e:	cf 91       	pop	r28
    1250:	0d c0       	rjmp	.+26     	; 0x126c <strrev>

00001252 <__eerd_dword_m8>:
    1252:	a6 e1       	ldi	r26, 0x16	; 22
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	44 e0       	ldi	r20, 0x04	; 4
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	1a c0       	rjmp	.+52     	; 0x1290 <__eerd_blraw_m8>

0000125c <__eewr_dword_m8>:
    125c:	24 2f       	mov	r18, r20
    125e:	27 d0       	rcall	.+78     	; 0x12ae <__eewr_r18_m8>
    1260:	25 2f       	mov	r18, r21
    1262:	25 d0       	rcall	.+74     	; 0x12ae <__eewr_r18_m8>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <__eewr_word_m8>

00001266 <__eewr_word_m8>:
    1266:	22 d0       	rcall	.+68     	; 0x12ac <__eewr_byte_m8>
    1268:	27 2f       	mov	r18, r23
    126a:	21 c0       	rjmp	.+66     	; 0x12ae <__eewr_r18_m8>

0000126c <strrev>:
    126c:	dc 01       	movw	r26, r24
    126e:	fc 01       	movw	r30, r24
    1270:	67 2f       	mov	r22, r23
    1272:	71 91       	ld	r23, Z+
    1274:	77 23       	and	r23, r23
    1276:	e1 f7       	brne	.-8      	; 0x1270 <strrev+0x4>
    1278:	32 97       	sbiw	r30, 0x02	; 2
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <strrev+0x18>
    127c:	7c 91       	ld	r23, X
    127e:	6d 93       	st	X+, r22
    1280:	70 83       	st	Z, r23
    1282:	62 91       	ld	r22, -Z
    1284:	ae 17       	cp	r26, r30
    1286:	bf 07       	cpc	r27, r31
    1288:	c8 f3       	brcs	.-14     	; 0x127c <strrev+0x10>
    128a:	08 95       	ret

0000128c <__eerd_block_m8>:
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22

00001290 <__eerd_blraw_m8>:
    1290:	fc 01       	movw	r30, r24
    1292:	e1 99       	sbic	0x1c, 1	; 28
    1294:	fe cf       	rjmp	.-4      	; 0x1292 <__eerd_blraw_m8+0x2>
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <__eerd_blraw_m8+0x14>
    1298:	ff bb       	out	0x1f, r31	; 31
    129a:	ee bb       	out	0x1e, r30	; 30
    129c:	e0 9a       	sbi	0x1c, 0	; 28
    129e:	31 96       	adiw	r30, 0x01	; 1
    12a0:	0d b2       	in	r0, 0x1d	; 29
    12a2:	0d 92       	st	X+, r0
    12a4:	41 50       	subi	r20, 0x01	; 1
    12a6:	50 40       	sbci	r21, 0x00	; 0
    12a8:	b8 f7       	brcc	.-18     	; 0x1298 <__eerd_blraw_m8+0x8>
    12aa:	08 95       	ret

000012ac <__eewr_byte_m8>:
    12ac:	26 2f       	mov	r18, r22

000012ae <__eewr_r18_m8>:
    12ae:	e1 99       	sbic	0x1c, 1	; 28
    12b0:	fe cf       	rjmp	.-4      	; 0x12ae <__eewr_r18_m8>
    12b2:	9f bb       	out	0x1f, r25	; 31
    12b4:	8e bb       	out	0x1e, r24	; 30
    12b6:	2d bb       	out	0x1d, r18	; 29
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	e2 9a       	sbi	0x1c, 2	; 28
    12be:	e1 9a       	sbi	0x1c, 1	; 28
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	08 95       	ret

000012c6 <_exit>:
    12c6:	f8 94       	cli

000012c8 <__stop_program>:
    12c8:	ff cf       	rjmp	.-2      	; 0x12c8 <__stop_program>
