
Li-ionTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015cc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a4  00800060  000015cc  00001680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  00800304  00800304  00001924  2**0
                  ALLOC
  3 .eeprom       0000000c  00810000  00810000  00001924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d5c  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000033f  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001f0  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000004dd  00000000  00000000  00002bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000019f2  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000080d  00000000  00000000  00004a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001d4c  00000000  00000000  00005297  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000340  00000000  00000000  00006fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005db  00000000  00000000  00007324  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000dc5  00000000  00000000  000078ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000000f1  00000000  00000000  000086c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  000087b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
       4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
       6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
       8:	b7 c4       	rjmp	.+2414   	; 0x978 <__vector_4>
       a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
       c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
       e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
      10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
      12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
      14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
      16:	09 ca       	rjmp	.-3054   	; 0xfffff42a <__eeprom_end+0xff7ef41e>
      18:	bb c9       	rjmp	.-3210   	; 0xfffff390 <__eeprom_end+0xff7ef384>
      1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
      1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
      1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
      20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
      22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
      24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>

00000026 <leftArrow>:
      26:	02 04 08 10 08 04 02 00                             ........

0000002e <rightArrow>:
      2e:	08 04 02 01 02 04 08 00                             ........

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf e5       	ldi	r28, 0x5F	; 95
      3c:	d4 e0       	ldi	r29, 0x04	; 4
      3e:	de bf       	out	0x3e, r29	; 62
      40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
      42:	13 e0       	ldi	r17, 0x03	; 3
      44:	a0 e6       	ldi	r26, 0x60	; 96
      46:	b0 e0       	ldi	r27, 0x00	; 0
      48:	ec ec       	ldi	r30, 0xCC	; 204
      4a:	f5 e1       	ldi	r31, 0x15	; 21
      4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
      4e:	05 90       	lpm	r0, Z+
      50:	0d 92       	st	X+, r0
      52:	a4 30       	cpi	r26, 0x04	; 4
      54:	b1 07       	cpc	r27, r17
      56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
      58:	13 e0       	ldi	r17, 0x03	; 3
      5a:	a4 e0       	ldi	r26, 0x04	; 4
      5c:	b3 e0       	ldi	r27, 0x03	; 3
      5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
      60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
      62:	ad 37       	cpi	r26, 0x7D	; 125
      64:	b1 07       	cpc	r27, r17
      66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
      68:	af d4       	rcall	.+2398   	; 0x9c8 <main>
      6a:	ae ca       	rjmp	.-2724   	; 0xfffff5c8 <__eeprom_end+0xff7ef5bc>

0000006c <__bad_interrupt>:
      6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <PARS_Init>:
uint8_t inc = 0;
uint8_t flag = 0;

void PARS_Init(void)
{
  argc = 0;
      6e:	10 92 6c 03 	sts	0x036C, r1
  argv[0] = buf;
      72:	8d e6       	ldi	r24, 0x6D	; 109
      74:	93 e0       	ldi	r25, 0x03	; 3
      76:	90 93 69 03 	sts	0x0369, r25
      7a:	80 93 68 03 	sts	0x0368, r24
  flag = FALSE;
      7e:	10 92 05 03 	sts	0x0305, r1
  inc = 0;
      82:	10 92 04 03 	sts	0x0304, r1
}
      86:	08 95       	ret

00000088 <PARS_Parser>:

void PARS_Parser(char sym)
{
      88:	90 91 04 03 	lds	r25, 0x0304
   if (sym != '\r'){
      8c:	8d 30       	cpi	r24, 0x0D	; 13
      8e:	09 f4       	brne	.+2      	; 0x92 <PARS_Parser+0xa>
      90:	4a c0       	rjmp	.+148    	; 0x126 <PARS_Parser+0x9e>
     if (inc < SIZE_RECEIVE_BUF - 1){
      92:	9f 30       	cpi	r25, 0x0F	; 15
      94:	08 f0       	brcs	.+2      	; 0x98 <PARS_Parser+0x10>
      96:	40 c0       	rjmp	.+128    	; 0x118 <PARS_Parser+0x90>
        if (sym != ' '){
      98:	80 32       	cpi	r24, 0x20	; 32
      9a:	79 f1       	breq	.+94     	; 0xfa <PARS_Parser+0x72>
           if (!argc){
      9c:	20 91 6c 03 	lds	r18, 0x036C
      a0:	22 23       	and	r18, r18
      a2:	49 f4       	brne	.+18     	; 0xb6 <PARS_Parser+0x2e>
              argv[0] = buf;
      a4:	2d e6       	ldi	r18, 0x6D	; 109
      a6:	33 e0       	ldi	r19, 0x03	; 3
      a8:	30 93 69 03 	sts	0x0369, r19
      ac:	20 93 68 03 	sts	0x0368, r18
              argc++;  
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	20 93 6c 03 	sts	0x036C, r18
           }
          
           if (flag){
      b6:	20 91 05 03 	lds	r18, 0x0305
      ba:	22 23       	and	r18, r18
      bc:	a9 f0       	breq	.+42     	; 0xe8 <PARS_Parser+0x60>
              if (argc < AMOUNT_PAR){
      be:	40 91 6c 03 	lds	r20, 0x036C
      c2:	42 30       	cpi	r20, 0x02	; 2
      c4:	78 f4       	brcc	.+30     	; 0xe4 <PARS_Parser+0x5c>
                 argv[argc] = &buf[inc];   
      c6:	e4 2f       	mov	r30, r20
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	ee 0f       	add	r30, r30
      cc:	ff 1f       	adc	r31, r31
      ce:	e8 59       	subi	r30, 0x98	; 152
      d0:	fc 4f       	sbci	r31, 0xFC	; 252
      d2:	29 2f       	mov	r18, r25
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	23 59       	subi	r18, 0x93	; 147
      d8:	3c 4f       	sbci	r19, 0xFC	; 252
      da:	31 83       	std	Z+1, r19	; 0x01
      dc:	20 83       	st	Z, r18
                 argc++;
      de:	4f 5f       	subi	r20, 0xFF	; 255
      e0:	40 93 6c 03 	sts	0x036C, r20
              }
              flag = FALSE; 
      e4:	10 92 05 03 	sts	0x0305, r1
            }
            
            buf[inc] = sym;
      e8:	a9 2f       	mov	r26, r25
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	a3 59       	subi	r26, 0x93	; 147
      ee:	bc 4f       	sbci	r27, 0xFC	; 252
      f0:	8c 93       	st	X, r24
            inc++;
      f2:	9f 5f       	subi	r25, 0xFF	; 255
      f4:	90 93 04 03 	sts	0x0304, r25
      f8:	0f c0       	rjmp	.+30     	; 0x118 <PARS_Parser+0x90>
        }
        else{
           if (!flag){
      fa:	80 91 05 03 	lds	r24, 0x0305
      fe:	88 23       	and	r24, r24
     100:	59 f4       	brne	.+22     	; 0x118 <PARS_Parser+0x90>
              buf[inc] = 0;
     102:	a9 2f       	mov	r26, r25
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	a3 59       	subi	r26, 0x93	; 147
     108:	bc 4f       	sbci	r27, 0xFC	; 252
     10a:	1c 92       	st	X, r1
              inc++;
     10c:	9f 5f       	subi	r25, 0xFF	; 255
     10e:	90 93 04 03 	sts	0x0304, r25
              flag = TRUE;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	80 93 05 03 	sts	0x0305, r24
           }
        }
     }
     buf[inc] = 0;
     118:	e0 91 04 03 	lds	r30, 0x0304
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	e3 59       	subi	r30, 0x93	; 147
     120:	fc 4f       	sbci	r31, 0xFC	; 252
     122:	10 82       	st	Z, r1
     return;
     124:	08 95       	ret
   }
   else{
      buf[inc] = 0;
     126:	e9 2f       	mov	r30, r25
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	e3 59       	subi	r30, 0x93	; 147
     12c:	fc 4f       	sbci	r31, 0xFC	; 252
     12e:	10 82       	st	Z, r1

      if (argc){
     130:	80 91 6c 03 	lds	r24, 0x036C
     134:	88 23       	and	r24, r24
     136:	19 f0       	breq	.+6      	; 0x13e <PARS_Parser+0xb6>
         PARS_Handler(argc, argv);
     138:	68 e6       	ldi	r22, 0x68	; 104
     13a:	73 e0       	ldi	r23, 0x03	; 3
     13c:	37 d0       	rcall	.+110    	; 0x1ac <PARS_Handler>
      }
      else{
         //сюда можно что-то добавить
      }
      
      argc = 0;
     13e:	10 92 6c 03 	sts	0x036C, r1
      flag = FALSE;
     142:	10 92 05 03 	sts	0x0305, r1
      inc = 0;
     146:	10 92 04 03 	sts	0x0304, r1
     14a:	08 95       	ret

0000014c <PARS_StrToUint>:

uint16_t PARS_StrToUint(char *s)
{
   uint16_t value = 0;
  
   while(*s == '0'){
     14c:	e8 2f       	mov	r30, r24
     14e:	f9 2f       	mov	r31, r25
     150:	3e 2f       	mov	r19, r30
     152:	2f 2f       	mov	r18, r31
     154:	81 91       	ld	r24, Z+
     156:	80 33       	cpi	r24, 0x30	; 48
     158:	d9 f3       	breq	.-10     	; 0x150 <PARS_StrToUint+0x4>
     15a:	c9 01       	movw	r24, r18
     15c:	e9 2f       	mov	r30, r25
     15e:	f8 2f       	mov	r31, r24
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	11 c0       	rjmp	.+34     	; 0x188 <PARS_StrToUint+0x3c>
     s++;
   }
   
   while(*s){ 
      value += (*s - 0x30);
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	c0 97       	sbiw	r24, 0x30	; 48
     16a:	28 0f       	add	r18, r24
     16c:	39 1f       	adc	r19, r25
      s++;
      if (*s){
     16e:	80 81       	ld	r24, Z
     170:	88 23       	and	r24, r24
     172:	51 f0       	breq	.+20     	; 0x188 <PARS_StrToUint+0x3c>
         value *= 10;  
     174:	c9 01       	movw	r24, r18
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	43 e0       	ldi	r20, 0x03	; 3
     17c:	22 0f       	add	r18, r18
     17e:	33 1f       	adc	r19, r19
     180:	4a 95       	dec	r20
     182:	e1 f7       	brne	.-8      	; 0x17c <PARS_StrToUint+0x30>
     184:	28 0f       	add	r18, r24
     186:	39 1f       	adc	r19, r25
  
   while(*s == '0'){
     s++;
   }
   
   while(*s){ 
     188:	81 91       	ld	r24, Z+
     18a:	88 23       	and	r24, r24
     18c:	61 f7       	brne	.-40     	; 0x166 <PARS_StrToUint+0x1a>
         value *= 10;  
      }
   };
  
  return value;
     18e:	c9 01       	movw	r24, r18
     190:	08 95       	ret

00000192 <seconds>:
	0b00000
};

uint32_t seconds() {
  uint32_t m;
  cli();
     192:	f8 94       	cli
  m = seconds_timer2;
     194:	20 91 06 03 	lds	r18, 0x0306
     198:	30 91 07 03 	lds	r19, 0x0307
     19c:	40 91 08 03 	lds	r20, 0x0308
     1a0:	50 91 09 03 	lds	r21, 0x0309
  sei();
     1a4:	78 94       	sei
  return m;
}
     1a6:	b9 01       	movw	r22, r18
     1a8:	ca 01       	movw	r24, r20
     1aa:	08 95       	ret

000001ac <PARS_Handler>:


void PARS_Handler(uint8_t argc, char *argv[])
{
     1ac:	1f 93       	push	r17
   int_buffer = PARS_StrToUint(argv[0]);
     1ae:	fb 01       	movw	r30, r22
     1b0:	80 81       	ld	r24, Z
     1b2:	91 81       	ldd	r25, Z+1	; 0x01
     1b4:	cb df       	rcall	.-106    	; 0x14c <PARS_StrToUint>
     1b6:	90 93 25 03 	sts	0x0325, r25
     1ba:	80 93 24 03 	sts	0x0324, r24
   if(dialog_id == VOLTAGE_DIALOG){
     1be:	10 91 23 03 	lds	r17, 0x0323
     1c2:	11 30       	cpi	r17, 0x01	; 1
     1c4:	a9 f4       	brne	.+42     	; 0x1f0 <PARS_Handler+0x44>
	   
	   if (int_buffer <= VOLTAGE_MAX && int_buffer >= VOLTAGE_MIN && int_buffer%VOLTAGE_STEP == 0)
     1c6:	9c 01       	movw	r18, r24
     1c8:	24 5c       	subi	r18, 0xC4	; 196
     1ca:	39 40       	sbci	r19, 0x09	; 9
     1cc:	f3 e0       	ldi	r31, 0x03	; 3
     1ce:	29 3e       	cpi	r18, 0xE9	; 233
     1d0:	3f 07       	cpc	r19, r31
     1d2:	58 f4       	brcc	.+22     	; 0x1ea <PARS_Handler+0x3e>
     1d4:	64 e6       	ldi	r22, 0x64	; 100
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	55 d9       	rcall	.-3414   	; 0xfffff484 <__eeprom_end+0xff7ef478>
     1da:	00 97       	sbiw	r24, 0x00	; 0
     1dc:	31 f4       	brne	.+12     	; 0x1ea <PARS_Handler+0x3e>
	   {
		   USART_SendStr("OK\r\n");
     1de:	80 e6       	ldi	r24, 0x60	; 96
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	c3 d8       	rcall	.-3706   	; 0xfffff36a <__eeprom_end+0xff7ef35e>
		   value_parsed_success = true;
     1e4:	10 93 27 03 	sts	0x0327, r17
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <PARS_Handler+0x44>
	   }else{
		   USART_SendStr("Invalid value\r\n");
     1ea:	85 e6       	ldi	r24, 0x65	; 101
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	bd d8       	rcall	.-3718   	; 0xfffff36a <__eeprom_end+0xff7ef35e>
	   }
   }
   if(dialog_id == AMPERAGE_DIALOG){
     1f0:	80 91 23 03 	lds	r24, 0x0323
     1f4:	82 30       	cpi	r24, 0x02	; 2
     1f6:	d1 f4       	brne	.+52     	; 0x22c <PARS_Handler+0x80>
	   if (int_buffer <= AMPERAGE_MAX && int_buffer >= AMPERAGE_MIN && int_buffer%AMPERAGE_STEP == 0)
     1f8:	80 91 24 03 	lds	r24, 0x0324
     1fc:	90 91 25 03 	lds	r25, 0x0325
     200:	9c 01       	movw	r18, r24
     202:	24 56       	subi	r18, 0x64	; 100
     204:	30 40       	sbci	r19, 0x00	; 0
     206:	47 e0       	ldi	r20, 0x07	; 7
     208:	2d 36       	cpi	r18, 0x6D	; 109
     20a:	34 07       	cpc	r19, r20
     20c:	60 f4       	brcc	.+24     	; 0x226 <PARS_Handler+0x7a>
     20e:	64 e6       	ldi	r22, 0x64	; 100
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	38 d9       	rcall	.-3472   	; 0xfffff484 <__eeprom_end+0xff7ef478>
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	39 f4       	brne	.+14     	; 0x226 <PARS_Handler+0x7a>
	   {
		   USART_SendStr("OK\r\n");
     218:	80 e6       	ldi	r24, 0x60	; 96
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	a6 d8       	rcall	.-3764   	; 0xfffff36a <__eeprom_end+0xff7ef35e>
		   value_parsed_success = true;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 27 03 	sts	0x0327, r24
     224:	03 c0       	rjmp	.+6      	; 0x22c <PARS_Handler+0x80>
	   }else{
		   USART_SendStr("Invalid value\r\n");
     226:	85 e6       	ldi	r24, 0x65	; 101
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	9f d8       	rcall	.-3778   	; 0xfffff36a <__eeprom_end+0xff7ef35e>
	   }
   }
}
     22c:	1f 91       	pop	r17
     22e:	08 95       	ret

00000230 <t2_init>:

void t2_init(){
   TIMSK &= ~(1 << OCIE2)|(1 << TOIE2);
     230:	89 b7       	in	r24, 0x39	; 57
     232:	8f 77       	andi	r24, 0x7F	; 127
     234:	89 bf       	out	0x39, r24	; 57
   ASSR |= (1 << AS2);
     236:	82 b5       	in	r24, 0x22	; 34
     238:	88 60       	ori	r24, 0x08	; 8
     23a:	82 bd       	out	0x22, r24	; 34
   TCNT2 = 0;
     23c:	14 bc       	out	0x24, r1	; 36
   TCCR2 |= (1 << CS22)|(1 << CS20);
     23e:	85 b5       	in	r24, 0x25	; 37
     240:	85 60       	ori	r24, 0x05	; 5
     242:	85 bd       	out	0x25, r24	; 37
}
     244:	08 95       	ret

00000246 <read_adc>:


unsigned int read_adc(unsigned char adc_input)
{
  uint32_t adc_ = 0;
  ADMUX= adc_input | ADC_VREF_TYPE;
     246:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     248:	8a e1       	ldi	r24, 0x1A	; 26
     24a:	8a 95       	dec	r24
     24c:	f1 f7       	brne	.-4      	; 0x24a <read_adc+0x4>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <read_adc+0xa>
     250:	e3 e0       	ldi	r30, 0x03	; 3
}


unsigned int read_adc(unsigned char adc_input)
{
  uint32_t adc_ = 0;
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	cb 01       	movw	r24, r22
  ADMUX= adc_input | ADC_VREF_TYPE;
  _delay_us(10);
  for (char i = 0; i < ADC_READ_NUM; i++)
  {
	  ADCSRA|=(1<<ADSC);
     258:	36 9a       	sbi	0x06, 6	; 6
	  while ((ADCSRA & (1<<ADIF))==0);
     25a:	34 9b       	sbis	0x06, 4	; 6
     25c:	fe cf       	rjmp	.-4      	; 0x25a <read_adc+0x14>
	  ADCSRA|=(1<<ADIF);
     25e:	34 9a       	sbi	0x06, 4	; 6
	  adc_ += ADCW;
     260:	24 b1       	in	r18, 0x04	; 4
     262:	35 b1       	in	r19, 0x05	; 5
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	62 0f       	add	r22, r18
     26a:	73 1f       	adc	r23, r19
     26c:	84 1f       	adc	r24, r20
     26e:	95 1f       	adc	r25, r21
     270:	e1 50       	subi	r30, 0x01	; 1
unsigned int read_adc(unsigned char adc_input)
{
  uint32_t adc_ = 0;
  ADMUX= adc_input | ADC_VREF_TYPE;
  _delay_us(10);
  for (char i = 0; i < ADC_READ_NUM; i++)
     272:	91 f7       	brne	.-28     	; 0x258 <read_adc+0x12>
	  ADCSRA|=(1<<ADSC);
	  while ((ADCSRA & (1<<ADIF))==0);
	  ADCSRA|=(1<<ADIF);
	  adc_ += ADCW;
  }	  
  return adc_/ADC_READ_NUM;
     274:	23 e0       	ldi	r18, 0x03	; 3
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	17 d9       	rcall	.-3538   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
}
     27e:	c9 01       	movw	r24, r18
     280:	08 95       	ret

00000282 <printUL>:

/*
  Подзалупные функции для экономии памяти 
*/
void printUL(char i)
{
     282:	1f 93       	push	r17
    LCD_WriteData(0x30+i);
     284:	18 2f       	mov	r17, r24
     286:	10 5d       	subi	r17, 0xD0	; 208
     288:	81 2f       	mov	r24, r17
     28a:	b0 d6       	rcall	.+3424   	; 0xfec <LCD_WriteData>
    USART_PutChar(0x30+i);
     28c:	81 2f       	mov	r24, r17
     28e:	47 d8       	rcall	.-3954   	; 0xfffff31e <__eeprom_end+0xff7ef312>
}
     290:	1f 91       	pop	r17
     292:	08 95       	ret

00000294 <printUARTLCD>:
void printUARTLCD(char i, bool uart)
{
     294:	1f 93       	push	r17
     296:	df 93       	push	r29
     298:	cf 93       	push	r28
     29a:	0f 92       	push	r0
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteData(0x30+i);
     2a0:	18 2f       	mov	r17, r24
     2a2:	10 5d       	subi	r17, 0xD0	; 208
     2a4:	81 2f       	mov	r24, r17
     2a6:	69 83       	std	Y+1, r22	; 0x01
     2a8:	a1 d6       	rcall	.+3394   	; 0xfec <LCD_WriteData>
	if(uart){
     2aa:	69 81       	ldd	r22, Y+1	; 0x01
     2ac:	66 23       	and	r22, r22
     2ae:	11 f0       	breq	.+4      	; 0x2b4 <printUARTLCD+0x20>
		USART_PutChar(0x30+i);
     2b0:	81 2f       	mov	r24, r17
     2b2:	35 d8       	rcall	.-3990   	; 0xfffff31e <__eeprom_end+0xff7ef312>
	}
}
     2b4:	0f 90       	pop	r0
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	1f 91       	pop	r17
     2bc:	08 95       	ret

000002be <printITime>:
void printITime(char a, char b)
{
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	16 2f       	mov	r17, r22
    LCD_WriteData(0x30+a);
     2c4:	08 2f       	mov	r16, r24
     2c6:	00 5d       	subi	r16, 0xD0	; 208
     2c8:	80 2f       	mov	r24, r16
     2ca:	90 d6       	rcall	.+3360   	; 0xfec <LCD_WriteData>
	LCD_WriteData(0x30+b);
     2cc:	10 5d       	subi	r17, 0xD0	; 208
     2ce:	81 2f       	mov	r24, r17
     2d0:	8d d6       	rcall	.+3354   	; 0xfec <LCD_WriteData>
    USART_PutChar(0x30+a);
     2d2:	80 2f       	mov	r24, r16
     2d4:	24 d8       	rcall	.-4024   	; 0xfffff31e <__eeprom_end+0xff7ef312>
    USART_PutChar(0x30+b);
     2d6:	81 2f       	mov	r24, r17
     2d8:	22 d8       	rcall	.-4028   	; 0xfffff31e <__eeprom_end+0xff7ef312>
}
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	08 95       	ret

000002e0 <printVoltage>:
   USART_PutChar('.');
   printUL((val%1000)/100);
   printUL((val%100)/10);
}*/
void printVoltage(unsigned long val)
{
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	7b 01       	movw	r14, r22
     2f2:	8c 01       	movw	r16, r24
	V_ = (val%100000)/10000;
     2f4:	20 ea       	ldi	r18, 0xA0	; 160
     2f6:	36 e8       	ldi	r19, 0x86	; 134
     2f8:	41 e0       	ldi	r20, 0x01	; 1
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	d7 d8       	rcall	.-3666   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     2fe:	20 e1       	ldi	r18, 0x10	; 16
     300:	37 e2       	ldi	r19, 0x27	; 39
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	d2 d8       	rcall	.-3676   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     308:	20 93 26 03 	sts	0x0326, r18
	if(V_){printUL(V_);}
     30c:	22 23       	and	r18, r18
     30e:	11 f0       	breq	.+4      	; 0x314 <printVoltage+0x34>
     310:	82 2f       	mov	r24, r18
     312:	b7 df       	rcall	.-146    	; 0x282 <printUL>
	printUL((val%10000)/1000);
     314:	c8 01       	movw	r24, r16
     316:	b7 01       	movw	r22, r14
     318:	20 e1       	ldi	r18, 0x10	; 16
     31a:	37 e2       	ldi	r19, 0x27	; 39
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	c5 d8       	rcall	.-3702   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     322:	38 ee       	ldi	r19, 0xE8	; 232
     324:	a3 2e       	mov	r10, r19
     326:	33 e0       	ldi	r19, 0x03	; 3
     328:	b3 2e       	mov	r11, r19
     32a:	c1 2c       	mov	r12, r1
     32c:	d1 2c       	mov	r13, r1
     32e:	a6 01       	movw	r20, r12
     330:	95 01       	movw	r18, r10
     332:	bc d8       	rcall	.-3720   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     334:	82 2f       	mov	r24, r18
     336:	a5 df       	rcall	.-182    	; 0x282 <printUL>
	LCD_WriteData('.');
     338:	8e e2       	ldi	r24, 0x2E	; 46
     33a:	58 d6       	rcall	.+3248   	; 0xfec <LCD_WriteData>
	USART_PutChar('.');
     33c:	8e e2       	ldi	r24, 0x2E	; 46
     33e:	ef d7       	rcall	.+4062   	; 0x131e <USART_PutChar>
	printUL((val%1000)/100);
     340:	c8 01       	movw	r24, r16
     342:	b7 01       	movw	r22, r14
     344:	a6 01       	movw	r20, r12
     346:	95 01       	movw	r18, r10
     348:	b1 d8       	rcall	.-3742   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     34a:	24 e6       	ldi	r18, 0x64	; 100
     34c:	a2 2e       	mov	r10, r18
     34e:	b1 2c       	mov	r11, r1
     350:	c1 2c       	mov	r12, r1
     352:	d1 2c       	mov	r13, r1
     354:	a6 01       	movw	r20, r12
     356:	95 01       	movw	r18, r10
     358:	a9 d8       	rcall	.-3758   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     35a:	82 2f       	mov	r24, r18
     35c:	92 df       	rcall	.-220    	; 0x282 <printUL>
	if(!V_){
     35e:	80 91 26 03 	lds	r24, 0x0326
     362:	88 23       	and	r24, r24
     364:	61 f4       	brne	.+24     	; 0x37e <printVoltage+0x9e>
	 printUL((val%100)/10);
     366:	c8 01       	movw	r24, r16
     368:	b7 01       	movw	r22, r14
     36a:	a6 01       	movw	r20, r12
     36c:	95 01       	movw	r18, r10
     36e:	9e d8       	rcall	.-3780   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     370:	2a e0       	ldi	r18, 0x0A	; 10
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	99 d8       	rcall	.-3790   	; 0xfffff4ac <__eeprom_end+0xff7ef4a0>
     37a:	82 2f       	mov	r24, r18
     37c:	82 df       	rcall	.-252    	; 0x282 <printUL>
	}
}
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	08 95       	ret

00000390 <checkBattery>:
/* Конец долбоебизма */

void checkBattery(bool clear, bool test)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	18 2f       	mov	r17, r24
     396:	06 2f       	mov	r16, r22
   if(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(NO_BATTERY_VALUE)){
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	55 df       	rcall	.-342    	; 0x246 <read_adc>
     39c:	87 32       	cpi	r24, 0x27	; 39
     39e:	91 05       	cpc	r25, r1
     3a0:	08 f0       	brcs	.+2      	; 0x3a4 <checkBattery+0x14>
     3a2:	41 c0       	rjmp	.+130    	; 0x426 <checkBattery+0x96>
	 LCD_Clear();
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	1b d6       	rcall	.+3126   	; 0xfde <LCD_WriteCom>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a8:	8f e9       	ldi	r24, 0x9F	; 159
     3aa:	9f e0       	ldi	r25, 0x0F	; 15
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <checkBattery+0x1c>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <checkBattery+0x22>
     3b2:	00 00       	nop
     LCD_Goto(0,0);
     3b4:	80 e8       	ldi	r24, 0x80	; 128
     3b6:	13 d6       	rcall	.+3110   	; 0xfde <LCD_WriteCom>
     LCD_SendStr("Please connect");
     3b8:	85 e7       	ldi	r24, 0x75	; 117
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	50 d6       	rcall	.+3232   	; 0x105e <LCD_SendStr>
	 LCD_Goto(0,1);
     3be:	80 ec       	ldi	r24, 0xC0	; 192
     3c0:	0e d6       	rcall	.+3100   	; 0xfde <LCD_WriteCom>
	 LCD_SendStr("the battery ");
     3c2:	84 e8       	ldi	r24, 0x84	; 132
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	4b d6       	rcall	.+3222   	; 0x105e <LCD_SendStr>
	 OCR1A = 0;
     3c8:	1b bc       	out	0x2b, r1	; 43
     3ca:	1a bc       	out	0x2a, r1	; 42
	 if(test){
     3cc:	00 23       	and	r16, r16
     3ce:	21 f0       	breq	.+8      	; 0x3d8 <checkBattery+0x48>
		 //Подключение АКБ
		 PORTB &=~ (1 << PB5);
     3d0:	c5 98       	cbi	0x18, 5	; 24
		 //Включение таймера времени
		 TIMSK &= ~(1 << TOIE2);
     3d2:	89 b7       	in	r24, 0x39	; 57
     3d4:	8f 7b       	andi	r24, 0xBF	; 191
     3d6:	89 bf       	out	0x39, r24	; 57
	 }
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(NO_BATTERY_VALUE)){}
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	35 df       	rcall	.-406    	; 0x246 <read_adc>
     3dc:	87 32       	cpi	r24, 0x27	; 39
     3de:	91 05       	cpc	r25, r1
     3e0:	d8 f3       	brcs	.-10     	; 0x3d8 <checkBattery+0x48>
     if(test){
     3e2:	00 23       	and	r16, r16
     3e4:	b1 f0       	breq	.+44     	; 0x412 <checkBattery+0x82>
		 //Подключение АКБ
		 PORTB |= (1 << PB5);
     3e6:	c5 9a       	sbi	0x18, 5	; 24
		 //Включение таймера времени
		 TIMSK |= (1 << TOIE2);
     3e8:	89 b7       	in	r24, 0x39	; 57
     3ea:	80 64       	ori	r24, 0x40	; 64
     3ec:	89 bf       	out	0x39, r24	; 57
		 //PWM Calc
		 OCR1A = 40*(I_set/100)+4*(I_set/100);
     3ee:	80 91 01 03 	lds	r24, 0x0301
     3f2:	90 91 02 03 	lds	r25, 0x0302
     3f6:	64 e6       	ldi	r22, 0x64	; 100
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	44 d8       	rcall	.-3960   	; 0xfffff484 <__eeprom_end+0xff7ef478>
     3fc:	4c e2       	ldi	r20, 0x2C	; 44
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	64 9f       	mul	r22, r20
     402:	90 01       	movw	r18, r0
     404:	65 9f       	mul	r22, r21
     406:	30 0d       	add	r19, r0
     408:	74 9f       	mul	r23, r20
     40a:	30 0d       	add	r19, r0
     40c:	11 24       	eor	r1, r1
     40e:	3b bd       	out	0x2b, r19	; 43
     410:	2a bd       	out	0x2a, r18	; 42
	 }
	 if(clear) LCD_Clear();
     412:	11 23       	and	r17, r17
     414:	41 f0       	breq	.+16     	; 0x426 <checkBattery+0x96>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	e2 d5       	rcall	.+3012   	; 0xfde <LCD_WriteCom>
     41a:	8f e9       	ldi	r24, 0x9F	; 159
     41c:	9f e0       	ldi	r25, 0x0F	; 15
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <checkBattery+0x8e>
     422:	00 c0       	rjmp	.+0      	; 0x424 <checkBattery+0x94>
     424:	00 00       	nop
   }
}
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <Reset_Button>:

void Reset_Button(){
	while(BUT_GetBut() != ENTER_BUTTON_ID && BUT_GetBut() == BUT_PRESSED_CODE){
     42c:	04 c0       	rjmp	.+8      	; 0x436 <Reset_Button+0xa>
		if(USART_GetChar()) break;
     42e:	e0 d7       	rcall	.+4032   	; 0x13f0 <USART_GetChar>
     430:	88 23       	and	r24, r24
     432:	39 f4       	brne	.+14     	; 0x442 <Reset_Button+0x16>
		BUT_Poll();
     434:	2a d7       	rcall	.+3668   	; 0x128a <BUT_Poll>
	 if(clear) LCD_Clear();
   }
}

void Reset_Button(){
	while(BUT_GetBut() != ENTER_BUTTON_ID && BUT_GetBut() == BUT_PRESSED_CODE){
     436:	df d6       	rcall	.+3518   	; 0x11f6 <BUT_GetBut>
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	19 f0       	breq	.+6      	; 0x442 <Reset_Button+0x16>
     43c:	dc d6       	rcall	.+3512   	; 0x11f6 <BUT_GetBut>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	b1 f3       	breq	.-20     	; 0x42e <Reset_Button+0x2>
     442:	08 95       	ret

00000444 <checkTempPotection>:
		BUT_Poll();
	}
}

void checkTempPotection(){
	if(read_adc(5) >= BATTERY_CRITICAL_TEMP_VALUE){
     444:	85 e0       	ldi	r24, 0x05	; 5
     446:	ff de       	rcall	.-514    	; 0x246 <read_adc>
     448:	23 e0       	ldi	r18, 0x03	; 3
     44a:	83 35       	cpi	r24, 0x53	; 83
     44c:	92 07       	cpc	r25, r18
     44e:	50 f1       	brcs	.+84     	; 0x4a4 <__stack+0x45>
		 LCD_Clear();
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	c5 d5       	rcall	.+2954   	; 0xfde <LCD_WriteCom>
     454:	8f e9       	ldi	r24, 0x9F	; 159
     456:	9f e0       	ldi	r25, 0x0F	; 15
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <checkTempPotection+0x14>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <checkTempPotection+0x1a>
     45e:	00 00       	nop
		 LCD_Goto(0,0);
     460:	80 e8       	ldi	r24, 0x80	; 128
     462:	bd d5       	rcall	.+2938   	; 0xfde <LCD_WriteCom>
		 LCD_SendStr("High temperature");
     464:	81 e9       	ldi	r24, 0x91	; 145
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	fa d5       	rcall	.+3060   	; 0x105e <LCD_SendStr>
		 LCD_Goto(1,1);
     46a:	81 ec       	ldi	r24, 0xC1	; 193
     46c:	b8 d5       	rcall	.+2928   	; 0xfde <LCD_WriteCom>
		 LCD_SendStr("Enter - reboot");
     46e:	82 ea       	ldi	r24, 0xA2	; 162
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	f5 d5       	rcall	.+3050   	; 0x105e <LCD_SendStr>
		 USART_SendStr("Critical temperarure!!! Test Stopped\r\n");
     474:	81 eb       	ldi	r24, 0xB1	; 177
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	78 d7       	rcall	.+3824   	; 0x136a <USART_SendStr>
	     cli();
     47a:	f8 94       	cli
	     OCR1A = 0;
     47c:	1b bc       	out	0x2b, r1	; 43
     47e:	1a bc       	out	0x2a, r1	; 42
         PORTB &= ~(1 << PB5);
     480:	c5 98       	cbi	0x18, 5	; 24
         TCCR1B &= ~(1 << CS11);	
     482:	8e b5       	in	r24, 0x2e	; 46
     484:	8d 7f       	andi	r24, 0xFD	; 253
     486:	8e bd       	out	0x2e, r24	; 46
         Reset_Button();
     488:	d1 df       	rcall	.-94     	; 0x42c <Reset_Button>
         USART_SendStr("Rebooting\r\n");
     48a:	88 ed       	ldi	r24, 0xD8	; 216
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	6d d7       	rcall	.+3802   	; 0x136a <USART_SendStr>
         soft_reset();
     490:	28 e0       	ldi	r18, 0x08	; 8
     492:	88 e1       	ldi	r24, 0x18	; 24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	a8 95       	wdr
     49c:	81 bd       	out	0x21, r24	; 33
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	21 bd       	out	0x21, r18	; 33
     4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stack+0x43>
     4a4:	08 95       	ret

000004a6 <printCapacity>:
    }
}

void printCapacity(unsigned long Capacity, bool mode, bool uart){
     4a6:	4f 92       	push	r4
     4a8:	5f 92       	push	r5
     4aa:	6f 92       	push	r6
     4ac:	7f 92       	push	r7
     4ae:	8f 92       	push	r8
     4b0:	9f 92       	push	r9
     4b2:	af 92       	push	r10
     4b4:	bf 92       	push	r11
     4b6:	cf 92       	push	r12
     4b8:	df 92       	push	r13
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	6b 01       	movw	r12, r22
     4c4:	7c 01       	movw	r14, r24
     4c6:	04 2f       	mov	r16, r20
     4c8:	12 2f       	mov	r17, r18
	if(mode){
     4ca:	44 23       	and	r20, r20
     4cc:	39 f0       	breq	.+14     	; 0x4dc <printCapacity+0x36>
		LCD_Goto(4,1);
     4ce:	84 ec       	ldi	r24, 0xC4	; 196
     4d0:	86 d5       	rcall	.+2828   	; 0xfde <LCD_WriteCom>
		if(uart){
     4d2:	11 23       	and	r17, r17
     4d4:	19 f0       	breq	.+6      	; 0x4dc <printCapacity+0x36>
			USART_SendStr("Capacity: ");
     4d6:	84 ee       	ldi	r24, 0xE4	; 228
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	47 d7       	rcall	.+3726   	; 0x136a <USART_SendStr>
		}
	}
	
	//Десятки тыс
	printUARTLCD(Capacity/10000, uart);
     4dc:	c7 01       	movw	r24, r14
     4de:	b6 01       	movw	r22, r12
     4e0:	20 e1       	ldi	r18, 0x10	; 16
     4e2:	37 e2       	ldi	r19, 0x27	; 39
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	e1 d7       	rcall	.+4034   	; 0x14ac <__udivmodsi4>
     4ea:	2b 01       	movw	r4, r22
     4ec:	3c 01       	movw	r6, r24
     4ee:	82 2f       	mov	r24, r18
     4f0:	61 2f       	mov	r22, r17
     4f2:	d0 de       	rcall	.-608    	; 0x294 <printUARTLCD>
	//Тысячи
	printUARTLCD((Capacity%10000)/1000, uart);
     4f4:	68 ee       	ldi	r22, 0xE8	; 232
     4f6:	86 2e       	mov	r8, r22
     4f8:	63 e0       	ldi	r22, 0x03	; 3
     4fa:	96 2e       	mov	r9, r22
     4fc:	a1 2c       	mov	r10, r1
     4fe:	b1 2c       	mov	r11, r1
     500:	c3 01       	movw	r24, r6
     502:	b2 01       	movw	r22, r4
     504:	a5 01       	movw	r20, r10
     506:	94 01       	movw	r18, r8
     508:	d1 d7       	rcall	.+4002   	; 0x14ac <__udivmodsi4>
     50a:	82 2f       	mov	r24, r18
     50c:	61 2f       	mov	r22, r17
     50e:	c2 de       	rcall	.-636    	; 0x294 <printUARTLCD>
	//Сотни
	printUARTLCD((Capacity%1000)/100, uart);
     510:	c7 01       	movw	r24, r14
     512:	b6 01       	movw	r22, r12
     514:	a5 01       	movw	r20, r10
     516:	94 01       	movw	r18, r8
     518:	c9 d7       	rcall	.+3986   	; 0x14ac <__udivmodsi4>
     51a:	54 e6       	ldi	r21, 0x64	; 100
     51c:	85 2e       	mov	r8, r21
     51e:	91 2c       	mov	r9, r1
     520:	a1 2c       	mov	r10, r1
     522:	b1 2c       	mov	r11, r1
     524:	a5 01       	movw	r20, r10
     526:	94 01       	movw	r18, r8
     528:	c1 d7       	rcall	.+3970   	; 0x14ac <__udivmodsi4>
     52a:	82 2f       	mov	r24, r18
     52c:	61 2f       	mov	r22, r17
     52e:	b2 de       	rcall	.-668    	; 0x294 <printUARTLCD>
	//Десятки
	printUARTLCD((Capacity%100)/10, uart);
     530:	c7 01       	movw	r24, r14
     532:	b6 01       	movw	r22, r12
     534:	a5 01       	movw	r20, r10
     536:	94 01       	movw	r18, r8
     538:	b9 d7       	rcall	.+3954   	; 0x14ac <__udivmodsi4>
     53a:	4a e0       	ldi	r20, 0x0A	; 10
     53c:	84 2e       	mov	r8, r20
     53e:	91 2c       	mov	r9, r1
     540:	a1 2c       	mov	r10, r1
     542:	b1 2c       	mov	r11, r1
     544:	a5 01       	movw	r20, r10
     546:	94 01       	movw	r18, r8
     548:	b1 d7       	rcall	.+3938   	; 0x14ac <__udivmodsi4>
     54a:	82 2f       	mov	r24, r18
     54c:	61 2f       	mov	r22, r17
     54e:	a2 de       	rcall	.-700    	; 0x294 <printUARTLCD>
	printUARTLCD((Capacity%10), uart);
     550:	c7 01       	movw	r24, r14
     552:	b6 01       	movw	r22, r12
     554:	a5 01       	movw	r20, r10
     556:	94 01       	movw	r18, r8
     558:	a9 d7       	rcall	.+3922   	; 0x14ac <__udivmodsi4>
     55a:	86 2f       	mov	r24, r22
     55c:	61 2f       	mov	r22, r17
     55e:	9a de       	rcall	.-716    	; 0x294 <printUARTLCD>
	
	if(mode){
     560:	00 23       	and	r16, r16
     562:	41 f0       	breq	.+16     	; 0x574 <printCapacity+0xce>
		if(uart){
     564:	11 23       	and	r17, r17
     566:	19 f0       	breq	.+6      	; 0x56e <printCapacity+0xc8>
			USART_SendStr(" mAh\r\n");
     568:	8f ee       	ldi	r24, 0xEF	; 239
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	fe d6       	rcall	.+3580   	; 0x136a <USART_SendStr>
		}
		LCD_SendStr("mAh");
     56e:	86 ef       	ldi	r24, 0xF6	; 246
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	75 d5       	rcall	.+2794   	; 0x105e <LCD_SendStr>
	}
	
}
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	bf 90       	pop	r11
     582:	af 90       	pop	r10
     584:	9f 90       	pop	r9
     586:	8f 90       	pop	r8
     588:	7f 90       	pop	r7
     58a:	6f 90       	pop	r6
     58c:	5f 90       	pop	r5
     58e:	4f 90       	pop	r4
     590:	08 95       	ret

00000592 <Charge_battery>:

void Charge_battery(bool end)
{
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	1f 93       	push	r17
     59c:	18 2f       	mov	r17, r24
     
     PORTC |= (1 << PC2);
     59e:	aa 9a       	sbi	0x15, 2	; 21
	 LCD_Goto(4,0);
     5a0:	84 e8       	ldi	r24, 0x84	; 132
     5a2:	1d d5       	rcall	.+2618   	; 0xfde <LCD_WriteCom>
	 USART_SendStr("Charging\r\n");
     5a4:	8a ef       	ldi	r24, 0xFA	; 250
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	e0 d6       	rcall	.+3520   	; 0x136a <USART_SendStr>
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_TRIGGER_VALUE) && !(PINC & (1 << PC3))){
	  LCD_Goto(4,0);
	  LCD_SendStr("Charging");
	  if(end){
	   printCapacity(Capacity/3600, true, false);
     5aa:	70 e1       	ldi	r23, 0x10	; 16
     5ac:	c7 2e       	mov	r12, r23
     5ae:	7e e0       	ldi	r23, 0x0E	; 14
     5b0:	d7 2e       	mov	r13, r23
     5b2:	e1 2c       	mov	r14, r1
     5b4:	f1 2c       	mov	r15, r1
{
     
     PORTC |= (1 << PC2);
	 LCD_Goto(4,0);
	 USART_SendStr("Charging\r\n");
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_TRIGGER_VALUE) && !(PINC & (1 << PC3))){
     5b6:	1b c0       	rjmp	.+54     	; 0x5ee <Charge_battery+0x5c>
	  LCD_Goto(4,0);
     5b8:	84 e8       	ldi	r24, 0x84	; 132
     5ba:	11 d5       	rcall	.+2594   	; 0xfde <LCD_WriteCom>
	  LCD_SendStr("Charging");
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	4e d5       	rcall	.+2716   	; 0x105e <LCD_SendStr>
	  if(end){
     5c2:	11 23       	and	r17, r17
     5c4:	81 f0       	breq	.+32     	; 0x5e6 <Charge_battery+0x54>
	   printCapacity(Capacity/3600, true, false);
     5c6:	60 91 14 03 	lds	r22, 0x0314
     5ca:	70 91 15 03 	lds	r23, 0x0315
     5ce:	80 91 16 03 	lds	r24, 0x0316
     5d2:	90 91 17 03 	lds	r25, 0x0317
     5d6:	a7 01       	movw	r20, r14
     5d8:	96 01       	movw	r18, r12
     5da:	68 d7       	rcall	.+3792   	; 0x14ac <__udivmodsi4>
     5dc:	ca 01       	movw	r24, r20
     5de:	b9 01       	movw	r22, r18
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	60 df       	rcall	.-320    	; 0x4a6 <printCapacity>
	  }
	  checkBattery(true, false);
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	d2 de       	rcall	.-604    	; 0x390 <checkBattery>
	  checkTempPotection();
     5ec:	2b df       	rcall	.-426    	; 0x444 <checkTempPotection>
{
     
     PORTC |= (1 << PC2);
	 LCD_Goto(4,0);
	 USART_SendStr("Charging\r\n");
	 while(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_TRIGGER_VALUE) && !(PINC & (1 << PC3))){
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	2a de       	rcall	.-940    	; 0x246 <read_adc>
     5f2:	26 e0       	ldi	r18, 0x06	; 6
     5f4:	8e 33       	cpi	r24, 0x3E	; 62
     5f6:	92 07       	cpc	r25, r18
     5f8:	10 f4       	brcc	.+4      	; 0x5fe <Charge_battery+0x6c>
     5fa:	9b 9b       	sbis	0x13, 3	; 19
     5fc:	dd cf       	rjmp	.-70     	; 0x5b8 <Charge_battery+0x26>
	   printCapacity(Capacity/3600, true, false);
	  }
	  checkBattery(true, false);
	  checkTempPotection();
	 }
     PORTC &= ~(1 << PC2);
     5fe:	aa 98       	cbi	0x15, 2	; 21
	 if(end){
     600:	11 23       	and	r17, r17
     602:	41 f1       	breq	.+80     	; 0x654 <Charge_battery+0xc2>
         LCD_Goto(0,0);
     604:	80 e8       	ldi	r24, 0x80	; 128
     606:	eb d4       	rcall	.+2518   	; 0xfde <LCD_WriteCom>
	     LCD_SendStr("Full charged! :)");
     608:	8e e0       	ldi	r24, 0x0E	; 14
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	28 d5       	rcall	.+2640   	; 0x105e <LCD_SendStr>
	     USART_SendStr("Full charged! :)\r\n");
     60e:	8f e1       	ldi	r24, 0x1F	; 31
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	ab d6       	rcall	.+3414   	; 0x136a <USART_SendStr>
		 printCapacity(Capacity/3600, true, false);
     614:	60 91 14 03 	lds	r22, 0x0314
     618:	70 91 15 03 	lds	r23, 0x0315
     61c:	80 91 16 03 	lds	r24, 0x0316
     620:	90 91 17 03 	lds	r25, 0x0317
     624:	20 e1       	ldi	r18, 0x10	; 16
     626:	3e e0       	ldi	r19, 0x0E	; 14
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	3f d7       	rcall	.+3710   	; 0x14ac <__udivmodsi4>
     62e:	ca 01       	movw	r24, r20
     630:	b9 01       	movw	r22, r18
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	37 df       	rcall	.-402    	; 0x4a6 <printCapacity>
         Reset_Button();
     638:	f9 de       	rcall	.-526    	; 0x42c <Reset_Button>
		 USART_SendStr("Rebooting\r\n");
     63a:	88 ed       	ldi	r24, 0xD8	; 216
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	95 d6       	rcall	.+3370   	; 0x136a <USART_SendStr>
         soft_reset();
     640:	28 e0       	ldi	r18, 0x08	; 8
     642:	88 e1       	ldi	r24, 0x18	; 24
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	a8 95       	wdr
     64c:	81 bd       	out	0x21, r24	; 33
     64e:	0f be       	out	0x3f, r0	; 63
     650:	21 bd       	out	0x21, r18	; 33
     652:	ff cf       	rjmp	.-2      	; 0x652 <Charge_battery+0xc0>
	 }
}
     654:	1f 91       	pop	r17
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	08 95       	ret

00000660 <checkEndVoltage>:

void checkEndVoltage(){
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
	if (END_Voltage > Voltage) { //выключение нагрузки при достижении минимального напряжения
     668:	20 91 ff 02 	lds	r18, 0x02FF
     66c:	30 91 00 03 	lds	r19, 0x0300
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	80 91 1c 03 	lds	r24, 0x031C
     678:	90 91 1d 03 	lds	r25, 0x031D
     67c:	a0 91 1e 03 	lds	r26, 0x031E
     680:	b0 91 1f 03 	lds	r27, 0x031F
     684:	82 17       	cp	r24, r18
     686:	93 07       	cpc	r25, r19
     688:	a4 07       	cpc	r26, r20
     68a:	b5 07       	cpc	r27, r21
     68c:	08 f0       	brcs	.+2      	; 0x690 <checkEndVoltage+0x30>
     68e:	98 c0       	rjmp	.+304    	; 0x7c0 <checkEndVoltage+0x160>
		USART_SendStr("Low voltage: ");
     690:	82 e3       	ldi	r24, 0x32	; 50
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	6a d6       	rcall	.+3284   	; 0x136a <USART_SendStr>
		USART_PutChar((Voltage%10000)/1000);
     696:	60 91 1c 03 	lds	r22, 0x031C
     69a:	70 91 1d 03 	lds	r23, 0x031D
     69e:	80 91 1e 03 	lds	r24, 0x031E
     6a2:	90 91 1f 03 	lds	r25, 0x031F
     6a6:	20 e1       	ldi	r18, 0x10	; 16
     6a8:	37 e2       	ldi	r19, 0x27	; 39
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	fe d6       	rcall	.+3580   	; 0x14ac <__udivmodsi4>
     6b0:	a8 ee       	ldi	r26, 0xE8	; 232
     6b2:	ea 2e       	mov	r14, r26
     6b4:	a3 e0       	ldi	r26, 0x03	; 3
     6b6:	fa 2e       	mov	r15, r26
     6b8:	01 2d       	mov	r16, r1
     6ba:	11 2d       	mov	r17, r1
     6bc:	a8 01       	movw	r20, r16
     6be:	97 01       	movw	r18, r14
     6c0:	f5 d6       	rcall	.+3562   	; 0x14ac <__udivmodsi4>
     6c2:	82 2f       	mov	r24, r18
     6c4:	2c d6       	rcall	.+3160   	; 0x131e <USART_PutChar>
		USART_PutChar('.');
     6c6:	8e e2       	ldi	r24, 0x2E	; 46
     6c8:	2a d6       	rcall	.+3156   	; 0x131e <USART_PutChar>
		USART_PutChar((Voltage%1000)/100);
     6ca:	60 91 1c 03 	lds	r22, 0x031C
     6ce:	70 91 1d 03 	lds	r23, 0x031D
     6d2:	80 91 1e 03 	lds	r24, 0x031E
     6d6:	90 91 1f 03 	lds	r25, 0x031F
     6da:	a8 01       	movw	r20, r16
     6dc:	97 01       	movw	r18, r14
     6de:	e6 d6       	rcall	.+3532   	; 0x14ac <__udivmodsi4>
     6e0:	f4 e6       	ldi	r31, 0x64	; 100
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f1 2c       	mov	r15, r1
     6e6:	01 2d       	mov	r16, r1
     6e8:	11 2d       	mov	r17, r1
     6ea:	a8 01       	movw	r20, r16
     6ec:	97 01       	movw	r18, r14
     6ee:	de d6       	rcall	.+3516   	; 0x14ac <__udivmodsi4>
     6f0:	82 2f       	mov	r24, r18
     6f2:	15 d6       	rcall	.+3114   	; 0x131e <USART_PutChar>
		USART_PutChar((Voltage%100)/10);
     6f4:	60 91 1c 03 	lds	r22, 0x031C
     6f8:	70 91 1d 03 	lds	r23, 0x031D
     6fc:	80 91 1e 03 	lds	r24, 0x031E
     700:	90 91 1f 03 	lds	r25, 0x031F
     704:	a8 01       	movw	r20, r16
     706:	97 01       	movw	r18, r14
     708:	d1 d6       	rcall	.+3490   	; 0x14ac <__udivmodsi4>
     70a:	2a e0       	ldi	r18, 0x0A	; 10
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	cc d6       	rcall	.+3480   	; 0x14ac <__udivmodsi4>
     714:	82 2f       	mov	r24, r18
     716:	03 d6       	rcall	.+3078   	; 0x131e <USART_PutChar>
		USART_SendStr("V\r\n");
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	26 d6       	rcall	.+3148   	; 0x136a <USART_SendStr>
		OCR1A = 0;
     71e:	1b bc       	out	0x2b, r1	; 43
     720:	1a bc       	out	0x2a, r1	; 42
		PORTB &= ~(1 << PB5);
     722:	c5 98       	cbi	0x18, 5	; 24
		TIMSK &= ~(1 << OCIE2)|(1 << TOIE2);
     724:	89 b7       	in	r24, 0x39	; 57
     726:	8f 77       	andi	r24, 0x7F	; 127
     728:	89 bf       	out	0x39, r24	; 57

		LCD_Clear();
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	58 d4       	rcall	.+2224   	; 0xfde <LCD_WriteCom>
     72e:	8f e9       	ldi	r24, 0x9F	; 159
     730:	9f e0       	ldi	r25, 0x0F	; 15
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <checkEndVoltage+0xd2>
     736:	00 c0       	rjmp	.+0      	; 0x738 <checkEndVoltage+0xd8>
     738:	00 00       	nop
		LCD_Goto(1,0);
     73a:	81 e8       	ldi	r24, 0x81	; 129
     73c:	50 d4       	rcall	.+2208   	; 0xfde <LCD_WriteCom>
		LCD_SendStr("Test completed");
     73e:	84 e4       	ldi	r24, 0x44	; 68
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	8d d4       	rcall	.+2330   	; 0x105e <LCD_SendStr>
		USART_SendStr("Test completed\r\n");
     744:	83 e5       	ldi	r24, 0x53	; 83
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	10 d6       	rcall	.+3104   	; 0x136a <USART_SendStr>
		
		//Вывод емкости
		printCapacity(Capacity/3600, true, true);
     74a:	60 91 14 03 	lds	r22, 0x0314
     74e:	70 91 15 03 	lds	r23, 0x0315
     752:	80 91 16 03 	lds	r24, 0x0316
     756:	90 91 17 03 	lds	r25, 0x0317
     75a:	e0 e1       	ldi	r30, 0x10	; 16
     75c:	ee 2e       	mov	r14, r30
     75e:	ee e0       	ldi	r30, 0x0E	; 14
     760:	fe 2e       	mov	r15, r30
     762:	01 2d       	mov	r16, r1
     764:	11 2d       	mov	r17, r1
     766:	a8 01       	movw	r20, r16
     768:	97 01       	movw	r18, r14
     76a:	a0 d6       	rcall	.+3392   	; 0x14ac <__udivmodsi4>
     76c:	ca 01       	movw	r24, r20
     76e:	b9 01       	movw	r22, r18
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	98 de       	rcall	.-720    	; 0x4a6 <printCapacity>

		eeprom_write_dword(&eeLastCapacity, Capacity/3600);
     776:	60 91 14 03 	lds	r22, 0x0314
     77a:	70 91 15 03 	lds	r23, 0x0315
     77e:	80 91 16 03 	lds	r24, 0x0316
     782:	90 91 17 03 	lds	r25, 0x0317
     786:	a8 01       	movw	r20, r16
     788:	97 01       	movw	r18, r14
     78a:	90 d6       	rcall	.+3360   	; 0x14ac <__udivmodsi4>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	ba 01       	movw	r22, r20
     792:	a9 01       	movw	r20, r18
     794:	e4 d6       	rcall	.+3528   	; 0x155e <__eewr_dword_m8>
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	99 e6       	ldi	r25, 0x69	; 105
     79a:	a8 e1       	ldi	r26, 0x18	; 24
     79c:	81 50       	subi	r24, 0x01	; 1
     79e:	90 40       	sbci	r25, 0x00	; 0
     7a0:	a0 40       	sbci	r26, 0x00	; 0
     7a2:	e1 f7       	brne	.-8      	; 0x79c <checkEndVoltage+0x13c>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <checkEndVoltage+0x146>
     7a6:	00 00       	nop

		_delay_ms(1000);

		LCD_Goto(0,0);
     7a8:	80 e8       	ldi	r24, 0x80	; 128
     7aa:	19 d4       	rcall	.+2098   	; 0xfde <LCD_WriteCom>
		LCD_SendStr("    ");
     7ac:	84 e6       	ldi	r24, 0x64	; 100
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	56 d4       	rcall	.+2220   	; 0x105e <LCD_SendStr>
		LCD_Goto(12,0);
     7b2:	8c e8       	ldi	r24, 0x8C	; 140
     7b4:	14 d4       	rcall	.+2088   	; 0xfde <LCD_WriteCom>
		LCD_SendStr("    ");
     7b6:	84 e6       	ldi	r24, 0x64	; 100
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	51 d4       	rcall	.+2210   	; 0x105e <LCD_SendStr>
		Charge_battery(true);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	e9 de       	rcall	.-558    	; 0x592 <Charge_battery>
	}
}
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	08 95       	ret

000007ca <printVADialig>:

void printVADialig(unsigned long *eeprom, unsigned int step, char *start_text, unsigned int *var, unsigned int position, unsigned int min, unsigned int max, char *uart_text, char *start_value_text, char id){
     7ca:	2f 92       	push	r2
     7cc:	3f 92       	push	r3
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <printVADialig+0x26>
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	1b 01       	movw	r2, r22
     7fa:	2a 01       	movw	r4, r20
     7fc:	39 01       	movw	r6, r18
   LCD_Goto(position, 0);
     7fe:	0f 70       	andi	r16, 0x0F	; 15
     800:	80 2f       	mov	r24, r16
     802:	80 68       	ori	r24, 0x80	; 128
     804:	ec d3       	rcall	.+2008   	; 0xfde <LCD_WriteCom>
   LCD_SendStr(start_text);
     806:	c2 01       	movw	r24, r4
     808:	2a d4       	rcall	.+2132   	; 0x105e <LCD_SendStr>
   *var = eeprom_read_dword(eeprom);
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	a2 d6       	rcall	.+3396   	; 0x1554 <__eerd_dword_m8>
     810:	f3 01       	movw	r30, r6
     812:	71 83       	std	Z+1, r23	; 0x01
     814:	60 83       	st	Z, r22
   dialog_id = id;
     816:	8f 89       	ldd	r24, Y+23	; 0x17
     818:	80 93 23 03 	sts	0x0323, r24
   USART_SendStr(start_text);
     81c:	c2 01       	movw	r24, r4
     81e:	a5 d5       	rcall	.+2890   	; 0x136a <USART_SendStr>
   USART_SendStr("\r\n");
     820:	89 e6       	ldi	r24, 0x69	; 105
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	a2 d5       	rcall	.+2884   	; 0x136a <USART_SendStr>
   USART_SendStr(start_value_text);
     826:	c4 01       	movw	r24, r8
     828:	a0 d5       	rcall	.+2880   	; 0x136a <USART_SendStr>
   USART_PutChar(0x30+(*var/1000));
     82a:	f3 01       	movw	r30, r6
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01
     830:	08 ee       	ldi	r16, 0xE8	; 232
     832:	13 e0       	ldi	r17, 0x03	; 3
     834:	b8 01       	movw	r22, r16
     836:	26 d6       	rcall	.+3148   	; 0x1484 <__udivmodhi4>
     838:	86 2f       	mov	r24, r22
     83a:	80 5d       	subi	r24, 0xD0	; 208
     83c:	70 d5       	rcall	.+2784   	; 0x131e <USART_PutChar>
   USART_PutChar(',');
     83e:	8c e2       	ldi	r24, 0x2C	; 44
     840:	6e d5       	rcall	.+2780   	; 0x131e <USART_PutChar>
   USART_PutChar(0x30+((*var%1000)/100));
     842:	f3 01       	movw	r30, r6
     844:	80 81       	ld	r24, Z
     846:	91 81       	ldd	r25, Z+1	; 0x01
     848:	b8 01       	movw	r22, r16
     84a:	1c d6       	rcall	.+3128   	; 0x1484 <__udivmodhi4>
     84c:	64 e6       	ldi	r22, 0x64	; 100
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	19 d6       	rcall	.+3122   	; 0x1484 <__udivmodhi4>
     852:	86 2f       	mov	r24, r22
     854:	80 5d       	subi	r24, 0xD0	; 208
     856:	63 d5       	rcall	.+2758   	; 0x131e <USART_PutChar>
   USART_SendStr(uart_text);
     858:	c5 01       	movw	r24, r10
     85a:	87 d5       	rcall	.+2830   	; 0x136a <USART_SendStr>

	 LCD_Goto(5, 1);
     LCD_WriteData(1);
	 LCD_WriteData(0x30+(*var/1000));
	 LCD_WriteData(',');
	 LCD_WriteData(0x30+((*var%1000)/100)); 
     85c:	b4 e6       	ldi	r27, 0x64	; 100
     85e:	8b 2e       	mov	r8, r27
     860:	91 2c       	mov	r9, r1
   USART_PutChar(0x30+(*var/1000));
   USART_PutChar(',');
   USART_PutChar(0x30+((*var%1000)/100));
   USART_SendStr(uart_text);
   while(1){
	 i = BUT_GetBut();
     862:	c9 d4       	rcall	.+2450   	; 0x11f6 <BUT_GetBut>
     864:	80 93 20 03 	sts	0x0320, r24
	 button_event = BUT_GetBut();
     868:	c6 d4       	rcall	.+2444   	; 0x11f6 <BUT_GetBut>
     86a:	80 93 21 03 	sts	0x0321, r24
	 
	 if (USART_GetRxCount()){
     86e:	bd d5       	rcall	.+2938   	; 0x13ea <USART_GetRxCount>
     870:	88 23       	and	r24, r24
     872:	21 f0       	breq	.+8      	; 0x87c <printVADialig+0xb2>
		 one_char_buffer = USART_GetChar();
     874:	bd d5       	rcall	.+2938   	; 0x13f0 <USART_GetChar>
     876:	80 93 22 03 	sts	0x0322, r24
		 PARS_Parser(one_char_buffer);
     87a:	06 dc       	rcall	.-2036   	; 0x88 <PARS_Parser>
	 }
	 
	 if(i == PLUS_UP_ID && button_event == BUT_PRESSED_CODE && *var < max){
     87c:	80 91 20 03 	lds	r24, 0x0320
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	71 f4       	brne	.+28     	; 0x8a0 <printVADialig+0xd6>
     884:	80 91 21 03 	lds	r24, 0x0321
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	51 f4       	brne	.+20     	; 0x8a0 <printVADialig+0xd6>
     88c:	f3 01       	movw	r30, r6
     88e:	80 81       	ld	r24, Z
     890:	91 81       	ldd	r25, Z+1	; 0x01
     892:	8c 15       	cp	r24, r12
     894:	9d 05       	cpc	r25, r13
     896:	20 f4       	brcc	.+8      	; 0x8a0 <printVADialig+0xd6>
       *var += step;
     898:	82 0d       	add	r24, r2
     89a:	93 1d       	adc	r25, r3
     89c:	91 83       	std	Z+1, r25	; 0x01
     89e:	80 83       	st	Z, r24
	 }

     if(i == MINUS_DOWN_ID && button_event == BUT_PRESSED_CODE && *var > min){
     8a0:	80 91 20 03 	lds	r24, 0x0320
     8a4:	83 30       	cpi	r24, 0x03	; 3
     8a6:	71 f4       	brne	.+28     	; 0x8c4 <printVADialig+0xfa>
     8a8:	80 91 21 03 	lds	r24, 0x0321
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	51 f4       	brne	.+20     	; 0x8c4 <printVADialig+0xfa>
     8b0:	f3 01       	movw	r30, r6
     8b2:	80 81       	ld	r24, Z
     8b4:	91 81       	ldd	r25, Z+1	; 0x01
     8b6:	e8 16       	cp	r14, r24
     8b8:	f9 06       	cpc	r15, r25
     8ba:	20 f4       	brcc	.+8      	; 0x8c4 <printVADialig+0xfa>
       *var -= step;
     8bc:	82 19       	sub	r24, r2
     8be:	93 09       	sbc	r25, r3
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
	 }
     
	 if((i == ENTER_BUTTON_ID && button_event == BUT_PRESSED_CODE) || value_parsed_success){
     8c4:	80 91 20 03 	lds	r24, 0x0320
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <printVADialig+0x10a>
     8cc:	80 91 21 03 	lds	r24, 0x0321
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	21 f0       	breq	.+8      	; 0x8dc <printVADialig+0x112>
     8d4:	80 91 27 03 	lds	r24, 0x0327
     8d8:	88 23       	and	r24, r24
     8da:	91 f1       	breq	.+100    	; 0x940 <printVADialig+0x176>
	   if(value_parsed_success){
     8dc:	80 91 27 03 	lds	r24, 0x0327
     8e0:	88 23       	and	r24, r24
     8e2:	49 f0       	breq	.+18     	; 0x8f6 <printVADialig+0x12c>
		   *var = int_buffer;
     8e4:	80 91 24 03 	lds	r24, 0x0324
     8e8:	90 91 25 03 	lds	r25, 0x0325
     8ec:	f3 01       	movw	r30, r6
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
		   value_parsed_success = false;
     8f2:	10 92 27 03 	sts	0x0327, r1
	   }
       eeprom_write_dword(eeprom, *var);
     8f6:	f3 01       	movw	r30, r6
     8f8:	40 81       	ld	r20, Z
     8fa:	51 81       	ldd	r21, Z+1	; 0x01
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	2c d6       	rcall	.+3160   	; 0x155e <__eewr_dword_m8>
	   LCD_Clear();
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	6a d3       	rcall	.+1748   	; 0xfde <LCD_WriteCom>
     90a:	8f e9       	ldi	r24, 0x9F	; 159
     90c:	9f e0       	ldi	r25, 0x0F	; 15
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <printVADialig+0x144>
     912:	00 c0       	rjmp	.+0      	; 0x914 <printVADialig+0x14a>
     914:	00 00       	nop
	 LCD_WriteData(0x30+((*var%1000)/100)); 
	 LCD_WriteData(0);
	 BUT_Poll();
   } 
   
}
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	bf 90       	pop	r11
     92c:	af 90       	pop	r10
     92e:	9f 90       	pop	r9
     930:	8f 90       	pop	r8
     932:	7f 90       	pop	r7
     934:	6f 90       	pop	r6
     936:	5f 90       	pop	r5
     938:	4f 90       	pop	r4
     93a:	3f 90       	pop	r3
     93c:	2f 90       	pop	r2
     93e:	08 95       	ret
       eeprom_write_dword(eeprom, *var);
	   LCD_Clear();
	   break;
	 }

	 LCD_Goto(5, 1);
     940:	85 ec       	ldi	r24, 0xC5	; 197
     942:	4d d3       	rcall	.+1690   	; 0xfde <LCD_WriteCom>
     LCD_WriteData(1);
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	52 d3       	rcall	.+1700   	; 0xfec <LCD_WriteData>
	 LCD_WriteData(0x30+(*var/1000));
     948:	f3 01       	movw	r30, r6
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	b8 01       	movw	r22, r16
     950:	99 d5       	rcall	.+2866   	; 0x1484 <__udivmodhi4>
     952:	86 2f       	mov	r24, r22
     954:	80 5d       	subi	r24, 0xD0	; 208
     956:	4a d3       	rcall	.+1684   	; 0xfec <LCD_WriteData>
	 LCD_WriteData(',');
     958:	8c e2       	ldi	r24, 0x2C	; 44
     95a:	48 d3       	rcall	.+1680   	; 0xfec <LCD_WriteData>
	 LCD_WriteData(0x30+((*var%1000)/100)); 
     95c:	f3 01       	movw	r30, r6
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	b8 01       	movw	r22, r16
     964:	8f d5       	rcall	.+2846   	; 0x1484 <__udivmodhi4>
     966:	b4 01       	movw	r22, r8
     968:	8d d5       	rcall	.+2842   	; 0x1484 <__udivmodhi4>
     96a:	86 2f       	mov	r24, r22
     96c:	80 5d       	subi	r24, 0xD0	; 208
     96e:	3e d3       	rcall	.+1660   	; 0xfec <LCD_WriteData>
	 LCD_WriteData(0);
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	3c d3       	rcall	.+1656   	; 0xfec <LCD_WriteData>
	 BUT_Poll();
     974:	8a d4       	rcall	.+2324   	; 0x128a <BUT_Poll>
   } 
     976:	75 cf       	rjmp	.-278    	; 0x862 <printVADialig+0x98>

00000978 <__vector_4>:
   
}

ISR(TIMER2_OVF_vect)
{
     978:	1f 92       	push	r1
     97a:	0f 92       	push	r0
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	0f 92       	push	r0
     980:	11 24       	eor	r1, r1
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
	seconds_timer2++;
     98a:	80 91 06 03 	lds	r24, 0x0306
     98e:	90 91 07 03 	lds	r25, 0x0307
     992:	a0 91 08 03 	lds	r26, 0x0308
     996:	b0 91 09 03 	lds	r27, 0x0309
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	a1 1d       	adc	r26, r1
     99e:	b1 1d       	adc	r27, r1
     9a0:	80 93 06 03 	sts	0x0306, r24
     9a4:	90 93 07 03 	sts	0x0307, r25
     9a8:	a0 93 08 03 	sts	0x0308, r26
     9ac:	b0 93 09 03 	sts	0x0309, r27
	interrupt_data = true;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 0a 03 	sts	0x030A, r24
}
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <main>:

int main()
{
     9c8:	2f 92       	push	r2
     9ca:	3f 92       	push	r3
     9cc:	4f 92       	push	r4
     9ce:	5f 92       	push	r5
     9d0:	6f 92       	push	r6
     9d2:	7f 92       	push	r7
     9d4:	8f 92       	push	r8
     9d6:	9f 92       	push	r9
     9d8:	af 92       	push	r10
     9da:	bf 92       	push	r11
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <main+0x26>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <main+0x28>
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <main+0x2a>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
   BUT_Init();
     9f6:	14 d4       	rcall	.+2088   	; 0x1220 <BUT_Init>
   USART_Init(USART_DOUBLED, 9600);
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	60 e8       	ldi	r22, 0x80	; 128
     9fc:	75 e2       	ldi	r23, 0x25	; 37
     9fe:	58 d4       	rcall	.+2224   	; 0x12b0 <USART_Init>
   PARS_Init();
     a00:	36 db       	rcall	.-2452   	; 0x6e <PARS_Init>
   LCD_Init();
     a02:	fb d2       	rcall	.+1526   	; 0xffa <LCD_Init>
   t2_init();
     a04:	15 dc       	rcall	.-2006   	; 0x230 <t2_init>
   //ADC Init
   ADCSRA = (1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
     a06:	85 e8       	ldi	r24, 0x85	; 133
     a08:	86 b9       	out	0x06, r24	; 6

   USART_SendStr("Initializing...\r\n");
     a0a:	8c e6       	ldi	r24, 0x6C	; 108
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	ad d4       	rcall	.+2394   	; 0x136a <USART_SendStr>
   
   //Конфиг ножек
   DDRB |= (1 << PB1) | (1 << PB5);
     a10:	87 b3       	in	r24, 0x17	; 23
     a12:	82 62       	ori	r24, 0x22	; 34
     a14:	87 bb       	out	0x17, r24	; 23
   DDRC &= ~((1 << PC0) | (1 << PC1) | (1 << PC3) | (1 << PC5));
     a16:	84 b3       	in	r24, 0x14	; 20
     a18:	84 7d       	andi	r24, 0xD4	; 212
     a1a:	84 bb       	out	0x14, r24	; 20
   DDRC |=  ((1 << PC2) | (1 << PC4));
     a1c:	84 b3       	in	r24, 0x14	; 20
     a1e:	84 61       	ori	r24, 0x14	; 20
     a20:	84 bb       	out	0x14, r24	; 20

   LCD_SetUserChar(leftArrow, 0);
     a22:	86 e2       	ldi	r24, 0x26	; 38
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	2d d3       	rcall	.+1626   	; 0x1084 <LCD_SetUserChar>
   LCD_SetUserChar(rightArrow, 1);
     a2a:	8e e2       	ldi	r24, 0x2E	; 46
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	29 d3       	rcall	.+1618   	; 0x1084 <LCD_SetUserChar>


   USART_SendStr("Last capacity:");
     a32:	8e e7       	ldi	r24, 0x7E	; 126
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	99 d4       	rcall	.+2354   	; 0x136a <USART_SendStr>
   LastCapacity = eeprom_read_dword(&eeLastCapacity);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	8b d5       	rcall	.+2838   	; 0x1554 <__eerd_dword_m8>
     a3e:	60 93 0c 03 	sts	0x030C, r22
     a42:	70 93 0d 03 	sts	0x030D, r23
     a46:	80 93 0e 03 	sts	0x030E, r24
     a4a:	90 93 0f 03 	sts	0x030F, r25
   LCD_Goto(1,0);
     a4e:	81 e8       	ldi	r24, 0x81	; 129
     a50:	c6 d2       	rcall	.+1420   	; 0xfde <LCD_WriteCom>
   LCD_SendStr("Last capacity:");
     a52:	8e e7       	ldi	r24, 0x7E	; 126
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	03 d3       	rcall	.+1542   	; 0x105e <LCD_SendStr>
   LCD_Goto(4, 1);
     a58:	84 ec       	ldi	r24, 0xC4	; 196
     a5a:	c1 d2       	rcall	.+1410   	; 0xfde <LCD_WriteCom>
   printCapacity(LastCapacity, false, true);
     a5c:	60 91 0c 03 	lds	r22, 0x030C
     a60:	70 91 0d 03 	lds	r23, 0x030D
     a64:	80 91 0e 03 	lds	r24, 0x030E
     a68:	90 91 0f 03 	lds	r25, 0x030F
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	1a dd       	rcall	.-1484   	; 0x4a6 <printCapacity>
   LCD_SendStr("mAh");
     a72:	86 ef       	ldi	r24, 0xF6	; 246
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	f3 d2       	rcall	.+1510   	; 0x105e <LCD_SendStr>
   USART_SendStr(" mAh\r\n");
     a78:	8f ee       	ldi	r24, 0xEF	; 239
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	76 d4       	rcall	.+2284   	; 0x136a <USART_SendStr>
   PORTC |= (1 << PC4);
     a7e:	ac 9a       	sbi	0x15, 4	; 21
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	91 ee       	ldi	r25, 0xE1	; 225
     a84:	a4 e0       	ldi	r26, 0x04	; 4
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	90 40       	sbci	r25, 0x00	; 0
     a8a:	a0 40       	sbci	r26, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <main+0xbe>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <main+0xc8>
     a90:	00 00       	nop
   _delay_ms(200);
   PORTC &=~ (1 << PC4);
     a92:	ac 98       	cbi	0x15, 4	; 21
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	98 e0       	ldi	r25, 0x08	; 8
     a98:	ad e3       	ldi	r26, 0x3D	; 61
     a9a:	81 50       	subi	r24, 0x01	; 1
     a9c:	90 40       	sbci	r25, 0x00	; 0
     a9e:	a0 40       	sbci	r26, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <main+0xd2>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <main+0xdc>
     aa4:	00 00       	nop
   _delay_ms(2500);

   checkBattery(false, false);
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	72 dc       	rcall	.-1820   	; 0x390 <checkBattery>
   
   //Диалог зарядки 
   if(read_adc(VOLTAGE_MUX_CHANNEL) < CALC_ADC_VOLTAGE(CHARGE_DIALOG_VALUE)){
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	cb db       	rcall	.-2154   	; 0x246 <read_adc>
     ab0:	a6 e0       	ldi	r26, 0x06	; 6
     ab2:	82 35       	cpi	r24, 0x52	; 82
     ab4:	9a 07       	cpc	r25, r26
     ab6:	08 f0       	brcs	.+2      	; 0xaba <main+0xf2>
     ab8:	47 c0       	rjmp	.+142    	; 0xb48 <main+0x180>
	 LCD_Clear();
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 d2       	rcall	.+1312   	; 0xfde <LCD_WriteCom>
     abe:	ef e9       	ldi	r30, 0x9F	; 159
     ac0:	ff e0       	ldi	r31, 0x0F	; 15
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <main+0xfa>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <main+0x100>
     ac8:	00 00       	nop
     LCD_Goto(0,0);
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	88 d2       	rcall	.+1296   	; 0xfde <LCD_WriteCom>
     LCD_SendStr("Charge");
     ace:	8d e8       	ldi	r24, 0x8D	; 141
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	c5 d2       	rcall	.+1418   	; 0x105e <LCD_SendStr>
	 LCD_Goto(0,1);
     ad4:	80 ec       	ldi	r24, 0xC0	; 192
     ad6:	83 d2       	rcall	.+1286   	; 0xfde <LCD_WriteCom>
	 LCD_SendStr("the battery?");
     ad8:	84 e9       	ldi	r24, 0x94	; 148
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	c0 d2       	rcall	.+1408   	; 0x105e <LCD_SendStr>
	 USART_SendStr("Charge the battery? (Y/N)\r\n");
     ade:	81 ea       	ldi	r24, 0xA1	; 161
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	43 d4       	rcall	.+2182   	; 0x136a <USART_SendStr>
	 while(1){
	     i = BUT_GetBut();
     ae4:	88 d3       	rcall	.+1808   	; 0x11f6 <BUT_GetBut>
     ae6:	80 93 20 03 	sts	0x0320, r24
	     button_event = BUT_GetBut();
     aea:	85 d3       	rcall	.+1802   	; 0x11f6 <BUT_GetBut>
     aec:	80 93 21 03 	sts	0x0321, r24
		 one_char_buffer = USART_GetChar();
     af0:	7f d4       	rcall	.+2302   	; 0x13f0 <USART_GetChar>
     af2:	80 93 22 03 	sts	0x0322, r24
		 
		 if((i == PLUS_UP_ID  && button_event == BUT_PRESSED_CODE) || one_char_buffer == 'Y' || one_char_buffer == 'y'){
     af6:	90 91 20 03 	lds	r25, 0x0320
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	21 f4       	brne	.+8      	; 0xb06 <main+0x13e>
     afe:	20 91 21 03 	lds	r18, 0x0321
     b02:	21 30       	cpi	r18, 0x01	; 1
     b04:	21 f0       	breq	.+8      	; 0xb0e <main+0x146>
     b06:	89 35       	cpi	r24, 0x59	; 89
     b08:	11 f0       	breq	.+4      	; 0xb0e <main+0x146>
     b0a:	89 37       	cpi	r24, 0x79	; 121
     b0c:	21 f4       	brne	.+8      	; 0xb16 <main+0x14e>
	       charge_before = true;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 0b 03 	sts	0x030B, r24
		   break;
     b14:	11 c0       	rjmp	.+34     	; 0xb38 <main+0x170>
		 }

	     if(((i == MINUS_DOWN_ID  && button_event == BUT_PRESSED_CODE) || (i == ENTER_BUTTON_ID  && button_event == BUT_PRESSED_CODE)) || one_char_buffer == 'N' || one_char_buffer == 'n'){
     b16:	93 30       	cpi	r25, 0x03	; 3
     b18:	11 f0       	breq	.+4      	; 0xb1e <main+0x156>
     b1a:	91 30       	cpi	r25, 0x01	; 1
     b1c:	21 f4       	brne	.+8      	; 0xb26 <main+0x15e>
     b1e:	90 91 21 03 	lds	r25, 0x0321
     b22:	91 30       	cpi	r25, 0x01	; 1
     b24:	21 f0       	breq	.+8      	; 0xb2e <main+0x166>
     b26:	8e 34       	cpi	r24, 0x4E	; 78
     b28:	11 f0       	breq	.+4      	; 0xb2e <main+0x166>
     b2a:	8e 36       	cpi	r24, 0x6E	; 110
     b2c:	19 f4       	brne	.+6      	; 0xb34 <main+0x16c>
		   charge_before = false;
     b2e:	10 92 0b 03 	sts	0x030B, r1
		   break;
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <main+0x170>
		 }
         BUT_Poll();
     b34:	aa d3       	rcall	.+1876   	; 0x128a <BUT_Poll>
     }
     b36:	d6 cf       	rjmp	.-84     	; 0xae4 <main+0x11c>
     LCD_Clear();
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	51 d2       	rcall	.+1186   	; 0xfde <LCD_WriteCom>
     b3c:	8f e9       	ldi	r24, 0x9F	; 159
     b3e:	9f e0       	ldi	r25, 0x0F	; 15
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <main+0x178>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <main+0x17e>
     b46:	00 00       	nop
   }

  //Установка параметров
  printVADialig(&eeI, AMPERAGE_STEP, "Current:", &I_set, 4, AMPERAGE_MIN, AMPERAGE_MAX, "\r\nSend value 100-2000 with step 100 (or send ok):\r\n", "Default value:", AMPERAGE_DIALOG);
     b48:	0f 92       	push	r0
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	ad b7       	in	r26, 0x3d	; 61
     b4e:	be b7       	in	r27, 0x3e	; 62
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	8c 93       	st	X, r24
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	64 e6       	ldi	r22, 0x64	; 100
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	4d eb       	ldi	r20, 0xBD	; 189
     b5e:	51 e0       	ldi	r21, 0x01	; 1
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	33 e0       	ldi	r19, 0x03	; 3
     b64:	04 e0       	ldi	r16, 0x04	; 4
     b66:	10 e0       	ldi	r17, 0x00	; 0
     b68:	b4 e6       	ldi	r27, 0x64	; 100
     b6a:	eb 2e       	mov	r14, r27
     b6c:	f1 2c       	mov	r15, r1
     b6e:	a0 ed       	ldi	r26, 0xD0	; 208
     b70:	ca 2e       	mov	r12, r26
     b72:	a7 e0       	ldi	r26, 0x07	; 7
     b74:	da 2e       	mov	r13, r26
     b76:	f6 ec       	ldi	r31, 0xC6	; 198
     b78:	af 2e       	mov	r10, r31
     b7a:	f1 e0       	ldi	r31, 0x01	; 1
     b7c:	bf 2e       	mov	r11, r31
     b7e:	ea ef       	ldi	r30, 0xFA	; 250
     b80:	8e 2e       	mov	r8, r30
     b82:	e1 e0       	ldi	r30, 0x01	; 1
     b84:	9e 2e       	mov	r9, r30
     b86:	21 de       	rcall	.-958    	; 0x7ca <printVADialig>
  printVADialig(&eeEND_Voltage, VOLTAGE_STEP, "End voltage:", &END_Voltage, 2, VOLTAGE_MIN, VOLTAGE_MAX, "\r\nSend value 2500-3500 with step 100 (or send ok):\r\n", "Default value:", VOLTAGE_DIALOG);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	ed b7       	in	r30, 0x3d	; 61
     b8c:	fe b7       	in	r31, 0x3e	; 62
     b8e:	81 83       	std	Z+1, r24	; 0x01
     b90:	88 e0       	ldi	r24, 0x08	; 8
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	64 e6       	ldi	r22, 0x64	; 100
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	49 e0       	ldi	r20, 0x09	; 9
     b9a:	52 e0       	ldi	r21, 0x02	; 2
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	32 e0       	ldi	r19, 0x02	; 2
     ba0:	02 e0       	ldi	r16, 0x02	; 2
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	b4 ec       	ldi	r27, 0xC4	; 196
     ba6:	eb 2e       	mov	r14, r27
     ba8:	b9 e0       	ldi	r27, 0x09	; 9
     baa:	fb 2e       	mov	r15, r27
     bac:	ac ea       	ldi	r26, 0xAC	; 172
     bae:	ca 2e       	mov	r12, r26
     bb0:	ad e0       	ldi	r26, 0x0D	; 13
     bb2:	da 2e       	mov	r13, r26
     bb4:	f6 e1       	ldi	r31, 0x16	; 22
     bb6:	af 2e       	mov	r10, r31
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	bf 2e       	mov	r11, r31
     bbc:	06 de       	rcall	.-1012   	; 0x7ca <printVADialig>

  //Зарядка перед тестом
  if(charge_before){
     bbe:	0f 90       	pop	r0
     bc0:	80 91 0b 03 	lds	r24, 0x030B
     bc4:	88 23       	and	r24, r24
     bc6:	51 f0       	breq	.+20     	; 0xbdc <main+0x214>
     LCD_Clear();
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	09 d2       	rcall	.+1042   	; 0xfde <LCD_WriteCom>
     bcc:	8f e9       	ldi	r24, 0x9F	; 159
     bce:	9f e0       	ldi	r25, 0x0F	; 15
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <main+0x208>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <main+0x20e>
     bd6:	00 00       	nop
     Charge_battery(false);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	db dc       	rcall	.-1610   	; 0x592 <Charge_battery>
  }

   USART_SendStr("Press any key to start the test...\r\n");
     bdc:	8b e4       	ldi	r24, 0x4B	; 75
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	c4 d3       	rcall	.+1928   	; 0x136a <USART_SendStr>

   LCD_Goto(0,0);
     be2:	80 e8       	ldi	r24, 0x80	; 128
     be4:	fc d1       	rcall	.+1016   	; 0xfde <LCD_WriteCom>
   LCD_SendStr("Press start to");
     be6:	80 e7       	ldi	r24, 0x70	; 112
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	39 d2       	rcall	.+1138   	; 0x105e <LCD_SendStr>
   LCD_Goto(0,1);
     bec:	80 ec       	ldi	r24, 0xC0	; 192
     bee:	f7 d1       	rcall	.+1006   	; 0xfde <LCD_WriteCom>
   LCD_SendStr("begin the test");
     bf0:	8f e7       	ldi	r24, 0x7F	; 127
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	34 d2       	rcall	.+1128   	; 0x105e <LCD_SendStr>
   
   
   Reset_Button();
     bf6:	1a dc       	rcall	.-1996   	; 0x42c <Reset_Button>


   USART_SendStr("Starting...\r\n");
     bf8:	8e e8       	ldi	r24, 0x8E	; 142
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	b6 d3       	rcall	.+1900   	; 0x136a <USART_SendStr>
   LCD_Clear();
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	ee d1       	rcall	.+988    	; 0xfde <LCD_WriteCom>
     c02:	af e9       	ldi	r26, 0x9F	; 159
     c04:	bf e0       	ldi	r27, 0x0F	; 15
     c06:	11 97       	sbiw	r26, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <main+0x23e>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <main+0x244>
     c0c:	00 00       	nop
   
   USART_SendStr("Seconds | Voltage | Amperage | Time | mAh\r\n");
     c0e:	8c e9       	ldi	r24, 0x9C	; 156
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	ab d3       	rcall	.+1878   	; 0x136a <USART_SendStr>
  
   //ШИМ электронной нагрузки
   TCCR1A |= (1 << COM1A1);
     c14:	8f b5       	in	r24, 0x2f	; 47
     c16:	80 68       	ori	r24, 0x80	; 128
     c18:	8f bd       	out	0x2f, r24	; 47
   TCCR1A |= (1 << WGM11) | (1 << WGM10);
     c1a:	8f b5       	in	r24, 0x2f	; 47
     c1c:	83 60       	ori	r24, 0x03	; 3
     c1e:	8f bd       	out	0x2f, r24	; 47
   TCCR1B |= (1 << CS11);
     c20:	8e b5       	in	r24, 0x2e	; 46
     c22:	82 60       	ori	r24, 0x02	; 2
     c24:	8e bd       	out	0x2e, r24	; 46
   OCR1A = 40*(I_set/100)+4*(I_set/100);
     c26:	80 91 01 03 	lds	r24, 0x0301
     c2a:	90 91 02 03 	lds	r25, 0x0302
     c2e:	64 e6       	ldi	r22, 0x64	; 100
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	28 d4       	rcall	.+2128   	; 0x1484 <__udivmodhi4>
     c34:	2c e2       	ldi	r18, 0x2C	; 44
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	62 9f       	mul	r22, r18
     c3a:	c0 01       	movw	r24, r0
     c3c:	63 9f       	mul	r22, r19
     c3e:	90 0d       	add	r25, r0
     c40:	72 9f       	mul	r23, r18
     c42:	90 0d       	add	r25, r0
     c44:	11 24       	eor	r1, r1
     c46:	9b bd       	out	0x2b, r25	; 43
     c48:	8a bd       	out	0x2a, r24	; 42
   
   //Подключение АКБ
   PORTB |= (1 << PB5);
     c4a:	c5 9a       	sbi	0x18, 5	; 24
   
   //Включение таймера времени
   TIMSK |= (1 << TOIE2);
     c4c:	89 b7       	in	r24, 0x39	; 57
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	89 bf       	out	0x39, r24	; 57
   
   //Разрешение прерываний
   sei();
     c52:	78 94       	sei
		   //Измерение емкости 
		   Capacity += I;
		   
		   //Вывод секунд
		   char buffer[6];
		   ltoa((long)seconds(), buffer, 10);
     c54:	1e 01       	movw	r2, r28
     c56:	08 94       	sec
     c58:	21 1c       	adc	r2, r1
     c5a:	31 1c       	adc	r3, r1

	       USART_PutChar(' ');

	        //Вывод Тока 
	       LCD_Goto(6,0);
		   printUL(I/1000);
     c5c:	e8 ee       	ldi	r30, 0xE8	; 232
     c5e:	8e 2e       	mov	r8, r30
     c60:	e3 e0       	ldi	r30, 0x03	; 3
     c62:	9e 2e       	mov	r9, r30
     c64:	a1 2c       	mov	r10, r1
     c66:	b1 2c       	mov	r11, r1
		   LCD_WriteData('.');
		   USART_PutChar('.');
           printUL(I%1000/100);
		   USART_PutChar(0x30+(I%1000)%100/10);
     c68:	7a e0       	ldi	r23, 0x0A	; 10
     c6a:	47 2e       	mov	r4, r23
     c6c:	51 2c       	mov	r5, r1
     c6e:	61 2c       	mov	r6, r1
     c70:	71 2c       	mov	r7, r1
   //Разрешение прерываний
   sei();
   
   while(1)
   {   
	   checkBattery(true, true);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	8c db       	rcall	.-2280   	; 0x390 <checkBattery>
	   //Темапературная  защита
	   checkTempPotection();
     c78:	e5 db       	rcall	.-2102   	; 0x444 <checkTempPotection>
	   
       if(interrupt_data) {
     c7a:	80 91 0a 03 	lds	r24, 0x030A
     c7e:	88 23       	and	r24, r24
     c80:	09 f4       	brne	.+2      	; 0xc84 <main+0x2bc>
     c82:	fc c0       	rjmp	.+504    	; 0xe7c <main+0x4b4>
		   Voltage = ((read_adc(VOLTAGE_MUX_CHANNEL)*12)/4)*10;
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	df da       	rcall	.-2626   	; 0x246 <read_adc>
     c88:	9c 01       	movw	r18, r24
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	28 0f       	add	r18, r24
     c90:	39 1f       	adc	r19, r25
     c92:	3f 73       	andi	r19, 0x3F	; 63
     c94:	c9 01       	movw	r24, r18
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	43 e0       	ldi	r20, 0x03	; 3
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	4a 95       	dec	r20
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <main+0x2d4>
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	80 93 1c 03 	sts	0x031C, r24
     cb0:	90 93 1d 03 	sts	0x031D, r25
     cb4:	a0 93 1e 03 	sts	0x031E, r26
     cb8:	b0 93 1f 03 	sts	0x031F, r27
		   I = read_adc(CURRENT_MUX_CHANNEL)*10;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	c3 da       	rcall	.-2682   	; 0x246 <read_adc>
     cc0:	9c 01       	movw	r18, r24
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	13 e0       	ldi	r17, 0x03	; 3
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	1a 95       	dec	r17
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <main+0x300>
     cd0:	82 0f       	add	r24, r18
     cd2:	93 1f       	adc	r25, r19
     cd4:	9c 01       	movw	r18, r24
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	20 93 18 03 	sts	0x0318, r18
     cde:	30 93 19 03 	sts	0x0319, r19
     ce2:	40 93 1a 03 	sts	0x031A, r20
     ce6:	50 93 1b 03 	sts	0x031B, r21

		   //Измерение емкости 
		   Capacity += I;
     cea:	80 91 14 03 	lds	r24, 0x0314
     cee:	90 91 15 03 	lds	r25, 0x0315
     cf2:	a0 91 16 03 	lds	r26, 0x0316
     cf6:	b0 91 17 03 	lds	r27, 0x0317
     cfa:	82 0f       	add	r24, r18
     cfc:	93 1f       	adc	r25, r19
     cfe:	a4 1f       	adc	r26, r20
     d00:	b5 1f       	adc	r27, r21
     d02:	80 93 14 03 	sts	0x0314, r24
     d06:	90 93 15 03 	sts	0x0315, r25
     d0a:	a0 93 16 03 	sts	0x0316, r26
     d0e:	b0 93 17 03 	sts	0x0317, r27
		   
		   //Вывод секунд
		   char buffer[6];
		   ltoa((long)seconds(), buffer, 10);
     d12:	3f da       	rcall	.-2946   	; 0x192 <seconds>
     d14:	a1 01       	movw	r20, r2
     d16:	2a e0       	ldi	r18, 0x0A	; 10
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	ea d3       	rcall	.+2004   	; 0x14f0 <ltoa>
		   USART_SendStr(buffer);
     d1c:	c1 01       	movw	r24, r2
     d1e:	25 d3       	rcall	.+1610   	; 0x136a <USART_SendStr>
		   USART_PutChar(' ');
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	fd d2       	rcall	.+1530   	; 0x131e <USART_PutChar>
           
		   
		   //Вывод напряжения 
		   LCD_Goto(0,0);
     d24:	80 e8       	ldi	r24, 0x80	; 128
     d26:	5b d1       	rcall	.+694    	; 0xfde <LCD_WriteCom>
           printVoltage(Voltage);
     d28:	60 91 1c 03 	lds	r22, 0x031C
     d2c:	70 91 1d 03 	lds	r23, 0x031D
     d30:	80 91 1e 03 	lds	r24, 0x031E
     d34:	90 91 1f 03 	lds	r25, 0x031F
     d38:	d3 da       	rcall	.-2650   	; 0x2e0 <printVoltage>
		   LCD_SendStr("V");
     d3a:	88 ec       	ldi	r24, 0xC8	; 200
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	8f d1       	rcall	.+798    	; 0x105e <LCD_SendStr>

	       USART_PutChar(' ');
     d40:	80 e2       	ldi	r24, 0x20	; 32
     d42:	ed d2       	rcall	.+1498   	; 0x131e <USART_PutChar>

	        //Вывод Тока 
	       LCD_Goto(6,0);
     d44:	86 e8       	ldi	r24, 0x86	; 134
     d46:	4b d1       	rcall	.+662    	; 0xfde <LCD_WriteCom>
		   printUL(I/1000);
     d48:	60 91 18 03 	lds	r22, 0x0318
     d4c:	70 91 19 03 	lds	r23, 0x0319
     d50:	80 91 1a 03 	lds	r24, 0x031A
     d54:	90 91 1b 03 	lds	r25, 0x031B
     d58:	a5 01       	movw	r20, r10
     d5a:	94 01       	movw	r18, r8
     d5c:	a7 d3       	rcall	.+1870   	; 0x14ac <__udivmodsi4>
     d5e:	82 2f       	mov	r24, r18
     d60:	90 da       	rcall	.-2784   	; 0x282 <printUL>
		   LCD_WriteData('.');
     d62:	8e e2       	ldi	r24, 0x2E	; 46
     d64:	43 d1       	rcall	.+646    	; 0xfec <LCD_WriteData>
		   USART_PutChar('.');
     d66:	8e e2       	ldi	r24, 0x2E	; 46
     d68:	da d2       	rcall	.+1460   	; 0x131e <USART_PutChar>
           printUL(I%1000/100);
     d6a:	60 91 18 03 	lds	r22, 0x0318
     d6e:	70 91 19 03 	lds	r23, 0x0319
     d72:	80 91 1a 03 	lds	r24, 0x031A
     d76:	90 91 1b 03 	lds	r25, 0x031B
     d7a:	a5 01       	movw	r20, r10
     d7c:	94 01       	movw	r18, r8
     d7e:	96 d3       	rcall	.+1836   	; 0x14ac <__udivmodsi4>
     d80:	24 e6       	ldi	r18, 0x64	; 100
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	91 d3       	rcall	.+1826   	; 0x14ac <__udivmodsi4>
     d8a:	82 2f       	mov	r24, r18
     d8c:	7a da       	rcall	.-2828   	; 0x282 <printUL>
		   USART_PutChar(0x30+(I%1000)%100/10);
     d8e:	60 91 18 03 	lds	r22, 0x0318
     d92:	70 91 19 03 	lds	r23, 0x0319
     d96:	80 91 1a 03 	lds	r24, 0x031A
     d9a:	90 91 1b 03 	lds	r25, 0x031B
     d9e:	a5 01       	movw	r20, r10
     da0:	94 01       	movw	r18, r8
     da2:	84 d3       	rcall	.+1800   	; 0x14ac <__udivmodsi4>
     da4:	24 e6       	ldi	r18, 0x64	; 100
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	7f d3       	rcall	.+1790   	; 0x14ac <__udivmodsi4>
     dae:	a3 01       	movw	r20, r6
     db0:	92 01       	movw	r18, r4
     db2:	7c d3       	rcall	.+1784   	; 0x14ac <__udivmodsi4>
     db4:	82 2f       	mov	r24, r18
     db6:	80 5d       	subi	r24, 0xD0	; 208
     db8:	b2 d2       	rcall	.+1380   	; 0x131e <USART_PutChar>
		   LCD_SendStr("A");
     dba:	8a ec       	ldi	r24, 0xCA	; 202
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	4f d1       	rcall	.+670    	; 0x105e <LCD_SendStr>

	       USART_PutChar(' ');
     dc0:	80 e2       	ldi	r24, 0x20	; 32
     dc2:	ad d2       	rcall	.+1370   	; 0x131e <USART_PutChar>

	       //Вывод времени
		   LCD_Goto(11,0);
     dc4:	8b e8       	ldi	r24, 0x8B	; 139
     dc6:	0b d1       	rcall	.+534    	; 0xfde <LCD_WriteCom>
	       minutes = seconds()/60;
     dc8:	e4 d9       	rcall	.-3128   	; 0x192 <seconds>
     dca:	2c e3       	ldi	r18, 0x3C	; 60
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	6c d3       	rcall	.+1752   	; 0x14ac <__udivmodsi4>
     dd4:	79 01       	movw	r14, r18
     dd6:	8a 01       	movw	r16, r20
     dd8:	20 93 10 03 	sts	0x0310, r18
     ddc:	30 93 11 03 	sts	0x0311, r19
     de0:	40 93 12 03 	sts	0x0312, r20
     de4:	50 93 13 03 	sts	0x0313, r21
		   printITime((minutes/60)/10, (minutes/60)%10);
     de8:	ca 01       	movw	r24, r20
     dea:	b9 01       	movw	r22, r18
     dec:	28 e5       	ldi	r18, 0x58	; 88
     dee:	32 e0       	ldi	r19, 0x02	; 2
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	5b d3       	rcall	.+1718   	; 0x14ac <__udivmodsi4>
     df6:	d2 2e       	mov	r13, r18
     df8:	c8 01       	movw	r24, r16
     dfa:	b7 01       	movw	r22, r14
     dfc:	2c e3       	ldi	r18, 0x3C	; 60
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	53 d3       	rcall	.+1702   	; 0x14ac <__udivmodsi4>
     e06:	ca 01       	movw	r24, r20
     e08:	b9 01       	movw	r22, r18
     e0a:	a3 01       	movw	r20, r6
     e0c:	92 01       	movw	r18, r4
     e0e:	4e d3       	rcall	.+1692   	; 0x14ac <__udivmodsi4>
     e10:	8d 2d       	mov	r24, r13
     e12:	55 da       	rcall	.-2902   	; 0x2be <printITime>
		   USART_PutChar(':');
     e14:	8a e3       	ldi	r24, 0x3A	; 58
     e16:	83 d2       	rcall	.+1286   	; 0x131e <USART_PutChar>
	       LCD_WriteData(':');
     e18:	8a e3       	ldi	r24, 0x3A	; 58
     e1a:	e8 d0       	rcall	.+464    	; 0xfec <LCD_WriteData>
           printITime((minutes%60)/10, (minutes%60%10));
     e1c:	60 91 10 03 	lds	r22, 0x0310
     e20:	70 91 11 03 	lds	r23, 0x0311
     e24:	80 91 12 03 	lds	r24, 0x0312
     e28:	90 91 13 03 	lds	r25, 0x0313
     e2c:	2c e3       	ldi	r18, 0x3C	; 60
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	3b d3       	rcall	.+1654   	; 0x14ac <__udivmodsi4>
     e36:	a3 01       	movw	r20, r6
     e38:	92 01       	movw	r18, r4
     e3a:	38 d3       	rcall	.+1648   	; 0x14ac <__udivmodsi4>
     e3c:	82 2f       	mov	r24, r18
     e3e:	3f da       	rcall	.-2946   	; 0x2be <printITime>
           
	       USART_PutChar(' ');
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	6d d2       	rcall	.+1242   	; 0x131e <USART_PutChar>

	       //Вывод емкости
		   LCD_Goto(0,1);
     e44:	80 ec       	ldi	r24, 0xC0	; 192
     e46:	cb d0       	rcall	.+406    	; 0xfde <LCD_WriteCom>
	       printCapacity(Capacity/3600, false, true);
     e48:	60 91 14 03 	lds	r22, 0x0314
     e4c:	70 91 15 03 	lds	r23, 0x0315
     e50:	80 91 16 03 	lds	r24, 0x0316
     e54:	90 91 17 03 	lds	r25, 0x0317
     e58:	20 e1       	ldi	r18, 0x10	; 16
     e5a:	3e e0       	ldi	r19, 0x0E	; 14
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	25 d3       	rcall	.+1610   	; 0x14ac <__udivmodsi4>
     e62:	ca 01       	movw	r24, r20
     e64:	b9 01       	movw	r22, r18
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	1d db       	rcall	.-2502   	; 0x4a6 <printCapacity>
		   LCD_SendStr("mAh");
     e6c:	86 ef       	ldi	r24, 0xF6	; 246
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	f6 d0       	rcall	.+492    	; 0x105e <LCD_SendStr>
		   LCD_Goto(9,1);
           printWhVoltage((long)(Wh*1000), true);
		   LCD_SendStr("Wh");
		   */
		   
		   USART_SendStr("\r\n");
     e72:	89 e6       	ldi	r24, 0x69	; 105
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	79 d2       	rcall	.+1266   	; 0x136a <USART_SendStr>
		   interrupt_data = false;
     e78:	10 92 0a 03 	sts	0x030A, r1
      }
	  BUT_Poll();
     e7c:	06 d2       	rcall	.+1036   	; 0x128a <BUT_Poll>
      i = BUT_GetBut();
     e7e:	bb d1       	rcall	.+886    	; 0x11f6 <BUT_GetBut>
     e80:	80 93 20 03 	sts	0x0320, r24
      button_event = BUT_GetBut();
     e84:	b8 d1       	rcall	.+880    	; 0x11f6 <BUT_GetBut>
     e86:	80 93 21 03 	sts	0x0321, r24
      if(i == ENTER_BUTTON_ID && button_event == BUT_PRESSED_CODE){
     e8a:	90 91 20 03 	lds	r25, 0x0320
     e8e:	91 30       	cpi	r25, 0x01	; 1
     e90:	09 f0       	breq	.+2      	; 0xe94 <main+0x4cc>
     e92:	46 c0       	rjmp	.+140    	; 0xf20 <main+0x558>
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	09 f0       	breq	.+2      	; 0xe9a <main+0x4d2>
     e98:	43 c0       	rjmp	.+134    	; 0xf20 <main+0x558>
	   OCR1A = 0;
     e9a:	1b bc       	out	0x2b, r1	; 43
     e9c:	1a bc       	out	0x2a, r1	; 42
       //Подключение АКБ
	   PORTB &=~ (1 << PB5);
     e9e:	c5 98       	cbi	0x18, 5	; 24
	   //Включение таймера времени
	   TIMSK &= ~(1 << TOIE2);
     ea0:	89 b7       	in	r24, 0x39	; 57
     ea2:	8f 7b       	andi	r24, 0xBF	; 191
     ea4:	89 bf       	out	0x39, r24	; 57
	   USART_SendStr("Test suspended\r\n");
     ea6:	8c ec       	ldi	r24, 0xCC	; 204
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	5f d2       	rcall	.+1214   	; 0x136a <USART_SendStr>

	   LCD_Goto(9, 1);
     eac:	89 ec       	ldi	r24, 0xC9	; 201
     eae:	97 d0       	rcall	.+302    	; 0xfde <LCD_WriteCom>
	   LCD_SendStr("PAUSED");
     eb0:	8d ed       	ldi	r24, 0xDD	; 221
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	d4 d0       	rcall	.+424    	; 0x105e <LCD_SendStr>
       i = 0;
     eb6:	10 92 20 03 	sts	0x0320, r1
	   button_event = 0;
     eba:	10 92 21 03 	sts	0x0321, r1
	   while(i != ENTER_BUTTON_ID || button_event != BUT_PRESSED_CODE){
     ebe:	07 c0       	rjmp	.+14     	; 0xece <main+0x506>
          BUT_Poll();
     ec0:	e4 d1       	rcall	.+968    	; 0x128a <BUT_Poll>
          i = BUT_GetBut();
     ec2:	99 d1       	rcall	.+818    	; 0x11f6 <BUT_GetBut>
     ec4:	80 93 20 03 	sts	0x0320, r24
          button_event = BUT_GetBut();
     ec8:	96 d1       	rcall	.+812    	; 0x11f6 <BUT_GetBut>
     eca:	80 93 21 03 	sts	0x0321, r24

	   LCD_Goto(9, 1);
	   LCD_SendStr("PAUSED");
       i = 0;
	   button_event = 0;
	   while(i != ENTER_BUTTON_ID || button_event != BUT_PRESSED_CODE){
     ece:	80 91 20 03 	lds	r24, 0x0320
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	a9 f7       	brne	.-22     	; 0xec0 <main+0x4f8>
     ed6:	80 91 21 03 	lds	r24, 0x0321
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	89 f7       	brne	.-30     	; 0xec0 <main+0x4f8>
          BUT_Poll();
          i = BUT_GetBut();
          button_event = BUT_GetBut();
	   }
	   USART_SendStr("Initializing...\r\n");
     ede:	8c e6       	ldi	r24, 0x6C	; 108
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	43 d2       	rcall	.+1158   	; 0x136a <USART_SendStr>
	   //PWM Calc
	   OCR1A = 40*(I_set/100)+4*(I_set/100);
     ee4:	80 91 01 03 	lds	r24, 0x0301
     ee8:	90 91 02 03 	lds	r25, 0x0302
     eec:	64 e6       	ldi	r22, 0x64	; 100
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	c9 d2       	rcall	.+1426   	; 0x1484 <__udivmodhi4>
     ef2:	ec e2       	ldi	r30, 0x2C	; 44
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	6e 9f       	mul	r22, r30
     ef8:	c0 01       	movw	r24, r0
     efa:	6f 9f       	mul	r22, r31
     efc:	90 0d       	add	r25, r0
     efe:	7e 9f       	mul	r23, r30
     f00:	90 0d       	add	r25, r0
     f02:	11 24       	eor	r1, r1
     f04:	9b bd       	out	0x2b, r25	; 43
     f06:	8a bd       	out	0x2a, r24	; 42
	   
	   //Подключение АКБ
	   PORTB |= (1 << PB5);
     f08:	c5 9a       	sbi	0x18, 5	; 24
	   
	   //Включение таймера времени
	   TIMSK |= (1 << TOIE2);
     f0a:	89 b7       	in	r24, 0x39	; 57
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	89 bf       	out	0x39, r24	; 57
	   LCD_Goto(9, 1);
     f10:	89 ec       	ldi	r24, 0xC9	; 201
     f12:	65 d0       	rcall	.+202    	; 0xfde <LCD_WriteCom>
	   LCD_SendStr("      ");
     f14:	84 ee       	ldi	r24, 0xE4	; 228
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	a2 d0       	rcall	.+324    	; 0x105e <LCD_SendStr>
	   USART_SendStr("Test continued...\r\n");
     f1a:	8b ee       	ldi	r24, 0xEB	; 235
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	25 d2       	rcall	.+1098   	; 0x136a <USART_SendStr>
      } 

	  //Защита от переразряда и конец теста
	  checkEndVoltage();
     f20:	9f db       	rcall	.-2242   	; 0x660 <checkEndVoltage>
   }
     f22:	a7 ce       	rjmp	.-690    	; 0xc72 <main+0x2aa>

00000f24 <LCD_CommonFunc>:
INLINE static void LCD_CommonFunc(uint8_t data)
{
#if (LCD_BUS_4_8_BIT == 0) 
  
  uint8_t tmp; 
  tmp = (data & 0xf0);
     f24:	28 2f       	mov	r18, r24
     f26:	20 7f       	andi	r18, 0xF0	; 240
  LCD_WritePort(LCD_PORT, tmp);
     f28:	92 2f       	mov	r25, r18
     f2a:	24 ff       	sbrs	r18, 4
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <LCD_CommonFunc+0xe>
     f2e:	c0 9a       	sbi	0x18, 0	; 24
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <LCD_CommonFunc+0x10>
     f32:	c0 98       	cbi	0x18, 0	; 24
     f34:	95 ff       	sbrs	r25, 5
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <LCD_CommonFunc+0x18>
     f38:	95 9a       	sbi	0x12, 5	; 18
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <LCD_CommonFunc+0x1a>
     f3c:	95 98       	cbi	0x12, 5	; 18
     f3e:	96 ff       	sbrs	r25, 6
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <LCD_CommonFunc+0x22>
     f42:	96 9a       	sbi	0x12, 6	; 18
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <LCD_CommonFunc+0x24>
     f46:	96 98       	cbi	0x12, 6	; 18
     f48:	27 ff       	sbrs	r18, 7
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <LCD_CommonFunc+0x2c>
     f4c:	97 9a       	sbi	0x12, 7	; 18
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <LCD_CommonFunc+0x2e>
     f50:	97 98       	cbi	0x12, 7	; 18
  LCD_SetPin(LCD_EN);
     f52:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f54:	95 e0       	ldi	r25, 0x05	; 5
     f56:	9a 95       	dec	r25
     f58:	f1 f7       	brne	.-4      	; 0xf56 <LCD_CommonFunc+0x32>
     f5a:	00 00       	nop
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
     f5c:	c3 98       	cbi	0x18, 3	; 24

  data = __swap_nibbles(data); 
     f5e:	82 95       	swap	r24
  tmp = (data & 0xf0);
     f60:	80 7f       	andi	r24, 0xF0	; 240
    
  LCD_WritePort(LCD_PORT, tmp);
     f62:	98 2f       	mov	r25, r24
     f64:	84 ff       	sbrs	r24, 4
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <LCD_CommonFunc+0x48>
     f68:	c0 9a       	sbi	0x18, 0	; 24
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <LCD_CommonFunc+0x4a>
     f6c:	c0 98       	cbi	0x18, 0	; 24
     f6e:	95 ff       	sbrs	r25, 5
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <LCD_CommonFunc+0x52>
     f72:	95 9a       	sbi	0x12, 5	; 18
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <LCD_CommonFunc+0x54>
     f76:	95 98       	cbi	0x12, 5	; 18
     f78:	96 ff       	sbrs	r25, 6
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <LCD_CommonFunc+0x5c>
     f7c:	96 9a       	sbi	0x12, 6	; 18
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <LCD_CommonFunc+0x5e>
     f80:	96 98       	cbi	0x12, 6	; 18
     f82:	87 ff       	sbrs	r24, 7
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <LCD_CommonFunc+0x66>
     f86:	97 9a       	sbi	0x12, 7	; 18
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <LCD_CommonFunc+0x68>
     f8a:	97 98       	cbi	0x12, 7	; 18
  LCD_SetPin(LCD_EN);
     f8c:	c3 9a       	sbi	0x18, 3	; 24
     f8e:	85 e0       	ldi	r24, 0x05	; 5
     f90:	8a 95       	dec	r24
     f92:	f1 f7       	brne	.-4      	; 0xf90 <LCD_CommonFunc+0x6c>
     f94:	00 00       	nop
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
     f96:	c3 98       	cbi	0x18, 3	; 24
  LCD_SetPin(LCD_EN);
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
  
#endif
}
     f98:	08 95       	ret

00000f9a <LCD_WriteComInit>:
     f9a:	9a e6       	ldi	r25, 0x6A	; 106
     f9c:	9a 95       	dec	r25
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <LCD_WriteComInit+0x2>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <LCD_WriteComInit+0x8>
/*_________________________________________________________________*/

void LCD_WriteComInit(uint8_t data)
{
  delay_us(LCD_DELAY_WAIT);
  LCD_ClearPin(LCD_RS);  
     fa2:	c4 98       	cbi	0x18, 4	; 24
  
#if (LCD_BUS_4_8_BIT == 0)
  data &= 0xf0;
     fa4:	80 7f       	andi	r24, 0xF0	; 240
#endif
  
  LCD_WritePort(LCD_PORT, data);	
     fa6:	98 2f       	mov	r25, r24
     fa8:	84 ff       	sbrs	r24, 4
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <LCD_WriteComInit+0x16>
     fac:	c0 9a       	sbi	0x18, 0	; 24
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <LCD_WriteComInit+0x18>
     fb0:	c0 98       	cbi	0x18, 0	; 24
     fb2:	95 ff       	sbrs	r25, 5
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <LCD_WriteComInit+0x20>
     fb6:	95 9a       	sbi	0x12, 5	; 18
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <LCD_WriteComInit+0x22>
     fba:	95 98       	cbi	0x12, 5	; 18
     fbc:	96 ff       	sbrs	r25, 6
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <LCD_WriteComInit+0x2a>
     fc0:	96 9a       	sbi	0x12, 6	; 18
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <LCD_WriteComInit+0x2c>
     fc4:	96 98       	cbi	0x12, 6	; 18
     fc6:	87 ff       	sbrs	r24, 7
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <LCD_WriteComInit+0x34>
     fca:	97 9a       	sbi	0x12, 7	; 18
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <LCD_WriteComInit+0x36>
     fce:	97 98       	cbi	0x12, 7	; 18
  LCD_SetPin(LCD_EN);
     fd0:	c3 9a       	sbi	0x18, 3	; 24
     fd2:	85 e0       	ldi	r24, 0x05	; 5
     fd4:	8a 95       	dec	r24
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <LCD_WriteComInit+0x3a>
     fd8:	00 00       	nop
  delay_us(LCD_DELAY_STROB);
  LCD_ClearPin(LCD_EN);
     fda:	c3 98       	cbi	0x18, 3	; 24
}
     fdc:	08 95       	ret

00000fde <LCD_WriteCom>:
     fde:	9a e6       	ldi	r25, 0x6A	; 106
     fe0:	9a 95       	dec	r25
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <LCD_WriteCom+0x2>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <LCD_WriteCom+0x8>

/*функция записи команды*/
void LCD_WriteCom(uint8_t data)
{
  LCD_Wait();
  LCD_ClearPin(LCD_RS);	
     fe6:	c4 98       	cbi	0x18, 4	; 24
  LCD_CommonFunc(data);
     fe8:	9d df       	rcall	.-198    	; 0xf24 <LCD_CommonFunc>
}
     fea:	08 95       	ret

00000fec <LCD_WriteData>:
     fec:	9a e6       	ldi	r25, 0x6A	; 106
     fee:	9a 95       	dec	r25
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LCD_WriteData+0x2>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <LCD_WriteData+0x8>

/*функция записи данных*/
void LCD_WriteData(char data)
{
  LCD_Wait();
  LCD_SetPin(LCD_RS);	    
     ff4:	c4 9a       	sbi	0x18, 4	; 24
  LCD_CommonFunc(data);
     ff6:	96 df       	rcall	.-212    	; 0xf24 <LCD_CommonFunc>
}
     ff8:	08 95       	ret

00000ffa <LCD_Init>:

/*функция инициализации*/
void LCD_Init(void)
{
  LCD_DirPort(LCD_PORT, 0xff);
     ffa:	b8 9a       	sbi	0x17, 0	; 23
     ffc:	8d 9a       	sbi	0x11, 5	; 17
     ffe:	8e 9a       	sbi	0x11, 6	; 17
    1000:	8f 9a       	sbi	0x11, 7	; 17
  LCD_DirPin(LCD_RS, _OUT);
    1002:	bc 9a       	sbi	0x17, 4	; 23
  LCD_DirPin(LCD_RW, _OUT);  
  LCD_DirPin(LCD_EN, _OUT);
    1004:	bb 9a       	sbi	0x17, 3	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	99 ef       	ldi	r25, 0xF9	; 249
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	81 50       	subi	r24, 0x01	; 1
    100e:	90 40       	sbci	r25, 0x00	; 0
    1010:	a0 40       	sbci	r26, 0x00	; 0
    1012:	e1 f7       	brne	.-8      	; 0x100c <LCD_Init+0x12>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <LCD_Init+0x1c>
    1016:	00 00       	nop
  
  delay_ms(40);
  
  LCD_WriteComInit(LCD_COM_INIT_1); 
    1018:	80 e3       	ldi	r24, 0x30	; 48
    101a:	bf df       	rcall	.-130    	; 0xf9a <LCD_WriteComInit>
    101c:	af e1       	ldi	r26, 0x1F	; 31
    101e:	be e4       	ldi	r27, 0x4E	; 78
    1020:	11 97       	sbiw	r26, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <LCD_Init+0x26>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <LCD_Init+0x2c>
    1026:	00 00       	nop
  delay_ms(10);
  LCD_WriteComInit(LCD_COM_INIT_1);
    1028:	80 e3       	ldi	r24, 0x30	; 48
    102a:	b7 df       	rcall	.-146    	; 0xf9a <LCD_WriteComInit>
    102c:	8f e9       	ldi	r24, 0x9F	; 159
    102e:	9f e0       	ldi	r25, 0x0F	; 15
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <LCD_Init+0x36>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <LCD_Init+0x3c>
    1036:	00 00       	nop
  delay_ms(2);
  LCD_WriteComInit(LCD_COM_INIT_1);
    1038:	80 e3       	ldi	r24, 0x30	; 48
    103a:	af df       	rcall	.-162    	; 0xf9a <LCD_WriteComInit>
  
#if (LCD_BUS_4_8_BIT == 0) 
  LCD_WriteComInit(LCD_COM_FUNCTION_SET);
    103c:	88 e2       	ldi	r24, 0x28	; 40
    103e:	ad df       	rcall	.-166    	; 0xf9a <LCD_WriteComInit>
#endif

  LCD_WriteCom(LCD_COM_FUNCTION_SET);
    1040:	88 e2       	ldi	r24, 0x28	; 40
    1042:	cd df       	rcall	.-102    	; 0xfde <LCD_WriteCom>
  LCD_WriteCom(LCD_COM_DISPLAY_CONTR);  
    1044:	8c e0       	ldi	r24, 0x0C	; 12
    1046:	cb df       	rcall	.-106    	; 0xfde <LCD_WriteCom>
  LCD_WriteCom(LCD_CLEAR_DISPLAY);  
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	c9 df       	rcall	.-110    	; 0xfde <LCD_WriteCom>
    104c:	af e9       	ldi	r26, 0x9F	; 159
    104e:	bf e0       	ldi	r27, 0x0F	; 15
    1050:	11 97       	sbiw	r26, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <LCD_Init+0x56>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <LCD_Init+0x5c>
    1056:	00 00       	nop
  delay_ms(2);
  LCD_WriteCom(LCD_COM_ENTRY_MODE_SET); 
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	c1 df       	rcall	.-126    	; 0xfde <LCD_WriteCom>
  
}
    105c:	08 95       	ret

0000105e <LCD_SendStr>:

/*функция вывда строки из ОЗУ*/
void LCD_SendStr(char *str)
{
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	e8 2e       	mov	r14, r24
    1068:	e7 01       	movw	r28, r14
    106a:	7e 01       	movw	r14, r28
    106c:	f9 2e       	mov	r15, r25
    106e:	e7 01       	movw	r28, r14
  uint8_t data;
  while (*str){
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <LCD_SendStr+0x16>
    data =  *str++;
    LCD_WriteData(data);
    1072:	bc df       	rcall	.-136    	; 0xfec <LCD_WriteData>

/*функция вывда строки из ОЗУ*/
void LCD_SendStr(char *str)
{
  uint8_t data;
  while (*str){
    1074:	89 91       	ld	r24, Y+
    1076:	88 23       	and	r24, r24
    1078:	e1 f7       	brne	.-8      	; 0x1072 <LCD_SendStr+0x14>
    data =  *str++;
    LCD_WriteData(data);
  }
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	08 95       	ret

00001084 <LCD_SetUserChar>:
    LCD_WriteData(data);
  }
}

void LCD_SetUserChar(uint8_t const *sym, uint8_t adr)
{
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	ec 01       	movw	r28, r24
   uint8_t data;	
   uint8_t i;

   LCD_WriteCom((1<<0x06)|((adr&0x07)<<0x03));
    108e:	86 2f       	mov	r24, r22
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	87 70       	andi	r24, 0x07	; 7
    1094:	90 70       	andi	r25, 0x00	; 0
    1096:	23 e0       	ldi	r18, 0x03	; 3
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	2a 95       	dec	r18
    109e:	e1 f7       	brne	.-8      	; 0x1098 <LCD_SetUserChar+0x14>
    10a0:	80 64       	ori	r24, 0x40	; 64
    10a2:	9d df       	rcall	.-198    	; 0xfde <LCD_WriteCom>
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	10 e0       	ldi	r17, 0x00	; 0
   
   i = 0;
   while (i<8){
      data = pgm_read_byte(sym);
    10a8:	fe 01       	movw	r30, r28
    10aa:	e0 0f       	add	r30, r16
    10ac:	f1 1f       	adc	r31, r17
    10ae:	84 91       	lpm	r24, Z+
      sym++;
      LCD_WriteData(data);
    10b0:	9d df       	rcall	.-198    	; 0xfec <LCD_WriteData>
    10b2:	0f 5f       	subi	r16, 0xFF	; 255
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
   uint8_t i;

   LCD_WriteCom((1<<0x06)|((adr&0x07)<<0x03));
   
   i = 0;
   while (i<8){
    10b6:	08 30       	cpi	r16, 0x08	; 8
    10b8:	11 05       	cpc	r17, r1
    10ba:	b1 f7       	brne	.-20     	; 0x10a8 <LCD_SetUserChar+0x24>
      data = pgm_read_byte(sym);
      sym++;
      LCD_WriteData(data);
      i++;
   }    
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
    10c6:	20 91 37 03 	lds	r18, 0x0337
    10ca:	28 30       	cpi	r18, 0x08	; 8
    10cc:	78 f4       	brcc	.+30     	; 0x10ec <PutBut+0x26>
     buf[head] = but;
    10ce:	90 91 38 03 	lds	r25, 0x0338
    10d2:	e9 2f       	mov	r30, r25
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	e7 5c       	subi	r30, 0xC7	; 199
    10d8:	fc 4f       	sbci	r31, 0xFC	; 252
    10da:	80 83       	st	Z, r24
     count++;
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	20 93 37 03 	sts	0x0337, r18
     head++;
    10e2:	89 2f       	mov	r24, r25
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
    10e6:	87 70       	andi	r24, 0x07	; 7
    10e8:	80 93 38 03 	sts	0x0338, r24
    10ec:	08 95       	ret

000010ee <BUT_Check>:
}

/************************************************/

static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
{
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
    10f6:	96 2f       	mov	r25, r22
    10f8:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
    10fa:	c9 2f       	mov	r28, r25
    10fc:	d0 e0       	ldi	r29, 0x00	; 0
    10fe:	fe 01       	movw	r30, r28
    1100:	e8 5d       	subi	r30, 0xD8	; 216
    1102:	fc 4f       	sbci	r31, 0xFC	; 252
    1104:	10 81       	ld	r17, Z
  event = 0;

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
    1106:	fe 01       	movw	r30, r28
    1108:	e5 5d       	subi	r30, 0xD5	; 213
    110a:	fc 4f       	sbci	r31, 0xFC	; 252
    110c:	90 81       	ld	r25, Z
    110e:	90 93 2e 03 	sts	0x032E, r25
#endif

 countDebTmp = countDeb[i];
    1112:	fe 01       	movw	r30, r28
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	e1 5d       	subi	r30, 0xD1	; 209
    111a:	fc 4f       	sbci	r31, 0xFC	; 252
    111c:	20 81       	ld	r18, Z
    111e:	31 81       	ldd	r19, Z+1	; 0x01
    1120:	30 93 36 03 	sts	0x0336, r19
    1124:	20 93 35 03 	sts	0x0335, r18
  
 if (state){
    1128:	88 23       	and	r24, r24
    112a:	f1 f0       	breq	.+60     	; 0x1168 <BUT_Check+0x7a>
    if (countDebTmp < BUT_COUNT_MAX){
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	25 3f       	cpi	r18, 0xF5	; 245
    1130:	38 07       	cpc	r19, r24
    1132:	c0 f5       	brcc	.+112    	; 0x11a4 <BUT_Check+0xb6>
       countDebTmp++;
    1134:	2f 5f       	subi	r18, 0xFF	; 255
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	30 93 36 03 	sts	0x0336, r19
    113c:	20 93 35 03 	sts	0x0335, r18

       if (countDebTmp > BUT_COUNT_THR){
    1140:	2b 30       	cpi	r18, 0x0B	; 11
    1142:	31 05       	cpc	r19, r1
    1144:	78 f1       	brcs	.+94     	; 0x11a4 <BUT_Check+0xb6>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
    1146:	10 fd       	sbrc	r17, 0
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <BUT_Check+0x66>
             stateTmp |= FLAG_BUT_PRESSED;
    114a:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
    114c:	40 ff       	sbrs	r20, 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <BUT_Check+0x66>
    1150:	01 e0       	ldi	r16, 0x01	; 1
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <BUT_Check+0x68>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
    1154:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	25 3f       	cpi	r18, 0xF5	; 245
    115a:	38 07       	cpc	r19, r24
    115c:	21 f5       	brne	.+72     	; 0x11a6 <BUT_Check+0xb8>
         if (!(stateTmp & FLAG_BUT_HOLD)){
    115e:	11 fd       	sbrc	r17, 1
    1160:	22 c0       	rjmp	.+68     	; 0x11a6 <BUT_Check+0xb8>
            stateTmp &= ~(FLAG_BUT_RELEASED);
    1162:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
    1164:	12 60       	ori	r17, 0x02	; 2
    1166:	1f c0       	rjmp	.+62     	; 0x11a6 <BUT_Check+0xb8>
    }    
  }
  else{

#if (BUT_DOUBLE_CLICK_EN == 1)     
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
    1168:	10 ff       	sbrs	r17, 0
    116a:	0c c0       	rjmp	.+24     	; 0x1184 <BUT_Check+0x96>
    116c:	11 fd       	sbrc	r17, 1
    116e:	0a c0       	rjmp	.+20     	; 0x1184 <BUT_Check+0x96>

       if (stateTmp & FLAG_BUT_RELEASED){
    1170:	12 ff       	sbrs	r17, 2
    1172:	05 c0       	rjmp	.+10     	; 0x117e <BUT_Check+0x90>
          stateTmp &= ~FLAG_BUT_RELEASED;
    1174:	1b 7f       	andi	r17, 0xFB	; 251
          SaveEvent_m(settings, BUT_EV_DOUBLE_CLICK, BUT_DOUBLE_CLICK_CODE, event);
    1176:	44 ff       	sbrs	r20, 4
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <BUT_Check+0x96>
    117a:	05 e0       	ldi	r16, 0x05	; 5
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <BUT_Check+0x98>
       }
       else{
          countHoldTmp = 0;
    117e:	10 92 2e 03 	sts	0x032E, r1
          stateTmp |= FLAG_BUT_RELEASED;
    1182:	14 60       	ori	r17, 0x04	; 4
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
    1184:	00 e0       	ldi	r16, 0x00	; 0
          countHoldTmp = 0;
          stateTmp |= FLAG_BUT_RELEASED;
       }    
     }       
 
     if (stateTmp & FLAG_BUT_RELEASED){   
    1186:	12 ff       	sbrs	r17, 2
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <BUT_Check+0xaa>
        if (countHoldTmp > BUT_COUNT_THR_2){
    118a:	80 91 2e 03 	lds	r24, 0x032E
    118e:	89 3c       	cpi	r24, 0xC9	; 201
    1190:	18 f0       	brcs	.+6      	; 0x1198 <BUT_Check+0xaa>
           countHoldTmp = 0;
    1192:	10 92 2e 03 	sts	0x032E, r1
           stateTmp &= ~FLAG_BUT_RELEASED;
    1196:	1b 7f       	andi	r17, 0xFB	; 251
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
    1198:	10 92 36 03 	sts	0x0336, r1
    119c:	10 92 35 03 	sts	0x0335, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
    11a0:	1c 7f       	andi	r17, 0xFC	; 252
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <BUT_Check+0xb8>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
    11a4:	00 e0       	ldi	r16, 0x00	; 0
  }

 

#if (BUT_DOUBLE_CLICK_EN == 1)  
  if (stateTmp & FLAG_BUT_RELEASED){
    11a6:	12 ff       	sbrs	r17, 2
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <BUT_Check+0xca>
     if (countHoldTmp < BUT_COUNT_THR_2_MAX){
    11aa:	80 91 2e 03 	lds	r24, 0x032E
    11ae:	89 3c       	cpi	r24, 0xC9	; 201
    11b0:	18 f4       	brcc	.+6      	; 0x11b8 <BUT_Check+0xca>
        countHoldTmp++;
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	80 93 2e 03 	sts	0x032E, r24
     }
  }
 
  countHold[i] = countHoldTmp;
    11b8:	fe 01       	movw	r30, r28
    11ba:	e5 5d       	subi	r30, 0xD5	; 213
    11bc:	fc 4f       	sbci	r31, 0xFC	; 252
    11be:	80 91 2e 03 	lds	r24, 0x032E
    11c2:	80 83       	st	Z, r24
#endif       
  
  if (event){
    11c4:	00 23       	and	r16, r16
    11c6:	21 f0       	breq	.+8      	; 0x11d0 <BUT_Check+0xe2>
     PutBut(i+1);
    11c8:	86 2f       	mov	r24, r22
    11ca:	7d df       	rcall	.-262    	; 0x10c6 <PutBut>
     PutBut(event);
    11cc:	80 2f       	mov	r24, r16
    11ce:	7b df       	rcall	.-266    	; 0x10c6 <PutBut>
  }
  
  countDeb[i] = countDebTmp;
    11d0:	fe 01       	movw	r30, r28
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	e1 5d       	subi	r30, 0xD1	; 209
    11d8:	fc 4f       	sbci	r31, 0xFC	; 252
    11da:	80 91 35 03 	lds	r24, 0x0335
    11de:	90 91 36 03 	lds	r25, 0x0336
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
    11e6:	c8 5d       	subi	r28, 0xD8	; 216
    11e8:	dc 4f       	sbci	r29, 0xFC	; 252
    11ea:	18 83       	st	Y, r17
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <BUT_GetBut>:

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
    
  if (count){
    11f6:	20 91 37 03 	lds	r18, 0x0337
    11fa:	22 23       	and	r18, r18
    11fc:	79 f0       	breq	.+30     	; 0x121c <BUT_GetBut+0x26>
     but = buf[tail];
    11fe:	90 91 41 03 	lds	r25, 0x0341
    1202:	e9 2f       	mov	r30, r25
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	e7 5c       	subi	r30, 0xC7	; 199
    1208:	fc 4f       	sbci	r31, 0xFC	; 252
    120a:	80 81       	ld	r24, Z
     count--;
    120c:	21 50       	subi	r18, 0x01	; 1
    120e:	20 93 37 03 	sts	0x0337, r18
     tail++;
    1212:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
    1214:	97 70       	andi	r25, 0x07	; 7
    1216:	90 93 41 03 	sts	0x0341, r25
    121a:	08 95       	ret
  }
}

uint8_t BUT_GetBut(void)
{
  uint8_t but = 0;
    121c:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
    121e:	08 95       	ret

00001220 <BUT_Init>:
void BUT_Init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
    1220:	10 92 30 03 	sts	0x0330, r1
    1224:	10 92 2f 03 	sts	0x032F, r1
     stateBut[i] = 0;
    1228:	10 92 28 03 	sts	0x0328, r1
     
#if (BUT_DOUBLE_CLICK_EN == 1)      
     countHold[i] = 0;
    122c:	10 92 2b 03 	sts	0x032B, r1
void BUT_Init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
    1230:	10 92 32 03 	sts	0x0332, r1
    1234:	10 92 31 03 	sts	0x0331, r1
     stateBut[i] = 0;
    1238:	10 92 29 03 	sts	0x0329, r1
     
#if (BUT_DOUBLE_CLICK_EN == 1)      
     countHold[i] = 0;
    123c:	10 92 2c 03 	sts	0x032C, r1
void BUT_Init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
    1240:	10 92 34 03 	sts	0x0334, r1
    1244:	10 92 33 03 	sts	0x0333, r1
     stateBut[i] = 0;
    1248:	10 92 2a 03 	sts	0x032A, r1
     
#if (BUT_DOUBLE_CLICK_EN == 1)      
     countHold[i] = 0;
    124c:	10 92 2d 03 	sts	0x032D, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
    1250:	10 92 39 03 	sts	0x0339, r1
    1254:	10 92 3a 03 	sts	0x033A, r1
    1258:	10 92 3b 03 	sts	0x033B, r1
    125c:	10 92 3c 03 	sts	0x033C, r1
    1260:	10 92 3d 03 	sts	0x033D, r1
    1264:	10 92 3e 03 	sts	0x033E, r1
    1268:	10 92 3f 03 	sts	0x033F, r1
    126c:	10 92 40 03 	sts	0x0340, r1
  }
  
  head = 0;
    1270:	10 92 38 03 	sts	0x0338, r1
  tail = 0;  
    1274:	10 92 41 03 	sts	0x0341, r1
  count = 0;
    1278:	10 92 37 03 	sts	0x0337, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
    127c:	8a 98       	cbi	0x11, 2	; 17
    127e:	92 98       	cbi	0x12, 2	; 18
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
    1280:	8b 98       	cbi	0x11, 3	; 17
    1282:	93 98       	cbi	0x12, 3	; 18
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
    1284:	8c 98       	cbi	0x11, 4	; 17
    1286:	94 98       	cbi	0x12, 4	; 18
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
    1288:	08 95       	ret

0000128a <BUT_Poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	82 99       	sbic	0x10, 2	; 16
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	41 e1       	ldi	r20, 0x11	; 17
    1294:	2c df       	rcall	.-424    	; 0x10ee <BUT_Check>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	83 99       	sbic	0x10, 3	; 16
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	62 e0       	ldi	r22, 0x02	; 2
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	26 df       	rcall	.-436    	; 0x10ee <BUT_Check>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	84 99       	sbic	0x10, 4	; 16
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	63 e0       	ldi	r22, 0x03	; 3
    12aa:	41 e0       	ldi	r20, 0x01	; 1
    12ac:	20 df       	rcall	.-448    	; 0x10ee <BUT_Check>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
    12ae:	08 95       	ret

000012b0 <USART_Init>:
#endif


//инициализация usart`a
void USART_Init(uint8_t regime, uint16_t baudRate)
{
    12b0:	1f 93       	push	r17
  uint16_t ubrrValue;

  uint8_t save = SREG;
    12b2:	1f b7       	in	r17, 0x3f	; 63
  cli();	
    12b4:	f8 94       	cli
	
  txBufTail = 0;
    12b6:	10 92 67 03 	sts	0x0367, r1
  txBufHead = 0;
    12ba:	10 92 56 03 	sts	0x0356, r1
  txCount = 0;
    12be:	10 92 55 03 	sts	0x0355, r1
  
  rxBufTail = 0;
    12c2:	10 92 43 03 	sts	0x0343, r1
  rxBufHead = 0;
    12c6:	10 92 54 03 	sts	0x0354, r1
  rxCount = 0;
    12ca:	10 92 42 03 	sts	0x0342, r1
  
  UCSRB = 0;
    12ce:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
    12d0:	10 bc       	out	0x20, r1	; 32
    12d2:	9b 01       	movw	r18, r22
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	50 e0       	ldi	r21, 0x00	; 0
  
  if (regime == USART_NORMAL){
    12d8:	88 23       	and	r24, r24
    12da:	41 f4       	brne	.+16     	; 0x12ec <USART_Init+0x3c>
    ubrrValue = F_CPU/(16UL*baudRate) - 1;
    12dc:	94 e0       	ldi	r25, 0x04	; 4
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	44 1f       	adc	r20, r20
    12e4:	55 1f       	adc	r21, r21
    12e6:	9a 95       	dec	r25
    12e8:	d1 f7       	brne	.-12     	; 0x12de <USART_Init+0x2e>
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <USART_Init+0x4a>
  }
  else{
    ubrrValue = F_CPU/(8UL*baudRate) - 1;
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	22 0f       	add	r18, r18
    12f0:	33 1f       	adc	r19, r19
    12f2:	44 1f       	adc	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	8a 95       	dec	r24
    12f8:	d1 f7       	brne	.-12     	; 0x12ee <USART_Init+0x3e>
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	72 e1       	ldi	r23, 0x12	; 18
    12fe:	8a e7       	ldi	r24, 0x7A	; 122
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	d4 d0       	rcall	.+424    	; 0x14ac <__udivmodsi4>
    1304:	21 50       	subi	r18, 0x01	; 1
    1306:	30 40       	sbci	r19, 0x00	; 0
  }
  
  UBRRH = (uint8_t)(ubrrValue >> 8);  
    1308:	30 bd       	out	0x20, r19	; 32
  UBRRL = (uint8_t)ubrrValue;
    130a:	29 b9       	out	0x09, r18	; 9

  UCSRA = (1<< (1 & U2X));
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	8b b9       	out	0x0b, r24	; 11
  UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN); //разр. прерыв при приеме, разр приема, разр передачи.
    1310:	88 e9       	ldi	r24, 0x98	; 152
    1312:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //размер слова 8 разрядов
    1314:	86 e8       	ldi	r24, 0x86	; 134
    1316:	80 bd       	out	0x20, r24	; 32

  SREG = save;
    1318:	1f bf       	out	0x3f, r17	; 63
}
    131a:	1f 91       	pop	r17
    131c:	08 95       	ret

0000131e <USART_PutChar>:
}

//помещает символ в буфер, инициирует начало передачи
void USART_PutChar(char sym)
{
    while(txCount == SIZE_BUF_TX);
    131e:	90 91 55 03 	lds	r25, 0x0355
    1322:	90 31       	cpi	r25, 0x10	; 16
    1324:	e1 f3       	breq	.-8      	; 0x131e <USART_PutChar>
    
	cli();
    1326:	f8 94       	cli
    if (!txCount){
    1328:	90 91 55 03 	lds	r25, 0x0355
    132c:	99 23       	and	r25, r25
    132e:	09 f4       	brne	.+2      	; 0x1332 <USART_PutChar+0x14>
       UCSRB |= (1<<UDRIE);
    1330:	55 9a       	sbi	0x0a, 5	; 10
    }
    if (txCount < SIZE_BUF_TX){    //если в буфере еще есть место
    1332:	90 91 55 03 	lds	r25, 0x0355
    1336:	90 31       	cpi	r25, 0x10	; 16
    1338:	b0 f4       	brcc	.+44     	; 0x1366 <USART_PutChar+0x48>
      usartTxBuf[txBufTail] = sym; //помещаем в него символ
    133a:	e0 91 67 03 	lds	r30, 0x0367
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	e9 5a       	subi	r30, 0xA9	; 169
    1342:	fc 4f       	sbci	r31, 0xFC	; 252
    1344:	80 83       	st	Z, r24
      txCount++;                   //инкрементируем счетчик символов
    1346:	80 91 55 03 	lds	r24, 0x0355
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	80 93 55 03 	sts	0x0355, r24
      txBufTail++;                 //и индекс хвоста буфера
    1350:	80 91 67 03 	lds	r24, 0x0367
    1354:	8f 5f       	subi	r24, 0xFF	; 255
    1356:	80 93 67 03 	sts	0x0367, r24
      if (txBufTail == SIZE_BUF_TX) txBufTail = 0;
    135a:	80 91 67 03 	lds	r24, 0x0367
    135e:	80 31       	cpi	r24, 0x10	; 16
    1360:	11 f4       	brne	.+4      	; 0x1366 <USART_PutChar+0x48>
    1362:	10 92 67 03 	sts	0x0367, r1
    }
	sei();
    1366:	78 94       	sei
}
    1368:	08 95       	ret

0000136a <USART_SendStr>:

//функция посылающая строку из озу по usart`у
void USART_SendStr(char * data)
{
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	e8 2e       	mov	r14, r24
    1374:	e7 01       	movw	r28, r14
    1376:	7e 01       	movw	r14, r28
    1378:	f9 2e       	mov	r15, r25
    137a:	e7 01       	movw	r28, r14
  char sym;
  while(*data){
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <USART_SendStr+0x16>
    sym = *data++;
    USART_PutChar(sym);
    137e:	cf df       	rcall	.-98     	; 0x131e <USART_PutChar>

//функция посылающая строку из озу по usart`у
void USART_SendStr(char * data)
{
  char sym;
  while(*data){
    1380:	89 91       	ld	r24, Y+
    1382:	88 23       	and	r24, r24
    1384:	e1 f7       	brne	.-8      	; 0x137e <USART_SendStr+0x14>
    sym = *data++;
    USART_PutChar(sym);
  }
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	08 95       	ret

00001390 <__vector_12>:
  }
}

//обработчик прерывания 
ISR(USART_UDRE_vect) 
{
    1390:	1f 92       	push	r1
    1392:	0f 92       	push	r0
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	0f 92       	push	r0
    1398:	11 24       	eor	r1, r1
    139a:	8f 93       	push	r24
    139c:	ef 93       	push	r30
    139e:	ff 93       	push	r31
  if (txCount > 0){              //если буфер не пустой
    13a0:	80 91 55 03 	lds	r24, 0x0355
    13a4:	88 23       	and	r24, r24
    13a6:	c1 f0       	breq	.+48     	; 0x13d8 <__vector_12+0x48>
    UDR = usartTxBuf[txBufHead]; //записываем в UDR символ из буфера
    13a8:	e0 91 56 03 	lds	r30, 0x0356
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	e9 5a       	subi	r30, 0xA9	; 169
    13b0:	fc 4f       	sbci	r31, 0xFC	; 252
    13b2:	80 81       	ld	r24, Z
    13b4:	8c b9       	out	0x0c, r24	; 12
    txCount--;                   //уменьшаем счетчик символов
    13b6:	80 91 55 03 	lds	r24, 0x0355
    13ba:	81 50       	subi	r24, 0x01	; 1
    13bc:	80 93 55 03 	sts	0x0355, r24
    txBufHead++;                 //инкрементируем индекс головы буфера
    13c0:	80 91 56 03 	lds	r24, 0x0356
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	80 93 56 03 	sts	0x0356, r24
    if (txBufHead == SIZE_BUF_TX) txBufHead = 0;
    13ca:	80 91 56 03 	lds	r24, 0x0356
    13ce:	80 31       	cpi	r24, 0x10	; 16
    13d0:	21 f4       	brne	.+8      	; 0x13da <__vector_12+0x4a>
    13d2:	10 92 56 03 	sts	0x0356, r1
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <__vector_12+0x4a>
  } 
  else{
    UCSRB &= ~(1<<UDRIE);
    13d8:	55 98       	cbi	0x0a, 5	; 10
  }
} 
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	8f 91       	pop	r24
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <USART_GetRxCount>:

//______________________________________________________________________________
//возвращает колличество символов находящихся в приемном буфере
uint8_t USART_GetRxCount(void)
{
  return rxCount;  
    13ea:	80 91 42 03 	lds	r24, 0x0342
}
    13ee:	08 95       	ret

000013f0 <USART_GetChar>:

//чтение буфера
char USART_GetChar(void)
{
  char sym;
  if (rxCount > 0){                     //если приемный буфер не пустой  
    13f0:	80 91 42 03 	lds	r24, 0x0342
    13f4:	88 23       	and	r24, r24
    13f6:	b9 f0       	breq	.+46     	; 0x1426 <USART_GetChar+0x36>
    sym = usartRxBuf[rxBufHead];        //прочитать из него символ    
    13f8:	e0 91 54 03 	lds	r30, 0x0354
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	ec 5b       	subi	r30, 0xBC	; 188
    1400:	fc 4f       	sbci	r31, 0xFC	; 252
    1402:	80 81       	ld	r24, Z
    rxCount--;                          //уменьшить счетчик символов
    1404:	90 91 42 03 	lds	r25, 0x0342
    1408:	91 50       	subi	r25, 0x01	; 1
    140a:	90 93 42 03 	sts	0x0342, r25
    rxBufHead++;                        //инкрементировать индекс головы буфера  
    140e:	90 91 54 03 	lds	r25, 0x0354
    1412:	9f 5f       	subi	r25, 0xFF	; 255
    1414:	90 93 54 03 	sts	0x0354, r25
    if (rxBufHead == SIZE_BUF_RX) rxBufHead = 0;
    1418:	90 91 54 03 	lds	r25, 0x0354
    141c:	90 31       	cpi	r25, 0x10	; 16
    141e:	21 f4       	brne	.+8      	; 0x1428 <USART_GetChar+0x38>
    1420:	10 92 54 03 	sts	0x0354, r1
    1424:	08 95       	ret
    return sym;                         //вернуть прочитанный символ
  }
  return 0;
    1426:	80 e0       	ldi	r24, 0x00	; 0
}
    1428:	08 95       	ret

0000142a <__vector_11>:

volatile uint8_t block = 0;

//прерывание по завершению приема
ISR(USART_RXC_vect) 
{
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
    char data = UDR;
    143c:	8c b1       	in	r24, 0x0c	; 12
    if (rxCount < SIZE_BUF_RX){                    //если в буфере еще есть место   
    143e:	90 91 42 03 	lds	r25, 0x0342
    1442:	90 31       	cpi	r25, 0x10	; 16
    1444:	b0 f4       	brcc	.+44     	; 0x1472 <__vector_11+0x48>
      usartRxBuf[rxBufTail] = data;                //считать символ из UDR в буфер
    1446:	e0 91 43 03 	lds	r30, 0x0343
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	ec 5b       	subi	r30, 0xBC	; 188
    144e:	fc 4f       	sbci	r31, 0xFC	; 252
    1450:	80 83       	st	Z, r24
      rxBufTail++;                                 //увеличить индекс хвоста приемного буфера 
    1452:	80 91 43 03 	lds	r24, 0x0343
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 43 03 	sts	0x0343, r24
      if (rxBufTail == SIZE_BUF_RX) rxBufTail = 0;  
    145c:	80 91 43 03 	lds	r24, 0x0343
    1460:	80 31       	cpi	r24, 0x10	; 16
    1462:	11 f4       	brne	.+4      	; 0x1468 <__vector_11+0x3e>
    1464:	10 92 43 03 	sts	0x0343, r1
      rxCount++;                                   //увеличить счетчик принятых символов
    1468:	80 91 42 03 	lds	r24, 0x0342
    146c:	8f 5f       	subi	r24, 0xFF	; 255
    146e:	80 93 42 03 	sts	0x0342, r24
    }
} 
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <__udivmodhi4>:
    1484:	aa 1b       	sub	r26, r26
    1486:	bb 1b       	sub	r27, r27
    1488:	51 e1       	ldi	r21, 0x11	; 17
    148a:	07 c0       	rjmp	.+14     	; 0x149a <__udivmodhi4_ep>

0000148c <__udivmodhi4_loop>:
    148c:	aa 1f       	adc	r26, r26
    148e:	bb 1f       	adc	r27, r27
    1490:	a6 17       	cp	r26, r22
    1492:	b7 07       	cpc	r27, r23
    1494:	10 f0       	brcs	.+4      	; 0x149a <__udivmodhi4_ep>
    1496:	a6 1b       	sub	r26, r22
    1498:	b7 0b       	sbc	r27, r23

0000149a <__udivmodhi4_ep>:
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	5a 95       	dec	r21
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__udivmodhi4_loop>
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	08 95       	ret

000014ac <__udivmodsi4>:
    14ac:	a1 e2       	ldi	r26, 0x21	; 33
    14ae:	1a 2e       	mov	r1, r26
    14b0:	aa 1b       	sub	r26, r26
    14b2:	bb 1b       	sub	r27, r27
    14b4:	fd 01       	movw	r30, r26
    14b6:	0d c0       	rjmp	.+26     	; 0x14d2 <__udivmodsi4_ep>

000014b8 <__udivmodsi4_loop>:
    14b8:	aa 1f       	adc	r26, r26
    14ba:	bb 1f       	adc	r27, r27
    14bc:	ee 1f       	adc	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	a2 17       	cp	r26, r18
    14c2:	b3 07       	cpc	r27, r19
    14c4:	e4 07       	cpc	r30, r20
    14c6:	f5 07       	cpc	r31, r21
    14c8:	20 f0       	brcs	.+8      	; 0x14d2 <__udivmodsi4_ep>
    14ca:	a2 1b       	sub	r26, r18
    14cc:	b3 0b       	sbc	r27, r19
    14ce:	e4 0b       	sbc	r30, r20
    14d0:	f5 0b       	sbc	r31, r21

000014d2 <__udivmodsi4_ep>:
    14d2:	66 1f       	adc	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	1a 94       	dec	r1
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <__udivmodsi4_loop>
    14de:	60 95       	com	r22
    14e0:	70 95       	com	r23
    14e2:	80 95       	com	r24
    14e4:	90 95       	com	r25
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	bd 01       	movw	r22, r26
    14ec:	cf 01       	movw	r24, r30
    14ee:	08 95       	ret

000014f0 <ltoa>:
    14f0:	fa 01       	movw	r30, r20
    14f2:	cf 93       	push	r28
    14f4:	ff 93       	push	r31
    14f6:	ef 93       	push	r30
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	3c f1       	brlt	.+78     	; 0x154a <ltoa+0x5a>
    14fc:	25 32       	cpi	r18, 0x25	; 37
    14fe:	2c f5       	brge	.+74     	; 0x154a <ltoa+0x5a>
    1500:	c2 2f       	mov	r28, r18
    1502:	e8 94       	clt
    1504:	ca 30       	cpi	r28, 0x0A	; 10
    1506:	49 f4       	brne	.+18     	; 0x151a <ltoa+0x2a>
    1508:	97 fb       	bst	r25, 7
    150a:	3e f4       	brtc	.+14     	; 0x151a <ltoa+0x2a>
    150c:	90 95       	com	r25
    150e:	80 95       	com	r24
    1510:	70 95       	com	r23
    1512:	61 95       	neg	r22
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	2c 2f       	mov	r18, r28
    151c:	33 27       	eor	r19, r19
    151e:	44 27       	eor	r20, r20
    1520:	55 27       	eor	r21, r21
    1522:	ff 93       	push	r31
    1524:	ef 93       	push	r30
    1526:	c2 df       	rcall	.-124    	; 0x14ac <__udivmodsi4>
    1528:	ef 91       	pop	r30
    152a:	ff 91       	pop	r31
    152c:	60 5d       	subi	r22, 0xD0	; 208
    152e:	6a 33       	cpi	r22, 0x3A	; 58
    1530:	0c f0       	brlt	.+2      	; 0x1534 <ltoa+0x44>
    1532:	69 5d       	subi	r22, 0xD9	; 217
    1534:	61 93       	st	Z+, r22
    1536:	b9 01       	movw	r22, r18
    1538:	ca 01       	movw	r24, r20
    153a:	60 50       	subi	r22, 0x00	; 0
    153c:	70 40       	sbci	r23, 0x00	; 0
    153e:	80 40       	sbci	r24, 0x00	; 0
    1540:	90 40       	sbci	r25, 0x00	; 0
    1542:	59 f7       	brne	.-42     	; 0x151a <ltoa+0x2a>
    1544:	16 f4       	brtc	.+4      	; 0x154a <ltoa+0x5a>
    1546:	cd e2       	ldi	r28, 0x2D	; 45
    1548:	c1 93       	st	Z+, r28
    154a:	10 82       	st	Z, r1
    154c:	8f 91       	pop	r24
    154e:	9f 91       	pop	r25
    1550:	cf 91       	pop	r28
    1552:	0d c0       	rjmp	.+26     	; 0x156e <strrev>

00001554 <__eerd_dword_m8>:
    1554:	a6 e1       	ldi	r26, 0x16	; 22
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	44 e0       	ldi	r20, 0x04	; 4
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	1a c0       	rjmp	.+52     	; 0x1592 <__eerd_blraw_m8>

0000155e <__eewr_dword_m8>:
    155e:	24 2f       	mov	r18, r20
    1560:	27 d0       	rcall	.+78     	; 0x15b0 <__eewr_r18_m8>
    1562:	25 2f       	mov	r18, r21
    1564:	25 d0       	rcall	.+74     	; 0x15b0 <__eewr_r18_m8>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <__eewr_word_m8>

00001568 <__eewr_word_m8>:
    1568:	22 d0       	rcall	.+68     	; 0x15ae <__eewr_byte_m8>
    156a:	27 2f       	mov	r18, r23
    156c:	21 c0       	rjmp	.+66     	; 0x15b0 <__eewr_r18_m8>

0000156e <strrev>:
    156e:	dc 01       	movw	r26, r24
    1570:	fc 01       	movw	r30, r24
    1572:	67 2f       	mov	r22, r23
    1574:	71 91       	ld	r23, Z+
    1576:	77 23       	and	r23, r23
    1578:	e1 f7       	brne	.-8      	; 0x1572 <strrev+0x4>
    157a:	32 97       	sbiw	r30, 0x02	; 2
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <strrev+0x18>
    157e:	7c 91       	ld	r23, X
    1580:	6d 93       	st	X+, r22
    1582:	70 83       	st	Z, r23
    1584:	62 91       	ld	r22, -Z
    1586:	ae 17       	cp	r26, r30
    1588:	bf 07       	cpc	r27, r31
    158a:	c8 f3       	brcs	.-14     	; 0x157e <strrev+0x10>
    158c:	08 95       	ret

0000158e <__eerd_block_m8>:
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22

00001592 <__eerd_blraw_m8>:
    1592:	fc 01       	movw	r30, r24
    1594:	e1 99       	sbic	0x1c, 1	; 28
    1596:	fe cf       	rjmp	.-4      	; 0x1594 <__eerd_blraw_m8+0x2>
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <__eerd_blraw_m8+0x14>
    159a:	ff bb       	out	0x1f, r31	; 31
    159c:	ee bb       	out	0x1e, r30	; 30
    159e:	e0 9a       	sbi	0x1c, 0	; 28
    15a0:	31 96       	adiw	r30, 0x01	; 1
    15a2:	0d b2       	in	r0, 0x1d	; 29
    15a4:	0d 92       	st	X+, r0
    15a6:	41 50       	subi	r20, 0x01	; 1
    15a8:	50 40       	sbci	r21, 0x00	; 0
    15aa:	b8 f7       	brcc	.-18     	; 0x159a <__eerd_blraw_m8+0x8>
    15ac:	08 95       	ret

000015ae <__eewr_byte_m8>:
    15ae:	26 2f       	mov	r18, r22

000015b0 <__eewr_r18_m8>:
    15b0:	e1 99       	sbic	0x1c, 1	; 28
    15b2:	fe cf       	rjmp	.-4      	; 0x15b0 <__eewr_r18_m8>
    15b4:	9f bb       	out	0x1f, r25	; 31
    15b6:	8e bb       	out	0x1e, r24	; 30
    15b8:	2d bb       	out	0x1d, r18	; 29
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	e2 9a       	sbi	0x1c, 2	; 28
    15c0:	e1 9a       	sbi	0x1c, 1	; 28
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	08 95       	ret

000015c8 <_exit>:
    15c8:	f8 94       	cli

000015ca <__stop_program>:
    15ca:	ff cf       	rjmp	.-2      	; 0x15ca <__stop_program>
